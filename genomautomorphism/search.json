[{"path":"https://genomaths.github.io/GenomAutomorphism/articles/GenomAutomorphism.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Get started-with GenomAutomorphism","text":"R package compute autimorphisms pairwise aligned DNA sequences represented elements Genomic Abelian group described reference (1). general scenario, whole chromosomes genomic regions population (species close related species) can algebraically represented direct sum cyclic groups specifically Abelian p-groups. Basically, propose representation multiple sequence alignments (MSA) length N finite Abelian group created direct sum Abelian group prime-power order: \\[ \\qquad G = (\\mathbb{Z}_{p^{\\alpha_{1}}_1})^{n_1} \\oplus (\\mathbb{Z}_{p^{\\alpha_{2}}_1})^{n_2} \\oplus \\dots \\oplus (\\mathbb{Z}_{p^{\\alpha_{k}}_k})^{n_k}  \\] , \\(p_i\\)’s prime numbers, \\(\\alpha_i \\\\mathbb{N}\\) \\(\\mathbb{Z}_{p^{\\alpha_{}}_i}\\) group integer modulo \\(p^{\\alpha_{}}_i\\). purpose estimating automorphism two aligned DNA sequences, \\(p^{\\alpha_{}}_i \\\\{5, 2^6, 5^3 \\}\\).","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/GenomAutomorphism.html","id":"automorphisms","dir":"Articles","previous_headings":"Overview","what":"Automorphisms","title":"Get started-with GenomAutomorphism","text":"Herein, automorphisms considered algebraic descriptions mutational event observed codon sequences represented different Abelian groups. particular, described references (3-4), representation codon set defined Abelian group 24 possible isomorphic Abelian groups. Abelian groups can labeled based DNA base-order used generate . set 24 Abelian groups can described group isomorphic symmetric group degree four (\\(S_4\\), see reference (4)). support symmetric group 24 Abelian group genetic-code cubes, users can also see Symmetric Group Genetic-Code Cubes., specifically Mathematica notebook IntroductionToZ5GeneticCodeVectorSpace.nb interact using Wolfram Player, freely available (Windows Linux OS) , https://www.wolfram.com/player/.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/GenomAutomorphism.html","id":"load-the-r-libraries","dir":"Articles","previous_headings":"Overview","what":"Load the R libraries","title":"Get started-with GenomAutomorphism","text":"","code":"library(Biostrings) #> Loading required package: BiocGenerics #>  #> Attaching package: 'BiocGenerics' #> The following objects are masked from 'package:stats': #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from 'package:base': #>  #>     anyDuplicated, append, as.data.frame, basename, cbind, colnames, dirname, do.call, duplicated, eval, #>     evalq, Filter, Find, get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget, order, #>     paste, pmax, pmax.int, pmin, pmin.int, Position, rank, rbind, Reduce, rownames, sapply, setdiff, sort, #>     table, tapply, union, unique, unsplit, which.max, which.min #> Loading required package: S4Vectors #> Loading required package: stats4 #>  #> Attaching package: 'S4Vectors' #> The following objects are masked from 'package:base': #>  #>     expand.grid, I, unname #> Loading required package: IRanges #> Loading required package: XVector #> Loading required package: GenomeInfoDb #>  #> Attaching package: 'Biostrings' #> The following object is masked from 'package:base': #>  #>     strsplit library(GenomAutomorphism) library(usefr) #>  #> Attaching package: 'usefr' #> The following object is masked from 'package:BiocGenerics': #>  #>     unlist #> The following object is masked from 'package:base': #>  #>     unlist"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/GenomAutomorphism.html","id":"read-the-alignment-fasta-and-encode-the-sequences","dir":"Articles","previous_headings":"","what":"Read the alignment FASTA and encode the sequences","title":"Get started-with GenomAutomorphism","text":"FASTA file carries pairwise sequence alignment protein coding regions SARS coronavirus GZ02 (GenBank: AY390556.1) Bat SARS-like coronavirus isolate Rs7327 (GenBank: KY417151.1). DNA sequence read corresponding codon sequences represented Abelian group \\(\\mathbb{Z}_{64}\\) (.e., set integers remainder modulo 64). codon coordinates requested cube ACGT. Following reference (4)), cubes labeled based order DNA bases used define sum operation. codon sequences (seq1 seq2) corresponding coordinates (left) returned, well coordinated representation \\(\\mathbb{Z}_{64}\\) (coord1 coord2).","code":"URL <- paste0(\"https://github.com/genomaths/seqalignments/raw/master/\",          \"COVID-19/AY390556.1_and_KY417151.1_aligned_protein-coding.fas\")  covid_aln <- readDNAMultipleAlignment(filepath = URL) covid_aln #> DNAMultipleAlignment with 2 rows and 29166 columns #>      aln                                                                                            names                #> [1] ATGGAGAGCCTTGTTCTTGGTGTCAACGAGAAAACACACGTCCAAC...CAAAATTCCATGAGTGGAGCTTCTGCTGATTCAACTCAGGCATAA lcl|AY390556.1_cd... #> [2] ATGGAGAGCCTTGTTCTTGGTGTCAACGAGAAAACACACGTCCAAC...CAAAATTCCATGAGTGGAGCTTCTGCTGATTCAACTCAGGCATAA lcl|KY417151.1_cd... data(covid_aln, package = \"GenomAutomorphism\") codons <- codon_coord(codon = covid_aln,                        cube = \"ACGT\",                        group = \"Z64\",                        chr = 1L,                       strand = \"+\",                       start = 1,                       end = 750) codons #> CodonGroup object with 250 ranges and 4 metadata columns: #>         seqnames    ranges strand |        seq1        seq2      coord1      coord2 #>            <Rle> <IRanges>  <Rle> | <character> <character> <character> <character> #>     [1]        1         1      + |         ATG         ATG          50          50 #>     [2]        1         2      + |         GAG         GAG          10          10 #>     [3]        1         3      + |         AGC         AGC          33          33 #>     [4]        1         4      + |         CTT         CTT          55          55 #>     [5]        1         5      + |         GTT         GTT          59          59 #>     ...      ...       ...    ... .         ...         ...         ...         ... #>   [246]        1       246      + |         GAT         GAT          11          11 #>   [247]        1       247      + |         AAG         AAG           2           2 #>   [248]        1       248      + |         AGC         AGC          33          33 #>   [249]        1       249      + |         TAC         TAT          13          15 #>   [250]        1       250      + |         GAG         GAG          10          10 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/GenomAutomorphism.html","id":"automorphisms-on-mathbbz_64","dir":"Articles","previous_headings":"","what":"Automorphisms on \\(\\mathbb{Z}_{64}\\)","title":"Get started-with GenomAutomorphism","text":"Automorphisms can computed starting directly FASTA file. Notice can work genomic regions interest giving start end alignment coordinates. Z64 automorphisms described functions \\(f(x) = k\\,x \\quad mod\\,64\\), \\(k\\) \\(x\\) elements set integers modulo 64. , function automorphism three important arguments given values: group = “Z64”, cube = c(“ACGT”, “TGCA”), cube_alt = c(“CATG”, “GTAC”). Setting group specifies group automorphisms computed. groups can : “Z5”, “Z64”, “Z125”, “Z5^3”. groups “Z64” “Z125” mutational events can described automorphisms given cube. , character string denoting pairs “dual” genetic-code cubes, given references (1-4)), given argument cube. , base pairs given cubes must complementary . cube pair call dual cubes , shown reference (4)), pair integrates group. automorphisms found first set dual cubes, algorithm search automorphism alternative set dual cubes. Observe two new columns added, automorphism coefficient \\(k\\) (named autm) genetic-code cube automorphism found. convention DNA sequence given positive strand. Since dual cube “ACGT” corresponds complementary base order TGCA, automorphisms described cube TGCA represent mutational events affecting DNA negative strand (-). last result can summarized gene regions follow: , function automorphismByRanges permits classification pairwise alignment protein-coding sub-regions based mutational events observed quantitatively represented automorphisms genetic-code cubes. Searching automorphisms \\(\\mathbb{Z}_{64}\\) permits us quantitative differentiation mutational events different codon positions given DNA protein-encoding region. shown reference (4)) set different cubes can applied describe best evolutionary aminoacid scale highly correlated aminoacid physicochemical properties describing observed evolutionary process given protein. information subject can found supporting material reference (4)) GitHub GenomeAlgebra_SymmetricGroup, particularly interacting Mathematica notebook Genetic-Code-Scales_of_Amino-Acids.nb.","code":"autm <- automorphism(                       seqs = covid_aln,                       group = \"Z64\",                       cube = c(\"ACGT\", \"TGCA\"),                       cube_alt = c(\"CATG\", \"GTAC\"),                       start = 1,                       end = 750,                        verbose = FALSE) autm #> Automorphism object with 250 ranges and 6 metadata columns: #>         seqnames    ranges strand |        seq1        seq2    coord1    coord2      autm        cube #>            <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> <numeric> <character> #>     [1]        1         1      + |         ATG         ATG        50        50         1        ACGT #>     [2]        1         2      + |         GAG         GAG        10        10         1        ACGT #>     [3]        1         3      + |         AGC         AGC        33        33         1        ACGT #>     [4]        1         4      + |         CTT         CTT        55        55         1        ACGT #>     [5]        1         5      + |         GTT         GTT        59        59         1        ACGT #>     ...      ...       ...    ... .         ...         ...       ...       ...       ...         ... #>   [246]        1       246      + |         GAT         GAT        11        11         1        ACGT #>   [247]        1       247      + |         AAG         AAG         2         2         1        ACGT #>   [248]        1       248      + |         AGC         AGC        33        33         1        ACGT #>   [249]        1       249      + |         TAC         TAT        13        15        11        ACGT #>   [250]        1       250      + |         GAG         GAG        10        10         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths aut_range <- automorphismByRanges(autm) aut_range #> GRanges object with 9 ranges and 1 metadata column: #>       seqnames    ranges strand |        cube #>          <Rle> <IRanges>  <Rle> | <character> #>   [1]        1     1-102      + |        ACGT #>   [2]        1       103      - |        TGCA #>   [3]        1   104-105      + |        ACGT #>   [4]        1       106      - |        TGCA #>   [5]        1   107-201      + |        ACGT #>   [6]        1       202      - |        TGCA #>   [7]        1   203-205      + |        ACGT #>   [8]        1       206      - |        TGCA #>   [9]        1   207-250      + |        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/GenomAutomorphism.html","id":"automorphisms-between-whole-genomes-of-sars-cov-2-related-coronaviruses","dir":"Articles","previous_headings":"","what":"Automorphisms between whole genomes of SARS-CoV-2 related coronaviruses","title":"Get started-with GenomAutomorphism","text":"Next, automorphism whole pairwise alignment SARS-CoV-2 related coronaviruses: data available package summary range Regions described automorphism can described translations (labeled “Trnl”) can shown follow: codon positions cover insertion-deletion (indel) mutational events. wholes regions can summarized typing: one indel mutation found region spike glycoprotein located: 7076 - 8331. , pairwise alignment SARS coronavirus GZ02 Bat SARS-like coronavirus (bat-SL-CoVZC45) reveals four single indel mutational events four regions multiple indel mutations. general, indel mutational event can modeled translations \\(\\mathbb{Z}_{64}\\).","code":"## Do not need to run it.  covid_autm <- automorphism(                     seq = covid_aln,                     group = \"Z64\",                     cube = c(\"ACGT\", \"TGCA\"),                     cube_alt = c(\"CATG\", \"GTAC\"),                     verbose = FALSE) data(covid_autm, package = \"GenomAutomorphism\") covid_autm #> Automorphism object with 9722 ranges and 6 metadata columns: #>          seqnames    ranges strand |        seq1        seq2    coord1    coord2      autm        cube #>             <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> <numeric> <character> #>      [1]        1         1      + |         ATG         ATG        50        50         1        ACGT #>      [2]        1         2      + |         GAG         GAG        10        10         1        ACGT #>      [3]        1         3      + |         AGC         AGC        33        33         1        ACGT #>      [4]        1         4      + |         CTT         CTT        55        55         1        ACGT #>      [5]        1         5      + |         GTT         GTT        59        59         1        ACGT #>      ...      ...       ...    ... .         ...         ...       ...       ...       ...         ... #>   [9718]        1      9718      + |         TCA         TCA        28        28         1        ACGT #>   [9719]        1      9719      + |         ACT         ACT        19        19         1        ACGT #>   [9720]        1      9720      + |         CAG         CAG         6         6         1        ACGT #>   [9721]        1      9721      + |         GCA         GCA        24        24         1        ACGT #>   [9722]        1      9722      + |         TAA         TAA        12        12         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths aut_range <- automorphismByRanges(covid_autm) aut_range #> GRanges object with 460 ranges and 1 metadata column: #>         seqnames    ranges strand |        cube #>            <Rle> <IRanges>  <Rle> | <character> #>     [1]        1     1-102      + |        ACGT #>     [2]        1       103      - |        TGCA #>     [3]        1   104-105      + |        ACGT #>     [4]        1       106      - |        TGCA #>     [5]        1   107-201      + |        ACGT #>     ...      ...       ...    ... .         ... #>   [456]        1 9577-9608      + |        ACGT #>   [457]        1      9609      - |        TGCA #>   [458]        1 9610-9674      + |        ACGT #>   [459]        1      9675      - |        TGCA #>   [460]        1 9676-9722      + |        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths idx = which(covid_autm$cube == \"Trnl\") covid_autm[ idx ] #> Automorphism object with 19 ranges and 6 metadata columns: #>        seqnames    ranges strand |        seq1        seq2    coord1    coord2      autm        cube #>           <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> <numeric> <character> #>    [1]        1       916      + |         AAC         AAA         1         0         0        Trnl #>    [2]        1       944      + |         ---         CCG        NA        22         0        Trnl #>    [3]        1       971      + |         ACA         ---        16        NA         0        Trnl #>    [4]        1      7077      + |         ---         AAA        NA         0         0        Trnl #>    [5]        1      9109      + |         AAT         AAA         3         0         0        Trnl #>    ...      ...       ...    ... .         ...         ...       ...       ...       ...         ... #>   [15]        1      9277      + |         CTT         ---        55        NA         0        Trnl #>   [16]        1      9278      + |         CAT         ---         7        NA         0        Trnl #>   [17]        1      9279      + |         GAA         ---         8        NA         0        Trnl #>   [18]        1      9295      + |         AAA         ---         0        NA         0        Trnl #>   [19]        1      9296      + |         CGA         ---        36        NA         0        Trnl #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths idx = which(aut_range$cube == \"Trnl\") aut_range[ idx ] #> GRanges object with 13 ranges and 1 metadata column: #>        seqnames    ranges strand |        cube #>           <Rle> <IRanges>  <Rle> | <character> #>    [1]        1       916      + |        Trnl #>    [2]        1       944      + |        Trnl #>    [3]        1       971      + |        Trnl #>    [4]        1      7077      + |        Trnl #>    [5]        1      9109      + |        Trnl #>    ...      ...       ...    ... .         ... #>    [9]        1 9244-9245      + |        Trnl #>   [10]        1      9247      + |        Trnl #>   [11]        1      9257      + |        Trnl #>   [12]        1 9277-9279      + |        Trnl #>   [13]        1 9295-9296      + |        Trnl #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/GenomAutomorphism.html","id":"bar-plot-automorphism-distribution-by-cubes","dir":"Articles","previous_headings":"Automorphisms between whole genomes of SARS-CoV-2 related coronaviruses","what":"Bar plot automorphism distribution by cubes","title":"Get started-with GenomAutomorphism","text":"automorphism distribution cubes can summarized bar-plot graphic","code":"counts <- table(covid_autm$cube[ covid_autm$autm != 1 | is.na(covid_autm$autm) ])  par(family = \"serif\", cex = 0.9, font = 2, mar=c(4,6,4,4)) barplot(counts, main=\"Automorphism distribution\",         xlab=\"Genetic-code cube representation\",         ylab=\"Fixed mutational events\",         col=c(\"darkblue\",\"red\", \"darkgreen\"),          border = NA, axes = FALSE, #ylim = c(0, 2000),          cex.lab = 2, cex.main = 1.5, cex.names = 2) axis(2, at = c(0, 200, 400, 600, 800), cex.axis = 1.5) mtext(side = 1,line = -1.5, at = c(0.7, 1.9, 3.1, 4.3, 5.5),       text = paste0( counts ), cex = 1.4,       col = c(\"white\",\"yellow\", \"black\"))"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/GenomAutomorphism.html","id":"grouping-automorphism-by-automorphisms-coefficients--types-of-mutations","dir":"Articles","previous_headings":"Automorphisms between whole genomes of SARS-CoV-2 related coronaviruses","what":"Grouping automorphism by automorphism’s coefficients. Types of mutations","title":"Get started-with GenomAutomorphism","text":"Barplot frequency mutation types greater 2","code":"autby_coef <- automorphismByCoef(covid_autm) autby_coef <- autby_coef[ autby_coef$autm != 1 & autby_coef$autm != -1  ] counts <- table(autby_coef$mut_type) counts <- sort(counts, decreasing = TRUE) count. <- counts[ counts > 2 ]  par(family = \"serif\", cex.axis = 2, font = 2, las = 1,      cex.main = 1.4, mar = c(6,2,4,4)) barplot(count., main=\"Automorphism distribution per Mutation type\",         col = colorRampPalette(c(\"red\", \"yellow\", \"blue\"))(36),          border = NA, axes = FALSE,las=2) axis(side = 2,  cex.axis = 2, line = -1.8 ) counts #>  #> HHY HHR HHW YHH HHK HHM RHH HRH HYH --- HHS MHH WHH HMH KHH HYW YHW RHK RHY WHW YHM YHY HKH HMR HRR HRY HWH KHW RYY YHK  #> 425 189  89  34  32  25  24  18  18  16  13  12  11   7   6   5   5   4   4   4   4   4   3   3   3   3   3   3   3   3  #> YHR HMW HYK KHY KSW MHK MHW MRH RHM RHR RHW RKW RMH RMW RRY RSW RYH RYW SHH SHW SRH WMH WMS WSY YWH HKK HKR HMK HMY HSR  #>   3   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   1   1   1   1   1  #> HWS HWW HWY HYR HYY KHK KHR KKS KMH KMW KRK KRY KSH MHR MHS MKM MMM MRM MWH MWM MWS MWW MYY RMY RRK RRM RSK RYK SHM SHY  #>   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1  #> SKY SMW SRM SWR SWY SYH WHY WRH WRY WWH WWK WWS WWY WYH WYM WYW YHS YKH YKY YRY YWM YWW YWY YYH YYR  #>   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1"},{"path":[]},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/GenomAutomorphism.html","id":"conserved-regions","dir":"Articles","previous_headings":"Automorphisms between whole genomes of SARS-CoV-2 related coronaviruses > Conserved and non-conserved regions","what":"Conserved regions","title":"Get started-with GenomAutomorphism","text":"Conserved non-conserved gene regions can easily observed MSA editing bioinformatic tools. However, interesting get regions coordinates downstream analysis. Conserved regions pairwise comparisons obtain function conserved_regions: Every single base mutational event across MSA classified according IUPAC nomenclature: 1) According number hydrogen bonds (DNA/RNA double helix): strong S={C, G} (three hydrogen bonds) weak W={, U} (two hydrogen bonds). According chemical type: purines R={, G} pyrimidines Y={C, U}. 3). According presence amino keto groups base rings: amino M={C, } keto K={G, T}. Constant (hold) base positions labeled letter H. , codon positions labeled HKH means first third bases remains constant mutational events bases G T found MSA. Several regions similar one comparison.","code":"conserv <- conserved_regions(covid_autm) conserv #> AutomorphismByCoef object with 6348 ranges and 5 metadata columns: #>          seqnames    ranges strand |        seq1        seq2      autm    mut_type        cube #>             <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <character> <character> #>      [1]        1      1-19      + |         ATG         ATG         1         HHH        ACGT #>      [2]        1      1-19      + |         GAG         GAG         1         HHH        ACGT #>      [3]        1      1-19      + |         AGC         AGC         1         HHH        ACGT #>      [4]        1      1-19      + |         CTT         CTT         1         HHH        ACGT #>      [5]        1      1-19      + |         GTT         GTT         1         HHH        ACGT #>      ...      ...       ...    ... .         ...         ...       ...         ...         ... #>   [6344]        1 9683-9722      + |         GGA         GGA         1         HHH        ACGT #>   [6345]        1 9683-9722      + |         TCT         TCT         1         HHH        ACGT #>   [6346]        1 9683-9722      + |         TCA         TCA         1         HHH        ACGT #>   [6347]        1 9683-9722      + |         GCA         GCA         1         HHH        ACGT #>   [6348]        1 9683-9722      + |         TAA         TAA         1         HHH        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths conserv_unique <- conserved_regions(covid_autm, output = \"unique\") conserv_unique #> GRanges object with 744 ranges and 2 metadata columns: #>         seqnames    ranges strand |      autm        cube #>            <Rle> <IRanges>  <Rle> | <numeric> <character> #>     [1]        1      1-19      + |         1        ACGT #>     [2]        1     21-44      + |         1        ACGT #>     [3]        1     47-52      + |         1        ACGT #>     [4]        1     54-60      + |         1        ACGT #>     [5]        1     62-80      + |         1        ACGT #>     ...      ...       ...    ... .       ...         ... #>   [740]        1 9610-9614      + |         1        ACGT #>   [741]        1 9616-9648      + |         1        ACGT #>   [742]        1 9650-9674      + |         1        ACGT #>   [743]        1 9676-9681      + |         1        ACGT #>   [744]        1 9683-9722      + |         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/GenomAutomorphism.html","id":"the-best-fitted-cdf-model-for-the-sizes-of-conserved-regions","dir":"Articles","previous_headings":"Automorphisms between whole genomes of SARS-CoV-2 related coronaviruses > Conserved and non-conserved regions","what":"The best fitted CDF model for the sizes of conserved regions","title":"Get started-with GenomAutomorphism","text":"Next, function fitCDF applied find best fitted probability function sizes conserved regions.   apply Bootstrap test Goodness fit, tt seems reasons reject hypothesis sizes conserved regions follows Generalized Gamma distribution. Nevertheless, data comes one pairwise DNA sequence alignment distribution differ consider large DNA multiple sequence alignment. Short summary CDFs analyzed shown typing:","code":"widths <- width(conserv) dist <- fitCDF(widths, distNames = c(2, 3, 7, 10, 11, 19, 20), plot = TRUE,                 loss.fun = \"cauchy\") #>  #> *** Fitting Log-normal distribution ... #> .Fitting Done. #>  #> *** Fitting Half-Normal distribution ... #> .Fitting Done. #>  #> *** Fitting Gamma distribution ... #> .Fitting Done. #>  #> *** Fitting Generalized 3P Gamma distribution ... #> .Fitting Done. #>  #> *** Fitting Weibull distribution ... #> .Fitting Done. #>  #> *** Fitting Exponential distribution ... #> .Fitting Done. #>  #> *** Fitting 2P Exponential distribution ... #> .Fitting Done. #>  * Estimating Studentized residuals for Generalized 3P Gamma distribution #>  * Plots for Generalized 3P Gamma distribution... dist #> ggamma CDF model #> ------ #> Parameters: #>           Estimate   Std. Error   t value   Pr(>|t|)     #> alpha  0.715996194  0.005430414 131.84928 < 2.22e-16 *** #> scale 11.575282670  0.315824764  36.65097 < 2.22e-16 *** #> psi    1.773290037  0.024022540  73.81776 < 2.22e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.0001224475 on 6345 degrees of freedom #> Number of iterations to termination: 18  #> Reason for termination: Relative error in the sum of squares is at most `ftol'.  #>  #> Goodness of fit: #>     Adj.R.Square       rho R.Cross.val       AIC #> gof    0.9999998 0.9999998   0.9992045 -37955.95 par(lwd = 0.5) hist(widths, 14, freq = FALSE, las = 1, family = \"serif\", family = \"serif\", col = \"cyan1\", cex.main = 0.9, main = \"Histogram and best fitted CDF model for conserved region sizes\", xlab = \"Conserved region size\") x1 <- seq(1, 150, by = 1) lines(x1, dggamma(x1,                   alpha = coef(dist$bestfit)[1],                   scale = coef(dist$bestfit)[2],                   psi = coef(dist$bestfit)[3]                   ),       col = \"red\", lwd = 1) mcgoftest(            varobj = widths,            model = dist,           stat = \"ks\") #> *** Permutation GoF testing based on Kolmogorov-Smirnov statistic ( parametric approach )  ... #>       KS.stat.D      mc_p.value KS.stat.p.value     sample.size       num.sampl  #>    4.775274e-02    1.000000e+00    5.342393e-13    6.348000e+03    9.990000e+02  cat(\"\\n===========================\\n\") #>  #> =========================== mcgoftest(           varobj = widths,           model = dist,           stat = \"rmse\",           breaks = 12) #> *** Permutation GoF testing based on Root Mean Square statistic ( parametric approach )  ... #>        rmse  mc_p.value sample.size   num.sampl  #>    24.98844     1.00000  6348.00000   999.00000 dist$fit #> $`Generalized 3P Gamma` #> Nonlinear regression via the Levenberg-Marquardt algorithm #> parameter estimates: 0.715996194439718, 11.5752826701165, 1.77329003663246  #> residual sum-of-squares: 9.513e-05 #> reason terminated: Relative error in the sum of squares is at most `ftol'. #>  #> $Gamma #> Nonlinear regression via the Levenberg-Marquardt algorithm #> parameter estimates: 1.01644779433848, 28.1326662667232  #> residual sum-of-squares: 0.0001594 #> reason terminated: Relative error in the sum of squares is at most `ftol'. #>  #> $Weibull #> Nonlinear regression via the Levenberg-Marquardt algorithm #> parameter estimates: 1.00730503428026, 28.7027570491589  #> residual sum-of-squares: 0.0001635 #> reason terminated: Relative error in the sum of squares is at most `ftol'. #>  #> $Exponential #> Nonlinear regression via the Levenberg-Marquardt algorithm #> parameter estimates: 0.0347995442981667  #> residual sum-of-squares: 0.0001674 #> reason terminated: Relative error in the sum of squares is at most `ftol'. #>  #> $`Half-Normal` #> Nonlinear regression via the Levenberg-Marquardt algorithm #> parameter estimates: 0.0351040019336635, -2.52184152197332  #> residual sum-of-squares: 0.004265 #> reason terminated: Relative error in the sum of squares is at most `ftol'. #>  #> $`2P Exponential` #> Nonlinear regression via the Levenberg-Marquardt algorithm #> parameter estimates: 1, 14.7879025598451  #> residual sum-of-squares: 16.31 #> reason terminated: Relative error in the sum of squares is at most `ftol'. #>  #> $`Log-normal` #> Nonlinear regression via the Levenberg-Marquardt algorithm #> parameter estimates: 1.06355468285382, 0.341608314254582  #> residual sum-of-squares: 0.006118 #> reason terminated: Relative error in the sum of squares is at most `ftol'."},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/GenomAutomorphism.html","id":"automorphisms-on-mathbbz_125","dir":"Articles","previous_headings":"","what":"Automorphisms on \\(\\mathbb{Z}_{125}\\)","title":"Get started-with GenomAutomorphism","text":"Alternatively, can use algebraic representation \\(\\mathbb{Z}_{125}\\). summary range whole genome can described automorphisms \\(\\mathbb{Z}_{125}\\).","code":"covid_autm_2 <- automorphism(                       seq = covid_aln,                        group = \"Z125\",                        cube = c(\"ACGT\", \"TGCA\"),                       cube_alt = c(\"CATG\", \"GTAC\"),                       verbose = FALSE) covid_autm_2 #> Automorphism object with 9722 ranges and 6 metadata columns: #>          seqnames    ranges strand |        seq1        seq2    coord1    coord2      autm        cube #>             <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> <numeric> <character> #>      [1]        1         1      + |         ATG         ATG       108       108         1        ACGT #>      [2]        1         2      + |         GAG         GAG        43        43         1        ACGT #>      [3]        1         3      + |         AGC         AGC        82        82         1        ACGT #>      [4]        1         4      + |         CTT         CTT       114       114         1        ACGT #>      [5]        1         5      + |         GTT         GTT       119       119         1        ACGT #>      ...      ...       ...    ... .         ...         ...       ...       ...       ...         ... #>   [9718]        1      9718      + |         TCA         TCA        71        71         1        ACGT #>   [9719]        1      9719      + |         ACT         ACT        59        59         1        ACGT #>   [9720]        1      9720      + |         CAG         CAG        38        38         1        ACGT #>   [9721]        1      9721      + |         GCA         GCA        66        66         1        ACGT #>   [9722]        1      9722      + |         TAA         TAA        46        46         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths aut_range_2 <- automorphismByRanges(covid_autm_2) aut_range_2 #> GRanges object with 21 ranges and 1 metadata column: #>        seqnames    ranges strand |        cube #>           <Rle> <IRanges>  <Rle> | <character> #>    [1]        1     1-943      + |        ACGT #>    [2]        1       944      + |        Trnl #>    [3]        1   945-970      + |        ACGT #>    [4]        1       971      + |        Trnl #>    [5]        1  972-7076      + |        ACGT #>    ...      ...       ...    ... .         ... #>   [17]        1 9258-9276      + |        ACGT #>   [18]        1 9277-9279      + |        Trnl #>   [19]        1 9280-9294      + |        ACGT #>   [20]        1 9295-9296      + |        Trnl #>   [21]        1 9297-9722      + |        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths counts <- table(covid_autm_2$cube[ covid_autm_2$autm != 1 ])  par(family = \"serif\", cex = 1, font = 2) barplot(counts, main=\"Automorphism distribution\",         xlab=\"Genetic-code cube representation\",         ylab=\"Fixed mutational events\",         col=c(\"darkblue\",\"red\"),          ylim = c(0, 1100),         border = NA, axes = T) mtext(side = 1,line = -2, at = c(0.7, 1.9, 3.1),       text = paste0( counts ), cex = 1.4,       col = c(\"white\",\"red\"))"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/GenomAutomorphism.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Get started-with GenomAutomorphism","text":"1. Sanchez R, Morgado E, Grau R. Gene algebra genetic code algebraic structure. J Math Biol. 2005 Oct;51(4):431-57. doi: 10.1007/s00285-005-0332-8. Epub 2005 Jul 13. PMID: 16012800. ( PDF). 2. Robersy Sanchez, Jesús Barreto (2021) Genomic Abelian Finite Groups. doi: 10.1101/2021.06.01.446543. 3. M. V José, E.R. Morgado, R. Sánchez, T. Govezensky, 24 possible algebraic representations standard genetic code six three dimensions, Adv. Stud. Biol. 4 (2012) 119–152.PDF. 4. R. Sanchez. Symmetric Group Genetic–Code Cubes. Effect Genetic–Code Architecture Evolutionary Process MATCH Commun. Math. Comput. Chem. 79 (2018) 527-560. PDF.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_and_decision_tree.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"A Short Introduction to Algebraic Taxonomy on Genes Regions","text":"R package compute autimorphisms pairwise aligned DNA sequences represented elements Genomic Abelian group described reference (1). general scenario, whole chromosomes genomic regions population (species close related species) can algebraically represented direct sum cyclic groups specifically Abelian p-groups. Basically, propose representation multiple sequence alignments (MSA) length N finite Abelian group created direct sum Abelian group prime-power order: \\[ \\qquad G = (\\mathbb{Z}_{p^{\\alpha_{1}}_1})^{n_1} \\oplus (\\mathbb{Z}_{p^{\\alpha_{2}}_1})^{n_2} \\oplus \\dots \\oplus (\\mathbb{Z}_{p^{\\alpha_{k}}_k})^{n_k}  \\] , \\(p_i\\)’s prime numbers, \\(\\alpha_i \\\\mathbb{N}\\) \\(\\mathbb{Z}_{p^{\\alpha_{}}_i}\\) group integer modulo \\(p^{\\alpha_{}}_i\\). purpose estimating automorphism two aligned DNA sequences, \\(p^{\\alpha_{}}_i \\\\{5, 2^6, 5^3 \\}\\).","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_and_decision_tree.html","id":"automorphisms","dir":"Articles","previous_headings":"Overview","what":"Automorphisms","title":"A Short Introduction to Algebraic Taxonomy on Genes Regions","text":"Herein, automorphisms considered algebraic descriptions mutational event observed codon sequences represented different Abelian groups. particular, described references (3-4), representation codon set defined Abelian group 24 possible isomorphic Abelian groups. Abelian groups can labeled based DNA base-order used generate . set 24 Abelian groups can described group isomorphic symmetric group degree four (\\(S_4\\), see reference (4)). support symmetric group 24 Abelian group genetic-code cubes, users can also see Symmetric Group Genetic-Code Cubes., specifically Mathematica notebook IntroductionToZ5GeneticCodeVectorSpace.nb interact using Wolfram Player, freely available (Windows Linux OS) , https://www.wolfram.com/player/.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_and_decision_tree.html","id":"automorphisms-on-mathbbz_64","dir":"Articles","previous_headings":"","what":"Automorphisms on \\(\\mathbb{Z}_{64}\\)","title":"A Short Introduction to Algebraic Taxonomy on Genes Regions","text":"First, proceed load R package required analysis CHAID can download : <install.packages(“CHAID”, repos=“http://R-Forge.R-project.org”)> Next, proceed check DNA multiple sequence alignment (MSA) file. FASTA file carrying MSA primate BRCA1 DNA repair gene. Notice familiar FASTA file, better directly read function automorphism. However, current example, step can bypassed, since MSA provided provided together GenomAutomorphism R package Load MSA available package sequence names Next, function automorphism applied represent codon sequence Abelian group \\(\\mathbb{Z}_{64}\\) (.e., set integers remainder modulo 64). codon coordinates requested cube ACGT. Following reference (4)), cubes labeled based order DNA bases used define sum operation. Z64, automorphisms described functions \\(f(x) = k\\,x \\quad mod\\,64\\), \\(k\\) \\(x\\) elements set integers modulo 64. , function automorphism three important arguments given values: group = “Z64”, cube = c(“ACGT”, “TGCA”), cube_alt = c(“CATG”, “GTAC”). Setting group specifies group automorphisms computed. groups can : “Z5”, “Z64”, “Z125”, “Z5^3”. groups “Z64” “Z125” mutational events can described automorphisms given cube. , character string denoting pairs “dual” genetic-code cubes, given references (1-4)), given argument cube. , base pairs given cubes must complementary . cube pair call dual cubes , shown reference (4)), pair integrates group. automorphisms found first set dual cubes, algorithm search automorphism alternative set dual cubes. Object brca1_autm included package can load typing:","code":"library(GenomAutomorphism) library(Biostrings) library(party) library(partykit) library(data.table) library(ggplot2) library(ggparty) library(dplyr) library(CHAID) ## Do not run it. This is included with package URL <- paste0(\"https://github.com/genomaths/seqalignments/raw/master/BRCA1/\",               \"brca1_primates_dna_repair_20_sequences.fasta\")  brca1_aln <- readDNAMultipleAlignment(filepath = URL) data(\"brca1_aln\", package = \"GenomAutomorphism\") brca1_aln #> DNAMultipleAlignment with 20 rows and 2283 columns #>       aln                                                                                           names                #>  [1] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA NM_007298.3:20-22... #>  [2] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA U64805.1:1-2280_H... #>  [3] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA XM_031011560.1:23... #>  [4] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA XM_031011561.1:23... #>  [5] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA XM_031011562.1:16... #>  [6] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCTCAGATCCCCCACAGCCACTACTGA XM_009432101.3:27... #>  [7] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCTCAGATCCCCCACAGCCACTACTGA XM_009432104.3:37... #>  [8] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCTCAGATCCCCCACAGCCACTACTGA XM_016930487.2:37... #>  [9] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCTCAGATCCCCCACAGCCACTACTGA XM_009432099.3:37... #>  ... ... #> [12] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCTCAGATCCCCCACAGCCACTACTGA XM_034941185.1:24... #> [13] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCTCAGATCCCCCACAGCCACTACTGA XM_034941182.1:25... #> [14] ATGGATTTATCTGCTGTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGATACCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA XM_032163757.1:14... #> [15] ATGGATTTATCTGCTGTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGATACCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA XM_032163756.1:14... #> [16] ATGGATTTATCTGCTGTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGATACCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA XM_032163758.1:13... #> [17] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACGCCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA XM_030923119.1:18... #> [18] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACGCCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA XM_030923118.1:18... #> [19] ATGGATTTACCTGCTGTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA XM_025363316.1:14... #> [20] ATGGATTTATCTGCTGTTCGTGTTGAAGAAGTGCAAAATGTCCTT...CTGGACACCTACCTGATACCCCAGATCCCTCACAGCCACTACTGA XM_039475995.1:49... strtrim(names(brca1_aln@unmasked), 100) #>  [1] \"NM_007298.3:20-2299_Homo_sapiens_BRCA1_DNA_repair_associated_(BRCA1)_transcript_variant_4_mRNA\"       #>  [2] \"U64805.1:1-2280_Homo_sapiens_Brca1-delta11b_(Brca1)_mRNA_complete_cds\"                                #>  [3] \"XM_031011560.1:233-2515_PREDICTED:_Gorilla_gorilla_gorilla_BRCA1_DNA_repair_associated_(BRCA1)_trans\" #>  [4] \"XM_031011561.1:233-2512_PREDICTED:_Gorilla_gorilla_gorilla_BRCA1_DNA_repair_associated_(BRCA1)_trans\" #>  [5] \"XM_031011562.1:163-2442_PREDICTED:_Gorilla_gorilla_gorilla_BRCA1_DNA_repair_associated_(BRCA1)_trans\" #>  [6] \"XM_009432101.3:276-2555_PREDICTED:_Pan_troglodytes_BRCA1_DNA_repair_associated_(BRCA1)_transcript_va\" #>  [7] \"XM_009432104.3:371-2650_PREDICTED:_Pan_troglodytes_BRCA1_DNA_repair_associated_(BRCA1)_transcript_va\" #>  [8] \"XM_016930487.2:371-2650_PREDICTED:_Pan_troglodytes_BRCA1_DNA_repair_associated_(BRCA1)_transcript_va\" #>  [9] \"XM_009432099.3:371-2653_PREDICTED:_Pan_troglodytes_BRCA1_DNA_repair_associated_(BRCA1)_transcript_va\" #> [10] \"XM_034941183.1:254-2533_PREDICTED:_Pan_paniscus_BRCA1_DNA_repair_associated_(BRCA1)_transcript_varia\" #> [11] \"XM_034941184.1:254-2533_PREDICTED:_Pan_paniscus_BRCA1_DNA_repair_associated_(BRCA1)_transcript_varia\" #> [12] \"XM_034941185.1:248-2527_PREDICTED:_Pan_paniscus_BRCA1_DNA_repair_associated_(BRCA1)_transcript_varia\" #> [13] \"XM_034941182.1:254-2536_PREDICTED:_Pan_paniscus_BRCA1_DNA_repair_associated_(BRCA1)_transcript_varia\" #> [14] \"XM_032163757.1:145-2418_PREDICTED:_Hylobates_moloch_BRCA1_DNA_repair_associated_(BRCA1)_transcript_v\" #> [15] \"XM_032163756.1:145-2421_PREDICTED:_Hylobates_moloch_BRCA1_DNA_repair_associated_(BRCA1)_transcript_v\" #> [16] \"XM_032163758.1:139-2412_PREDICTED:_Hylobates_moloch_BRCA1_DNA_repair_associated_(BRCA1)_transcript_v\" #> [17] \"XM_030923119.1:184-2463_PREDICTED:_Rhinopithecus_roxellana_BRCA1_DNA_repair_associated_(BRCA1)_trans\" #> [18] \"XM_030923118.1:183-2465_PREDICTED:_Rhinopithecus_roxellana_BRCA1_DNA_repair_associated_(BRCA1)_trans\" #> [19] \"XM_025363316.1:147-2426_PREDICTED:_Theropithecus_gelada_BRCA1_DNA_repair_associated_(BRCA1)_transcri\" #> [20] \"XM_039475995.1:49-2328_PREDICTED:_Saimiri_boliviensis_boliviensis_BRCA1_DNA_repair_associated_(BRCA1\" ## Do not run it. This is included with package  nams <- c(\"human_1\",\"human_2\",\"gorilla_1\",\"gorilla_2\",\"gorilla_3\",         \"chimpanzee_1\",\"chimpanzee_2\",\"chimpanzee_3\",\"chimpanzee_4\",         \"bonobos_1\",\"bonobos_2\",\"bonobos_3\",\"bonobos_4\",\"silvery_gibbon_1\",         \"silvery_gibbon_1\",\"silvery_gibbon_3\",\"golden_monkey_1\",         \"golden_monkey_2\",\"gelada_baboon\",\"bolivian_monkey\")  brca1_autm <- automorphism(                       seqs = brca1_aln,                        group = \"Z64\",                        cube = c(\"ACGT\", \"TGCA\"),                       cube_alt = c(\"CATG\", \"GTAC\"),                       nms = nams,                        verbose = FALSE) data(brca1_autm, package = \"GenomAutomorphism\") brca1_autm #> AutomorphismList object of length: 190 #> names(190): human_1.human_2 human_1.gorilla_1 human_1.gorilla_2 ... golden_monkey_2.gelada_baboon golden_monkey_2.bolivian_monkey gelada_baboon.bolivian_monkey  #> -------  #> Automorphism object with 761 ranges and 6 metadata columns: #>         seqnames    ranges strand |        seq1        seq2    coord1    coord2      autm        cube #>            <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> <numeric> <character> #>     [1]        1         1      + |         ATG         ATG        50        50         1        ACGT #>     [2]        1         2      + |         GAT         GAT        11        11         1        ACGT #>     [3]        1         3      + |         TTA         TTA        60        60         1        ACGT #>     [4]        1         4      + |         TCT         TCT        31        31         1        ACGT #>     [5]        1         5      + |         GCT         GCT        27        27         1        ACGT #>     ...      ...       ...    ... .         ...         ...       ...       ...       ...         ... #>   [757]        1       757      + |         CAC         CAC         5         5         1        ACGT #>   [758]        1       758      + |         AGC         AGC        33        33         1        ACGT #>   [759]        1       759      + |         CAC         CAC         5         5         1        ACGT #>   [760]        1       760      + |         TAC         TAC        13        13         1        ACGT #>   [761]        1       761      + |         TGA         TGA        44        44         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #> ... #> <189 more DFrame element(s)> #> Two slots: 'DataList' & 'SeqRanges' #> -------"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_and_decision_tree.html","id":"grouping-automorphism-by-automorphisms-coefficients","dir":"Articles","previous_headings":"Automorphisms on \\(\\mathbb{Z}_{64}\\)","what":"Grouping automorphism by automorphism’s coefficients","title":"A Short Introduction to Algebraic Taxonomy on Genes Regions","text":"Automorphisms automorphism’s coefficients can grouped. task can accomplished function automorphismByCoef. However, sake time, output included package Object brca1_autm included package can load typing: next interested mutational events respect human (reference).","code":"## Not need to run it here autby_coef <- automorphismByCoef(x = brca1_autm,                                  verbose = FALSE) data(autby_coef, package = \"GenomAutomorphism\") autby_coef #> AutomorphismByCoefList object of length 190: #> $human_1.human_2 #> AutomorphismByCoef object with 239 ranges and 5 metadata columns: #>         seqnames    ranges strand |        seq1        seq2      autm    mut_type        cube #>            <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <character> <character> #>     [1]        1     1-238      + |         ATG         ATG         1         HHH        ACGT #>     [2]        1     1-238      + |         GAT         GAT         1         HHH        ACGT #>     [3]        1     1-238      + |         TTA         TTA         1         HHH        ACGT #>     [4]        1     1-238      + |         TCT         TCT         1         HHH        ACGT #>     [5]        1     1-238      + |         GCT         GCT         1         HHH        ACGT #>     ...      ...       ...    ... .         ...         ...       ...         ...         ... #>   [235]        1   511-761      + |         CCC         CCC         1         HHH        ACGT #>   [236]        1   511-761      + |         CTT         CTT         1         HHH        ACGT #>   [237]        1   511-761      + |         CCT         CCT         1         HHH        ACGT #>   [238]        1   511-761      + |         ATA         ATA         1         HHH        ACGT #>   [239]        1   511-761      + |         TGA         TGA         1         HHH        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #>  #> ... #> <189 more elements> nams <- names(brca1_autm) idx1 <- grep(\"human_1.\", nams) idx2 <- grep(\"human_2.\", nams) idx <- union(idx1, idx2) h_brca1_autm <- unlist(brca1_autm[ idx ]) h_brca1_autm = h_brca1_autm[ which(h_brca1_autm$autm != 1) ] h_brca1_autm #> Automorphism object with 1397 ranges and 6 metadata columns: #>                           seqnames    ranges strand |        seq1        seq2    coord1    coord2      autm        cube #>                              <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> <numeric> <character> #>           human_1.human_2        1       239      + |         CAT         CGT         7        39        33        ACGT #>           human_1.human_2        1       253      + |         GCA         GTA        24        56        21        ACGT #>           human_1.human_2        1       323      + |         TCT         CCT        31        23         9        ACGT #>           human_1.human_2        1       333      + |         TCT         TCC        31        29         3        ACGT #>           human_1.human_2        1       350      + |         ---         ---        NA        NA        -1        Gaps #>                       ...      ...       ...    ... .         ...         ...       ...       ...       ...         ... #>   human_2.bolivian_monkey        1       716      + |         AAT         AGT         3        35        33        ACGT #>   human_2.bolivian_monkey        1       726      + |         GAG         GAA        10         8        52        ACGT #>   human_2.bolivian_monkey        1       730      + |         GTG         GTA        58        56        12        ACGT #>   human_2.bolivian_monkey        1       731      + |         ACC         ACT        17        19        35        ACGT #>   human_2.bolivian_monkey        1       756      + |         CCC         CCT        21        23        59        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_and_decision_tree.html","id":"bar-plot-automorphism-distribution-by-coefficient","dir":"Articles","previous_headings":"Automorphisms on \\(\\mathbb{Z}_{64}\\)","what":"Bar plot automorphism distribution by coefficient","title":"A Short Introduction to Algebraic Taxonomy on Genes Regions","text":"automorphism distribution cubes can summarized bar-plot graphic. Object autby_coef carried pairwise comparisons, enough use data single species reference, e.g., humans. First data must reordered  object: Every single base mutational event across MSA classified according IUPAC nomenclature: 1) According number hydrogen bonds (DNA/RNA double helix): strong S={C, G} (three hydrogen bonds) weak W={, U} (two hydrogen bonds). According chemical type: purines R={, G} pyrimidines Y={C, U}. 3). According presence amino keto groups base rings: amino M={C, } keto K={G, T}. Constant (hold) base positions labeled letter H. , codon positions labeled HKH means first third bases remains constant mutational events bases G T found MSA. Nominal variables transformed ","code":"h_autby_coef <- automorphismByCoef(x = h_brca1_autm) h_autby_coef #> AutomorphismByCoef object with 1395 ranges and 5 metadata columns: #>                            seqnames    ranges strand |        seq1        seq2      autm    mut_type        cube #>                               <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <character> <character> #>      human_1.gelada_baboon        1         4      + |         TCT         CCT         9         YHH        ACGT #>      human_2.gelada_baboon        1         4      + |         TCT         CCT         9         YHH        ACGT #>   human_1.silvery_gibbon_1        1         6      + |         CTT         GTT        29         SHH        ACGT #>   human_1.silvery_gibbon_1        1         6      + |         CTT         GTT        29         SHH        ACGT #>   human_1.silvery_gibbon_3        1         6      + |         CTT         GTT        29         SHH        ACGT #>                        ...      ...       ...    ... .         ...         ...       ...         ...         ... #>          human_2.bonobos_2        1       753      + |         CCC         CCT        59         HHY        ACGT #>          human_2.bonobos_3        1       753      + |         CCC         CCT        59         HHY        ACGT #>          human_2.bonobos_4        1       753      + |         CCC         CCT        59         HHY        ACGT #>    human_1.bolivian_monkey        1       756      + |         CCC         CCT        59         HHY        ACGT #>    human_2.bolivian_monkey        1       756      + |         CCC         CCT        59         HHY        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths nams <- names(h_autby_coef) nams <- sub(\"human[_][1-2][.]\", \"\", nams) nams <- sub(\"[_][1-6]\", \"\", nams)  dt <- data.frame(h_autby_coef, species = nams) dt <- data.frame(dt, species = nams) dt <- dt[, c(\"start\", \"autm\", \"species\", \"mut_type\", \"cube\")] DataFrame(dt) #> DataFrame with 1395 rows and 5 columns #>          start      autm         species    mut_type        cube #>      <integer> <numeric>     <character> <character> <character> #> 1            4         9   gelada_baboon         YHH        ACGT #> 2            4         9   gelada_baboon         YHH        ACGT #> 3            6        29  silvery_gibbon         SHH        ACGT #> 4            6        29  silvery_gibbon         SHH        ACGT #> 5            6        29  silvery_gibbon         SHH        ACGT #> ...        ...       ...             ...         ...         ... #> 1391       753        59         bonobos         HHY        ACGT #> 1392       753        59         bonobos         HHY        ACGT #> 1393       753        59         bonobos         HHY        ACGT #> 1394       756        59 bolivian_monkey         HHY        ACGT #> 1395       756        59 bolivian_monkey         HHY        ACGT dt$start <- as.numeric(dt$start) dt$autm <- as.numeric(dt$autm) dt$cube <- as.factor(dt$cube) dt$species <- as.factor(dt$species) dt$mut_type <- as.factor(dt$mut_type) counts <- table(dt$cube)  par(family = \"serif\", cex = 0.6, font = 2, mar=c(4,6,4,4)) barplot(counts, #main=\"Automorphism distribution\",         xlab=\"Genetic-code cube representation\",         ylab=\"Fixed mutational events\",         col=c(\"darkblue\",\"red\", \"darkgreen\", \"magenta\", \"orange\"),          border = NA, axes = F, #ylim = c(0, 6000),         cex.lab = 2, cex.main = 1.5, cex.names = 2) axis(2, at = c(0, 200, 400, 600, 800, 1000), cex.axis = 1.5) mtext(side = 1,line = -2.8, at = c(0.7, 1.9, 3.1, 4.3),       text = paste0( counts ), cex = 1.4,       col = c(\"white\", \"red\",\"yellow\", \"black\"))"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_and_decision_tree.html","id":"classification-tree-chi-squared-automated-interaction-detection-chaid","dir":"Articles","previous_headings":"Automorphisms on \\(\\mathbb{Z}_{64}\\)","what":"Classification Tree Chi-squared Automated Interaction Detection (CHAID)","title":"A Short Introduction to Algebraic Taxonomy on Genes Regions","text":"current CHAID implementation accepts nominal ordinal categorical predictors. predictors continuous, transformed ordinal predictors using following algorithm. create ordinal variable autms variable autm. CHAID can download : <install.packages(“CHAID”, repos=“http://R-Forge.R-project.org”)> Fitting classification tree CHAID algorithm Next, data must prepared plotting tree ggparty: Plotting tree ggparty (font size adjusted html output)  Since one mutational event human--human region R1 class A3 reported right side tree, high probability non-humans hold following rule: humans--human mutations hold following rule: non-humans hold following rule printing version TIFF format :","code":"interval <- function(x, a, b) {     x >= a & x <= b }  datos = dt datos$autms <- case_when(datos$autm < 16 ~ 'A1',                   interval(datos$autm, 16, 31) ~ 'A2',                   interval(datos$autm, 32, 47) ~ 'A3',                   datos$autm > 47 ~ 'A4') datos$autms <- as.factor(datos$autms)  datos$mut_type <- as.character(datos$mut_type) datos$mut_type[ which(datos$cube == \"Trnl\") ] <- \"indel\" datos$mut_type[ which(datos$cube == \"Gaps\") ] <- \"---\" datos$mut_type <- as.factor(datos$mut_type)  datos$regions <- case_when(datos$start < 230 ~ 'R0',                   interval(datos$start, 230, 270) ~ 'R1',                   interval(datos$start, 271, 305) ~ 'R2',                   interval(datos$start, 306, 338) ~ 'R3',                   interval(datos$start, 339, 533) ~ 'R4',                   interval(datos$start, 534, 570) ~ 'R5',                   interval(datos$start, 571, 653) ~ 'R6',                   interval(datos$start, 654, 709) ~ 'R7',                   datos$start > 709 ~ 'R8')  datos$regions <- as.factor(datos$regions)  datos$autm <- as.factor(datos$autm) datos$species <- as.factor(datos$species) datos$start <- as.factor(datos$start) datos$cube <- as.factor(datos$cube) datos <- datos[, c( \"autms\", \"regions\", \"mut_type\", \"cube\", \"species\")] DataFrame(datos) #> DataFrame with 1395 rows and 5 columns #>         autms  regions mut_type     cube         species #>      <factor> <factor> <factor> <factor>        <factor> #> 1          A1       R0      YHH     ACGT  gelada_baboon  #> 2          A1       R0      YHH     ACGT  gelada_baboon  #> 3          A2       R0      SHH     ACGT  silvery_gibbon #> 4          A2       R0      SHH     ACGT  silvery_gibbon #> 5          A2       R0      SHH     ACGT  silvery_gibbon #> ...       ...      ...      ...      ...             ... #> 1391       A4       R8      HHY     ACGT bonobos         #> 1392       A4       R8      HHY     ACGT bonobos         #> 1393       A4       R8      HHY     ACGT bonobos         #> 1394       A4       R8      HHY     ACGT bolivian_monkey #> 1395       A4       R8      HHY     ACGT bolivian_monkey ctrl <- chaid_control(minsplit = 200, minprob = 0.8, alpha2 = 0.01, alpha4 = 0.01) chaid_res <- chaid(species ~ autms + regions + mut_type + cube , data = datos,                    control = ctrl) ##  Updating CHAID decision tree dp <- data_party(chaid_res) dat <- dp[, c(\"autms\", \"regions\", \"mut_type\", \"cube\")] dat$species <- dp[, \"(response)\"]           chaid_tree <- party(node = node_party(chaid_res),                      data = dat,                     fitted =  dp[, c(\"(fitted)\", \"(response)\")],                      names = names(chaid_res))  ## Extract p-values pvals <- unlist(nodeapply(chaid_tree, ids = nodeids(chaid_tree), function(n) {     pvals <- info_node(n)$adjpvals     pvals < pvals[ which.min(pvals) ]     return(pvals) })) pvals <- pvals[ pvals < 0.05 ]  ## Counts of event per spciees on each node node.freq <- sapply(seq_along(chaid_tree), function(id) {     y <- data_party(chaid_tree, id = id)     y <- y[[ \"(response)\" ]]     table(y) }) ## total counts on each node.size =  colSums(node.freq) ggparty(chaid_tree) +     geom_edge(aes(color = id, size = node.size[id]/300), show.legend = FALSE) +     geom_edge_label(size = 14, colour = \"red\",                     fontface = \"bold\",                      shift = 0.64,                      nudge_x = -0.01,                     max_length = 10,                     splitlevels = 1:4) +     geom_node_label(line_list = list(aes(label = paste0(\"Node \", id, \": \", splitvar)),                 aes(label = paste0(\"N=\", node.size[id], \", p\",                                   ifelse(pvals < .001, \"<.001\",                                         paste0(\"=\", round(pvals, 3)))),                      size = 30)),                     line_gpar = list(list(size = 30),                                       list(size = 30)),                 ids = \"inner\", fontface = \"bold\", size = 28) +     geom_node_info() +     geom_node_label(aes(label = paste0(\"N = \", node.size),                          fontface = \"bold\"),                     ids = \"terminal\", nudge_y = -0.0, nudge_x = 0.01, size = 12) +     geom_node_plot(gglist = list(         geom_bar(aes(x = \"\", fill = species), size = 0.2, width = 0.9,                  position = position_fill(), color = \"black\"),         theme_minimal(base_family = \"arial\", base_size = 46),         scale_fill_manual(values = c(\"gray50\",\"gray55\",\"gray60\",                                      \"gray70\",\"gray80\",\"gray85\",                                      \"blue\",\"gray95\")),         xlab(\"\"),          ylab(\"Probability\"),          geom_text(aes(x = \"\", group = species,                        label = stat(count)),                   stat = \"count\", position = position_fill(),                    vjust = 1., size = 14)),         shared_axis_labels = TRUE, size = 1.2) rule <- (dat$autms == \"A4\" | (dat$autms == \"A3\" & dat$mut_type != \"HRH\")) unique(as.character(dat[rule,]$species)) #> [1] \"bolivian_monkey\" \"golden_monkey\"   \"gelada_baboon\"   \"silvery_gibbon\"  \"chimpanzee\"      \"bonobos\"         #> [7] \"gorilla\" idx <- dat$autm == \"A1\" & dat$regions == \"R3\" & (dat$mut_type == \"HHY\" | dat$mut_type == \"YHH\") dat[ idx, ] #>     autms regions mut_type cube species #> 632    A1      R3      YHH ACGT   human #> 687    A1      R3      HHY ACGT   human rule <- (dat$autms == \"A4\" | (dat$autms == \"A3\" & dat$regions != \"R1\")) unique(as.character(dat[rule,]$species)) #> [1] \"bolivian_monkey\" \"golden_monkey\"   \"gelada_baboon\"   \"silvery_gibbon\"  \"gorilla\"         \"chimpanzee\"      #> [7] \"bonobos\" # tiff(filename = \"~/home/chaid_tree.tiff\", #      width = 3000, height = 1800, units = \"px\", pointsize = 1, #      compression = \"lzw\", bg = \"white\", res = 600) #  # ggparty(chaid_tree) + #     geom_edge(aes(color = id), show.legend = FALSE) + #     geom_edge_label(size = 1, colour = \"red\", fontface = \"bold\") + #     geom_node_label(line_list = list(aes(label = paste0(\"Node \", id,\": \", splitvar)), #                             aes(label = paste0(\"N=\", node.size[id], \", p\", #                                 ifelse(pvals < .001, \"<.001\", #                                      paste0(\"=\", round(pvals, 3)))))), #                     line_gpar = list(list(size = 4),  #                                      list(size = 4)), #                     ids = \"inner\", label.size = 0.1) + #     geom_node_info(size = 2) + #     geom_node_label(aes(label = paste0(\"N = \", nodesize)), #                     ids = \"terminal\", nudge_y = -0.0,  #                     nudge_x = 0.01, label.size = 0.1, #                     line_gpar = list(list(size = 3.5),  #                                      list(size = 3.5))) + #     geom_node_plot(gglist = list( #         geom_bar(aes(x = \"\", fill = species), size = 0.2, width = 10, #                  position = position_fill(), color = \"black\"), #         theme_minimal(base_family = \"arial\", base_size = 5), #         scale_fill_manual(values = c(\"gray50\",\"gray55\",\"gray60\", #                                      \"gray70\",\"gray80\",\"gray85\", #                                      \"blue\",\"gray95\")), #         xlab(\"\"),  #         ylab(\"Probability\"),  #         geom_text(aes(x = \"\", group = species,  #                       label = stat(count)), #                   stat = \"count\", position = position_fill(),  #                   vjust = 1., size = 1)), #         shared_axis_labels = TRUE, size = 1.) #  #  # dev.off()"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_and_decision_tree.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"A Short Introduction to Algebraic Taxonomy on Genes Regions","text":"1. Sanchez R, Morgado E, Grau R. Gene algebra genetic code algebraic structure. J Math Biol. 2005 Oct;51(4):431-57. doi: 10.1007/s00285-005-0332-8. Epub 2005 Jul 13. PMID: 16012800. ( PDF). 2. Robersy Sanchez, Jesús Barreto (2021) Genomic Abelian Finite Groups. doi: 10.1101/2021.06.01.446543. 3. M. V José, E.R. Morgado, R. Sánchez, T. Govezensky, 24 possible algebraic representations standard genetic code six three dimensions, Adv. Stud. Biol. 4 (2012) 119–152.PDF. 4. R. Sanchez. Symmetric Group Genetic–Code Cubes. Effect Genetic–Code Architecture Evolutionary Process MATCH Commun. Math. Comput. Chem. 79 (2018) 527-560. PDF.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Analysis of Automorphisms on a DNA Multiple Sequence Alignment","text":"R package compute autimorphisms pairwise aligned DNA sequences represented elements Genomic Abelian group described reference (1). general scenario, whole chromosomes genomic regions population (species close related species) can algebraically represented direct sum cyclic groups specifically Abelian p-groups. Basically, propose representation multiple sequence alignments (MSA) length N finite Abelian group created direct sum homocyclic Abelian groups prime-power order: \\[ \\qquad G = (\\mathbb{Z}_{p^{\\alpha_{1}}_1})^{n_1} \\oplus (\\mathbb{Z}_{p^{\\alpha_{2}}_1})^{n_2} \\oplus \\dots \\oplus (\\mathbb{Z}_{p^{\\alpha_{k}}_k})^{n_k}  \\] , \\(p_i\\)’s prime numbers, \\(\\alpha_i \\\\mathbb{N}\\) \\(\\mathbb{Z}_{p^{\\alpha_{}}_i}\\) group integer modulo \\(p^{\\alpha_{}}_i\\). purpose estimating automorphism two aligned DNA sequences, \\(p^{\\alpha_{}}_i \\\\{5, 2^6, 5^3 \\}\\).","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa.html","id":"automorphisms","dir":"Articles","previous_headings":"Overview","what":"Automorphisms","title":"Analysis of Automorphisms on a DNA Multiple Sequence Alignment","text":"Herein, automorphisms considered algebraic descriptions mutational event observed codon sequences represented different Abelian groups. particular, described references (3-4), representation codon set defined Abelian group 24 possible isomorphic Abelian groups. Abelian groups can labeled based DNA base-order used generate . set 24 Abelian groups can described group isomorphic symmetric group degree four (\\(S_4\\), see reference (4)). support symmetric group 24 Abelian group genetic-code cubes, users can also see Symmetric Group Genetic-Code Cubes., specifically Mathematica notebook IntroductionToZ5GeneticCodeVectorSpace.nb interact using Wolfram Player, freely available (Windows Linux OS) , https://www.wolfram.com/player/.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa.html","id":"automorphisms-on-mathbbz_64","dir":"Articles","previous_headings":"","what":"Automorphisms on \\(\\mathbb{Z}_{64}\\)","title":"Analysis of Automorphisms on a DNA Multiple Sequence Alignment","text":"First, proceed load R package required analysis Next, proceed check DNA multiple sequence alignment (MSA) file. ia FASTA file carrying MSA mammals (somatic) Cystocrome c. Notice familiar FASTA file, better directly read function automorphism. However, current example, step can bypassed, since MSA provided provided together GenomAutomorphism R package Load MSA available package sequence names corresponding aminoacid sequence : Next, function automorphism applied represent codon sequence Abelian group \\(\\mathbb{Z}_{64}\\) (.e., set integers remainder modulo 64). codon coordinates requested cube ACGT. Following reference (4)), cubes labeled based order DNA bases used define sum operation. Z64, automorphisms described functions \\(f(x) = k\\,x \\quad mod\\,64\\), \\(k\\) \\(x\\) elements set integers modulo 64. , function automorphism three important arguments given values: group = “Z64”, cube = c(“ACGT”, “TGCA”), cube_alt = c(“CATG”, “GTAC”). Setting group specifies group automorphisms computed. groups can : “Z5”, “Z64”, “Z125”, “Z5^3”. groups “Z64” “Z125” mutational events can described automorphisms given cube. , character string denoting pairs “dual” genetic-code cubes, given references (1-4)), given argument cube. , base pairs given cubes must complementary . cube pair call dual cubes , shown reference (4)), pair integrates group. automorphisms found first set dual cubes, algorithm search automorphism alternative set dual cubes. Object autm included package can load typing: AutomorphismList class object returned. codon sequences (seq1 seq2) corresponding coordinates (left) returned, well coordinated representation \\(\\mathbb{Z}_{64}\\) (coord1 coord2). Observe two new columns added, automorphism coefficient \\(k\\) (named autm) genetic-code cube automorphism found. convention DNA sequence given positive strand. Since dual cube “ACGT” corresponds complementary base order TGCA, automorphisms described cube TGCA represent mutational events affecting DNA negative strand (-).","code":"library(GenomAutomorphism) library(Biostrings) library(ggseqlogo) ## Do not run it. This is included with package URL <- paste0(\"https://github.com/genomaths/seqalignments/raw/master/CYCS/\",               \"primate_cytochrome_c_(CYCS)_18_sequences.fasta\")  cyc_aln <- readDNAMultipleAlignment(filepath = URL) data(\"cyc_aln\") cyc_aln #> DNAMultipleAlignment with 19 rows and 318 columns #>       aln                                                                                           names                #>  [1] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTAATAGCTTATCTCAAAAAAGCTACTAATGAGTAA NM_018947.6 Homo ... #>  [2] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTAATAGCTTATCTCAAAAAAGCTACTAATGAGTAA gb|BC021994.1|  [... #>  [3] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTAATAGCTTATCTCAAAAAAGCTACTAATGAGTAA ref|XM_019031021.... #>  [4] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTAATAGCTTATCTCAAAAAAGCTACTAATGAGTAA dbj|AK311836.1|  ... #>  [5] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTAATAGCTTATCTCAAAAAAGCTACTAATGAGTAA gb|BC067222.1|  [... #>  [6] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTAATAGCTTATCTCAAAAAAGCTACTAATGAGTAA gb|BC068464.1|  [... #>  [7] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTAATAGCTTATCTCAAAAAAGCTACTAATGAGTAA gb|BC015130.1|  [... #>  [8] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTGATAGCTTATCTCAAAAAAGCTACTAATGAGTAA ref|XM_032759077.... #>  [9] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTGATAGCTTATCTCAAAAAAGCTACTAATGAGTAA ref|XM_003270423.... #> [10] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTGATAGCTTATCTCAAAAAAGCTACTAATGAGTAA ref|XM_033192823.... #> [11] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTGATAGCTTATCTCAAAAAAGCTACTAATGAGTAA ref|XM_003896182.... #> [12] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTGATAGCTTATCTCAAAAAAGCTACTAATGAGTAA ref|XM_003895240.... #> [13] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTGATAGCTTATCTCAAAAAAGCTACTAATGAGTAA ref|XM_010375926.... #> [14] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTGATAGCTTATCTCAAAAAAGCTACTAATGAGTAA ref|XM_028845949.... #> [15] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTGATAGCTTATCTCAAAAAAGCTACTAATGAGTAA ref|XM_028845948.... #> [16] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTGATAGCTTATCTCAAAAAAGCTACTAATGAGTAA ref|XM_025380676.... #> [17] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTGATAGCTTATCTCAAAAAAGCTACTAATGAGTAA ref|XM_025380675.... #> [18] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTAATAGCTTATCTCAAAAAAGCTACTAATGAGTAA ref|NM_001131167.... #> [19] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTAATAGCTTATCTCAAAAAAGCTACTAATGAGTAA emb|CR857183.1|  ... strtrim(rownames(cyc_aln), 100) #>  [1] \"NM_018947.6 Homo sapiens cytochrome c, somatic (CYCS), mRNA\"                                          #>  [2] \"gb|BC021994.1|  [organism=Homo sapiens] [note=Vector: pDNR-LIB] [gcode=1] [clone=MGC:24510 IMAGE:409\" #>  [3] \"ref|XM_019031021.2|  [location=chromosome] [chromosome=7] [organism=Gorilla gorilla gorilla] [isolat\" #>  [4] \"dbj|AK311836.1|  [organism=Homo sapiens] [gcode=1] [clone=BRACE3022676] [tissue_type=cerebellum] [cl\" #>  [5] \"gb|BC067222.1|  [organism=Homo sapiens] [note=Vector: pDNR-LIB] [gcode=1] [clone=MGC:72005 IMAGE:368\" #>  [6] \"gb|BC068464.1|  [organism=Homo sapiens] [note=Vector: pBluescriptR] [gcode=1] [clone=MGC:87065 IMAGE\" #>  [7] \"gb|BC015130.1|  [organism=Homo sapiens] [note=Vector: pDNR-LIB] [gcode=1] [clone=MGC:24248 IMAGE:393\" #>  [8] \"ref|XM_032759077.1|  [chromosome=Unknown] [organism=Hylobates moloch] [isolate=HMO894] [note=Lionel]\" #>  [9] \"ref|XM_003270423.4|  [location=chromosome] [chromosome=17] [organism=Nomascus leucogenys] [isolate=A\" #> [10] \"ref|XM_033192823.1|  [chromosome=Unknown] [organism=Trachypithecus francoisi] [isolate=TF-2019V2] [g\" #> [11] \"ref|XM_003896182.3|  [location=chromosome] [chromosome=4] [organism=Papio anubis] [isolate=15944] [g\" #> [12] \"ref|XM_003895240.5|  [location=chromosome] [chromosome=2] [organism=Papio anubis] [isolate=15944] [g\" #> [13] \"ref|XM_010375926.2|  [location=chromosome] [chromosome=6] [organism=Rhinopithecus roxellana] [isolat\" #> [14] \"ref|XM_028845949.1|  [location=chromosome] [chromosome=3] [organism=Macaca mulatta] [isolate=AG07107\" #> [15] \"ref|XM_028845948.1|  [location=chromosome] [chromosome=3] [organism=Macaca mulatta] [isolate=AG07107\" #> [16] \"ref|XM_025380676.1|  [location=chromosome] [chromosome=3] [organism=Theropithecus gelada] [isolate=D\" #> [17] \"ref|XM_025380675.1|  [location=chromosome] [chromosome=3] [organism=Theropithecus gelada] [isolate=D\" #> [18] \"ref|NM_001131167.2|  [chromosome=7] [organism=Pongo abelii] [gcode=1] [chromosome=7] [map=7] Pongo a\" #> [19] \"emb|CR857183.1|  [organism=Pongo abelii] [gcode=1] [clone=DKFZp468F1016] [tissue_type=heart] [clone_\" translate(cyc_aln@unmasked) #> AAStringSet object of length 19: #>      width seq                                                                                      names                #>  [1]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* NM_018947.6 Homo ... #>  [2]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* gb|BC021994.1|  [... #>  [3]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* ref|XM_019031021.... #>  [4]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* dbj|AK311836.1|  ... #>  [5]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* gb|BC067222.1|  [... #>  ...   ... ... #> [15]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* ref|XM_028845948.... #> [16]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* ref|XM_025380676.... #> [17]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* ref|XM_025380675.... #> [18]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* ref|NM_001131167.... #> [19]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* emb|CR857183.1|  ... ## Do not run it. This is included with package  nams <- c(\"human_1\", \"human_2\", \"gorilla\", \"human_3\", \"human_4\",           \"human_5\", \"human_6\", \"silvery_gibbon\", \"white_cheeked_gibbon\",           \"françois_langur\", \"olive_baboon_1\", \"olive_baboon_2\",           \"golden_monkey\", \"rhesus_monkeys_1\", \"rhesus_monkeys_2\",           \"gelada_baboon_1\", \"gelada_baboon_2\", \"orangutan_1\", \"orangutan_2\")  cyc_autm <- automorphism(filepath = URL,                        group = \"Z64\",                        cube = c(\"ACGT\", \"TGCA\"),                       cube_alt = c(\"CATG\", \"GTAC\"),                       nms = nams,                       verbose = FALSE) data(cyc_autm, package = \"GenomAutomorphism\") cyc_autm #> AutomorphismList object of length: 171 #> names(171): human_1.human_2 human_1.gorilla human_1.human_3 ... gelada_baboon_2.orangutan_1 gelada_baboon_2.orangutan_2 orangutan_1.orangutan_2  #> -------  #> Automorphism object with 106 ranges and 6 metadata columns: #>         seqnames    ranges strand |        seq1        seq2    coord1    coord2      autm        cube #>            <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> <numeric> <character> #>     [1]        1         1      + |         ATG         ATG        50        50         1        ACGT #>     [2]        1         2      + |         GGT         GGT        43        43         1        ACGT #>     [3]        1         3      + |         GAT         GAT        11        11         1        ACGT #>     [4]        1         4      + |         GTT         GTT        59        59         1        ACGT #>     [5]        1         5      + |         GAG         GAG        10        10         1        ACGT #>     ...      ...       ...    ... .         ...         ...       ...       ...       ...         ... #>   [102]        1       102      + |         GCT         GCT        27        27         1        ACGT #>   [103]        1       103      + |         ACT         ACT        19        19         1        ACGT #>   [104]        1       104      + |         AAT         AAT         3         3         1        ACGT #>   [105]        1       105      + |         GAG         GAG        10        10         1        ACGT #>   [106]        1       106      + |         TAA         TAA        12        12         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #> ... #> <170 more DFrame element(s)> #> Two slots: 'DataList' & 'SeqRanges' #> -------"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa.html","id":"bar-plot-automorphism-distribution-by-cubes","dir":"Articles","previous_headings":"Automorphisms on \\(\\mathbb{Z}_{64}\\)","what":"Bar plot automorphism distribution by cubes","title":"Analysis of Automorphisms on a DNA Multiple Sequence Alignment","text":"automorphism distribution cubes can summarized bar-plot graphic","code":"counts <- table(unlist(lapply(cyc_autm@DataList,              function(x) {               x = data.frame(x)               x =  x[ x$autm != 1 | is.na(x$autm), ]               return(x$cube)}             )         ))  par(family = \"serif\", cex = 0.8, font = 2, mar = c(4,6,4,4)) barplot(counts, #main=\"Automorphism distribution\",         xlab=\"Genetic-code cube representation\",         ylab=\"Fixed mutational events\", col=c(\"darkblue\",\"red\", \"darkgreen\", \"magenta\", \"orange\"),          border = NA, axes = FALSE, ylim = c(0,300),         cex.lab = 2, cex.main = 1.5, cex.names = 2) axis(2, at = c(0, 100, 200, 300), cex.axis = 1.5) mtext(side = 1,line = -1.5, at = c(0.7, 1.9),       text = paste0( counts ), cex = 1.4,       col = c(\"white\",\"yellow\"))"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa.html","id":"bar-plot-automorphism-distribution-by-regions","dir":"Articles","previous_headings":"Automorphisms on \\(\\mathbb{Z}_{64}\\)","what":"Bar plot automorphism distribution by regions","title":"Analysis of Automorphisms on a DNA Multiple Sequence Alignment","text":"last result can summarized gene regions follow: , function automorphismByRanges permits classification pairwise alignment protein-coding sub-regions based mutational events observed quantitatively represented automorphisms genetic-code cubes. Searching automorphisms \\(\\mathbb{Z}_{64}\\) permits us quantitative differentiation mutational events different codon positions given DNA protein-encoding region. shown reference (4)) set different cubes can applied describe best evolutionary aminoacid scale highly correlated aminoacid physicochemical properties describing observed evolutionary process given protein. information subject can found supporting material reference (4)) GitHub GenomeAlgebra_SymmetricGroup, particularly interacting Mathematica notebook Genetic-Code-Scales_of_Amino-Acids.nb. automorphism distribution cubes can summarized bar-plot graphic","code":"autm_range <- automorphismByRanges(cyc_autm,                                    min.len = 2,                                    verbose = FALSE) autm_range #> GRangesList object of length 108: #> $human_1.human_4 #> GRanges object with 3 ranges and 1 metadata column: #>       seqnames    ranges strand |        cube #>          <Rle> <IRanges>  <Rle> | <character> #>   [1]        1      1-60      + |        ACGT #>   [2]        1        61      + |        TGCA #>   [3]        1    62-106      + |        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #>  #> $human_1.silvery_gibbon #> GRanges object with 3 ranges and 1 metadata column: #>       seqnames    ranges strand |        cube #>          <Rle> <IRanges>  <Rle> | <character> #>   [1]        1      1-94      + |        ACGT #>   [2]        1        95      + |        TGCA #>   [3]        1    96-106      + |        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #>  #> $human_1.white_cheeked_gibbon #> GRanges object with 3 ranges and 1 metadata column: #>       seqnames    ranges strand |        cube #>          <Rle> <IRanges>  <Rle> | <character> #>   [1]        1      1-94      + |        ACGT #>   [2]        1        95      + |        TGCA #>   [3]        1    96-106      + |        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #>  #> ... #> <105 more elements> cts <- unlist(autm_range) counts <- table(cts$cube)  par(family = \"serif\", cex = 0.6, font = 2, las = 1) barplot(counts, main=\"Automorphism distribution\",         xlab=\"Genetic-code cube representation\",         col=c(\"darkblue\",\"red\", \"darkgreen\"),          border = NA, axes = T) mtext(side = 1,line = -6, at = c(0.7, 1.9, 3.1),       text = paste0( counts ), cex = 1.4,       col = c(\"white\",\"yellow\"))"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa.html","id":"grouping-automorphism-by-automorphisms-coefficients","dir":"Articles","previous_headings":"Automorphisms on \\(\\mathbb{Z}_{64}\\)","what":"Grouping automorphism by automorphism’s coefficients","title":"Analysis of Automorphisms on a DNA Multiple Sequence Alignment","text":"Automorphisms automorphism’s coefficients can grouped. Every single base mutational event across MSA classified according IUPAC nomenclature: 1) According number hydrogen bonds (DNA/RNA double helix): strong S={C, G} (three hydrogen bonds) weak W={, U} (two hydrogen bonds). According chemical type: purines R={, G} pyrimidines Y={C, U}. 3). According presence amino keto groups base rings: amino M={C, } keto K={G, T}. Constant (hold) base positions labeled letter H. , codon positions labeled HKH means first third bases remains constant mutational events bases G T found MSA.","code":"autby_coef <- automorphismByCoef(cyc_autm,                                   verbose = FALSE) autby_coef #> AutomorphismByCoefList object of length 171: #> $human_1.human_2 #> AutomorphismByCoef object with 45 ranges and 5 metadata columns: #>        seqnames    ranges strand |        seq1        seq2      autm    mut_type        cube #>           <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <character> <character> #>    [1]        1     1-106      + |         ATG         ATG         1         HHH        ACGT #>    [2]        1     1-106      + |         GGT         GGT         1         HHH        ACGT #>    [3]        1     1-106      + |         GAT         GAT         1         HHH        ACGT #>    [4]        1     1-106      + |         GTT         GTT         1         HHH        ACGT #>    [5]        1     1-106      + |         GAG         GAG         1         HHH        ACGT #>    ...      ...       ...    ... .         ...         ...       ...         ...         ... #>   [41]        1     1-106      + |         GAC         GAC         1         HHH        ACGT #>   [42]        1     1-106      + |         TTA         TTA         1         HHH        ACGT #>   [43]        1     1-106      + |         ATA         ATA         1         HHH        ACGT #>   [44]        1     1-106      + |         GCT         GCT         1         HHH        ACGT #>   [45]        1     1-106      + |         TAA         TAA         1         HHH        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #>  #> ... #> <170 more elements> cts <- unlist(autby_coef) counts <- table(cts$mut_type[ cts$autm != 1 & cts$autm != -1 ]) counts <- sort(counts, decreasing = TRUE)  par(family = \"serif\", cex.axis = 1.4, font = 2, las = 1,      cex.main = 1.4, cex.lab = 2) barplot(counts, main=\"Automorphism distribution per Mutation type\",         col = c(\"red\", \"orange\", \"yellow\", \"green\", \"dodgerblue\"),          border = NA, axes = TRUE,las=2) mtext(side = 1,line = -2, at = c(0.7, 1.9, 3.1, 4.3, 5.5),       text = paste0( counts ), cex = 1.4,       col = c(\"white\", \"red\", \"blue\", \"black\", \"yellow\"))"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa.html","id":"bar-plot-automorphism-distribution-by-cubes-1","dir":"Articles","previous_headings":"Automorphisms on \\(\\mathbb{Z}_{64}\\)","what":"Bar plot automorphism distribution by cubes","title":"Analysis of Automorphisms on a DNA Multiple Sequence Alignment","text":"automorphism distribution cubes can summarized bar-plot graphic. Object autby_coef carried pairwise comparisons, enough use data single species reference, e.g., humans. First data must reordered  object: Nominal variables transformed ","code":"hautby_coef <- autby_coef[ grep(\"human\", names(autby_coef)) ] h_autby_coef <- unlist(hautby_coef) h_autby_coef <- h_autby_coef[ which(h_autby_coef$autm != 1) ]  nams <- names(h_autby_coef) nams <- sub(\"human[_][1-6][.]\", \"\", nams) nams <- sub(\"[_][1-6]\", \"\", nams)  dt <- data.frame(h_autby_coef, species = nams) dt <- dt[, c(\"start\", \"autm\", \"species\", \"cube\")] dt$start <- as.numeric(dt$start) dt$autm <- as.numeric(dt$autm) dt$cube <- as.factor(dt$cube) dt$species <- as.factor(dt$species) DataFrame(dt) #> DataFrame with 282 rows and 4 columns #>         start      autm   species     cube #>     <numeric> <numeric>  <factor> <factor> #> 1          37         3   gorilla     ACGT #> 2          51        19   human       ACGT #> 3          61        51   human       TGCA #> 4          41         3   human       ACGT #> 5          18        33   human       ACGT #> ...       ...       ...       ...      ... #> 278        54        43 orangutan     TGCA #> 279        16        54 orangutan     ACGT #> 280        18        33 orangutan     ACGT #> 281        37         3 orangutan     ACGT #> 282        54        43 orangutan     TGCA counts <- table(dt$cube)  par(family = \"serif\", cex = 0.6, font = 2, mar=c(4,6,4,4)) barplot(counts, #main=\"Automorphism distribution\",         xlab=\"Genetic-code cube representation\",         ylab=\"Fixed mutational events\",         col=c(\"darkblue\",\"red\", \"darkgreen\", \"magenta\", \"orange\"),          border = NA, axes = F, #ylim = c(0, 6000),         cex.lab = 2, cex.main = 1.5, cex.names = 2) axis(2, at = c(0, 50, 100, 150, 200), cex.axis = 1.5) mtext(side = 1,line = -2.5, at = c(0.7, 1.9, 3.1, 4.3, 5.5),       text = paste0( counts ), cex = 1.4,       col = c(\"white\", \"yellow\"))"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa.html","id":"conserved-and-non-conserved-regions","dir":"Articles","previous_headings":"Automorphisms on \\(\\mathbb{Z}_{64}\\)","what":"Conserved and non-conserved regions","title":"Analysis of Automorphisms on a DNA Multiple Sequence Alignment","text":"specific function provided get coordinates conserved non-conserved regions, can used downstream analyses. conserved regions pairwise comparison retrieved typing: non-conserved regions pairwise comparison obtained function different settings:","code":"conserved_regions(x = autby_coef) #> AutomorphismByCoef object with 11023 ranges and 5 metadata columns: #>                           seqnames    ranges strand |        seq1        seq2      autm    mut_type        cube #>                              <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <character> <character> #>       human_1.orangutan_1        1      1-15      + |         ATG         ATG         1         HHH        ACGT #>       human_1.orangutan_1        1      1-15      + |         GGT         GGT         1         HHH        ACGT #>       human_1.orangutan_1        1      1-15      + |         GAT         GAT         1         HHH        ACGT #>       human_1.orangutan_1        1      1-15      + |         GTT         GTT         1         HHH        ACGT #>       human_1.orangutan_1        1      1-15      + |         GAG         GAG         1         HHH        ACGT #>                       ...      ...       ...    ... .         ...         ...       ...         ...         ... #>   orangutan_1.orangutan_2        1     1-106      + |         GAC         GAC         1         HHH        ACGT #>   orangutan_1.orangutan_2        1     1-106      + |         TTA         TTA         1         HHH        ACGT #>   orangutan_1.orangutan_2        1     1-106      + |         ATA         ATA         1         HHH        ACGT #>   orangutan_1.orangutan_2        1     1-106      + |         GCT         GCT         1         HHH        ACGT #>   orangutan_1.orangutan_2        1     1-106      + |         TAA         TAA         1         HHH        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths ncs <- conserved_regions(x = autby_coef, conserved = FALSE) ncs #> AutomorphismByCoef object with 396 ranges and 5 metadata columns: #>                                seqnames    ranges strand |        seq1        seq2      autm    mut_type        cube #>                                   <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <character> <character> #>            human_1.orangutan_1        1        16      + |         TCC         TCG        54         HHS        ACGT #>            human_1.orangutan_2        1        16      + |         TCC         TCG        54         HHS        ACGT #>            human_2.orangutan_1        1        16      + |         TCC         TCG        54         HHS        ACGT #>            human_2.orangutan_2        1        16      + |         TCC         TCG        54         HHS        ACGT #>            gorilla.orangutan_1        1        16      + |         TCC         TCG        54         HHS        ACGT #>                            ...      ...       ...    ... .         ...         ...       ...         ...         ... #>   rhesus_monkeys_2.orangutan_2        1        95      + |         TTG         TTA        34         HHR        ACGT #>    gelada_baboon_1.orangutan_1        1        95      + |         TTG         TTA        34         HHR        ACGT #>    gelada_baboon_1.orangutan_2        1        95      + |         TTG         TTA        34         HHR        ACGT #>    gelada_baboon_2.orangutan_1        1        95      + |         TTG         TTA        34         HHR        ACGT #>    gelada_baboon_2.orangutan_2        1        95      + |         TTG         TTA        34         HHR        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa.html","id":"subsetting-regions-of-interest","dir":"Articles","previous_headings":"","what":"Subsetting regions of interest","title":"Analysis of Automorphisms on a DNA Multiple Sequence Alignment","text":"application available bioinformatic tools straightforward. example, knowing positions conserved non-conserved regions, can subset alignment region potential interest. coordinates carrying mutational events : use function DNAStringSet Bioconductor R package Biostrings subset MSA primate cytochrome c.  Next, function ggseqlogo R package ggseqlogo applied get logo sequence selected MSA region.  corresponding aminoacid sequence corresponding aminoacid sequence logo  , first mutational event reported codon sequence correspond synonymous mutation. Alternatively, can start translating DNA MSA.","code":"sort(unique(start(ncs))) #> [1] 16 18 37 41 51 54 59 61 95 cyc_aln_region <- DNAStringSet(cyc_aln, start = 37*3 - 2, end = 42*3) cyc_aln_region #> DNAStringSet object of length 19: #>      width seq                                                                                      names                #>  [1]    18 TTTGGGCGGAAGACAGGT                                                                       NM_018947.6 Homo ... #>  [2]    18 TTTGGGCGGAAGACAGGT                                                                       gb|BC021994.1|  [... #>  [3]    18 TTCGGGCGGAAGACAGGT                                                                       ref|XM_019031021.... #>  [4]    18 TTTGGGCGGAAGACAGGT                                                                       dbj|AK311836.1|  ... #>  [5]    18 TTTGGGCGGAAGACAGGT                                                                       gb|BC067222.1|  [... #>  ...   ... ... #> [15]    18 TTCGGGCGGAAGACAGGT                                                                       ref|XM_028845948.... #> [16]    18 TTCGGGCGGAAGACAGGT                                                                       ref|XM_025380676.... #> [17]    18 TTCGGGCGGAAGACAGGT                                                                       ref|XM_025380675.... #> [18]    18 TTCGGGCGGAAGACAGGT                                                                       ref|NM_001131167.... #> [19]    18 TTCGGGCGGAAGACAGGT                                                                       emb|CR857183.1|  ... ggseqlogo( as.character(cyc_aln_region) ) #> Warning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> = \"none\")` instead. cyc_aln_region_aa = translate(cyc_aln_region) cyc_aln_region_aa #> AAStringSet object of length 19: #>      width seq                                                                                      names                #>  [1]     6 FGRKTG                                                                                   NM_018947.6 Homo ... #>  [2]     6 FGRKTG                                                                                   gb|BC021994.1|  [... #>  [3]     6 FGRKTG                                                                                   ref|XM_019031021.... #>  [4]     6 FGRKTG                                                                                   dbj|AK311836.1|  ... #>  [5]     6 FGRKTG                                                                                   gb|BC067222.1|  [... #>  ...   ... ... #> [15]     6 FGRKTG                                                                                   ref|XM_028845948.... #> [16]     6 FGRKTG                                                                                   ref|XM_025380676.... #> [17]     6 FGRKTG                                                                                   ref|XM_025380675.... #> [18]     6 FGRKTG                                                                                   ref|NM_001131167.... #> [19]     6 FGRKTG                                                                                   emb|CR857183.1|  ... ggseqlogo( as.character(cyc_aln_region_aa) ) cyc_aln_aa <- translate(cyc_aln@unmasked) cyc_aln_aa #> AAStringSet object of length 19: #>      width seq                                                                                      names                #>  [1]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* NM_018947.6 Homo ... #>  [2]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* gb|BC021994.1|  [... #>  [3]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* ref|XM_019031021.... #>  [4]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* dbj|AK311836.1|  ... #>  [5]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* gb|BC067222.1|  [... #>  ...   ... ... #> [15]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* ref|XM_028845948.... #> [16]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* ref|XM_025380676.... #> [17]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* ref|XM_025380675.... #> [18]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* ref|NM_001131167.... #> [19]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* emb|CR857183.1|  ... cyc_aln_aa_region <- AAStringSet(cyc_aln_aa, start = 37, end = 42) cyc_aln_aa_region #> AAStringSet object of length 19: #>      width seq                                                                                      names                #>  [1]     6 FGRKTG                                                                                   NM_018947.6 Homo ... #>  [2]     6 FGRKTG                                                                                   gb|BC021994.1|  [... #>  [3]     6 FGRKTG                                                                                   ref|XM_019031021.... #>  [4]     6 FGRKTG                                                                                   dbj|AK311836.1|  ... #>  [5]     6 FGRKTG                                                                                   gb|BC067222.1|  [... #>  ...   ... ... #> [15]     6 FGRKTG                                                                                   ref|XM_028845948.... #> [16]     6 FGRKTG                                                                                   ref|XM_025380676.... #> [17]     6 FGRKTG                                                                                   ref|XM_025380675.... #> [18]     6 FGRKTG                                                                                   ref|NM_001131167.... #> [19]     6 FGRKTG                                                                                   emb|CR857183.1|  ... ggseqlogo( as.character(cyc_aln_aa_region) )"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Analysis of Automorphisms on a DNA Multiple Sequence Alignment","text":"1. Sanchez R, Morgado E, Grau R. Gene algebra genetic code algebraic structure. J Math Biol. 2005 Oct;51(4):431-57. doi: 10.1007/s00285-005-0332-8. Epub 2005 Jul 13. PMID: 16012800. ( PDF). 2. Robersy Sanchez, Jesús Barreto (2021) Genomic Abelian Finite Groups. doi: 10.1101/2021.06.01.446543. 3. M. V José, E.R. Morgado, R. Sánchez, T. Govezensky, 24 possible algebraic representations standard genetic code six three dimensions, Adv. Stud. Biol. 4 (2012) 119–152.PDF. 4. R. Sanchez. Symmetric Group Genetic–Code Cubes. Effect Genetic–Code Architecture Evolutionary Process MATCH Commun. Math. Comput. Chem. 79 (2018) 527-560. PDF.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa_brca1.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Analysis of Automorphisms on a MSA of Primate BRCA1 Gene","text":"R package compute autimorphisms pairwise aligned DNA sequences represented elements Genomic Abelian group described reference (1). general scenario, whole chromosomes genomic regions population (species close related species) can algebraically represented direct sum cyclic groups specifically Abelian p-groups. Basically, propose representation multiple sequence alignments (MSA) length N finite Abelian group created direct sum homocyclic Abelian groups prime-power order: \\[ \\qquad G = (\\mathbb{Z}_{p^{\\alpha_{1}}_1})^{n_1} \\oplus (\\mathbb{Z}_{p^{\\alpha_{2}}_1})^{n_2} \\oplus \\dots \\oplus (\\mathbb{Z}_{p^{\\alpha_{k}}_k})^{n_k}  \\] , \\(p_i\\)’s prime numbers, \\(\\alpha_i \\\\mathbb{N}\\) \\(\\mathbb{Z}_{p^{\\alpha_{}}_i}\\) group integer modulo \\(p^{\\alpha_{}}_i\\). purpose estimating automorphism two aligned DNA sequences, \\(p^{\\alpha_{}}_i \\\\{5, 2^6, 5^3 \\}\\).","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa_brca1.html","id":"automorphisms","dir":"Articles","previous_headings":"Overview","what":"Automorphisms","title":"Analysis of Automorphisms on a MSA of Primate BRCA1 Gene","text":"Herein, automorphisms considered algebraic descriptions mutational event observed codon sequences represented different Abelian groups. particular, described references (3-4), representation codon set defined Abelian group 24 possible isomorphic Abelian groups. Abelian groups can labeled based DNA base-order used generate . set 24 Abelian groups can described group isomorphic symmetric group degree four (\\(S_4\\), see reference (4)). support symmetric group 24 Abelian group genetic-code cubes, users can also see Symmetric Group Genetic-Code Cubes., specifically Mathematica notebook IntroductionToZ5GeneticCodeVectorSpace.nb interact using Wolfram Player, freely available (Windows Linux OS) , https://www.wolfram.com/player/.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa_brca1.html","id":"automorphisms-on-mathbbz_64","dir":"Articles","previous_headings":"","what":"Automorphisms on \\(\\mathbb{Z}_{64}\\)","title":"Analysis of Automorphisms on a MSA of Primate BRCA1 Gene","text":"First, proceed load R package required analysis Next, proceed check DNA multiple sequence alignment (MSA) file. ia FASTA file carrying MSA primates BRCA1 gene. Notice familiar FASTA file, better directly read function automorphism. However, current example, step can bypassed, since MSA provided provided together GenomAutomorphism R package Load MSA available package sequence names Next, function automorphism applied represent codon sequence Abelian group \\(\\mathbb{Z}_{64}\\) (.e., set integers remainder modulo 64). codon coordinates requested cube ACGT. Following reference (4)), cubes labeled based order DNA bases used define sum operation. Z64, automorphisms described functions \\(f(x) = k\\,x \\quad mod\\,64\\), \\(k\\) \\(x\\) elements set integers modulo 64. , function automorphism three important arguments given values: group = “Z64”, cube = c(“ACGT”, “TGCA”), cube_alt = c(“CATG”, “GTAC”). Setting group specifies group automorphisms computed. groups can : “Z5”, “Z64”, “Z125”, “Z5^3”. groups “Z64” “Z125” mutational events can described automorphisms given cube. , character string denoting pairs “dual” genetic-code cubes, given references (1-4)), given argument cube. , base pairs given cubes must complementary . cube pair call dual cubes , shown reference (4)), pair integrates group. automorphisms found first set dual cubes, algorithm search automorphism alternative set dual cubes. Object brca1_autm included package can load typing: AutomorphismList class object returned. codon sequences (seq1 seq2) corresponding coordinates (left) returned, well coordinated representation \\(\\mathbb{Z}_{64}\\) (coord1 coord2). Observe two new columns added, automorphism coefficient \\(k\\) (named brca1_autm) genetic-code cube automorphism found. convention DNA sequence given positive strand. Since dual cube “ACGT” corresponds complementary base order TGCA, automorphisms described cube TGCA represent mutational events affecting DNA negative strand (-).","code":"library(GenomAutomorphism) library(Biostrings) library(ggseqlogo) ## Do not run it. This is included with package URL <- paste0(\"https://github.com/genomaths/seqalignments/raw/master/BRCA1/\",               \"brca1_primates_dna_repair_20_sequences.fasta\")  brca1_aln <- readDNAMultipleAlignment(filepath = URL) brca1_aln data(\"brca1_aln\") brca1_aln #> DNAMultipleAlignment with 20 rows and 2283 columns #>       aln                                                                                           names                #>  [1] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA NM_007298.3:20-22... #>  [2] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA U64805.1:1-2280_H... #>  [3] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA XM_031011560.1:23... #>  [4] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA XM_031011561.1:23... #>  [5] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA XM_031011562.1:16... #>  [6] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCTCAGATCCCCCACAGCCACTACTGA XM_009432101.3:27... #>  [7] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCTCAGATCCCCCACAGCCACTACTGA XM_009432104.3:37... #>  [8] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCTCAGATCCCCCACAGCCACTACTGA XM_016930487.2:37... #>  [9] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCTCAGATCCCCCACAGCCACTACTGA XM_009432099.3:37... #>  ... ... #> [12] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCTCAGATCCCCCACAGCCACTACTGA XM_034941185.1:24... #> [13] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCTCAGATCCCCCACAGCCACTACTGA XM_034941182.1:25... #> [14] ATGGATTTATCTGCTGTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGATACCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA XM_032163757.1:14... #> [15] ATGGATTTATCTGCTGTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGATACCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA XM_032163756.1:14... #> [16] ATGGATTTATCTGCTGTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGATACCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA XM_032163758.1:13... #> [17] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACGCCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA XM_030923119.1:18... #> [18] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACGCCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA XM_030923118.1:18... #> [19] ATGGATTTACCTGCTGTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA XM_025363316.1:14... #> [20] ATGGATTTATCTGCTGTTCGTGTTGAAGAAGTGCAAAATGTCCTT...CTGGACACCTACCTGATACCCCAGATCCCTCACAGCCACTACTGA XM_039475995.1:49... strtrim(rownames(brca1_aln), 100) #>  [1] \"NM_007298.3:20-2299_Homo_sapiens_BRCA1_DNA_repair_associated_(BRCA1)_transcript_variant_4_mRNA\"       #>  [2] \"U64805.1:1-2280_Homo_sapiens_Brca1-delta11b_(Brca1)_mRNA_complete_cds\"                                #>  [3] \"XM_031011560.1:233-2515_PREDICTED:_Gorilla_gorilla_gorilla_BRCA1_DNA_repair_associated_(BRCA1)_trans\" #>  [4] \"XM_031011561.1:233-2512_PREDICTED:_Gorilla_gorilla_gorilla_BRCA1_DNA_repair_associated_(BRCA1)_trans\" #>  [5] \"XM_031011562.1:163-2442_PREDICTED:_Gorilla_gorilla_gorilla_BRCA1_DNA_repair_associated_(BRCA1)_trans\" #>  [6] \"XM_009432101.3:276-2555_PREDICTED:_Pan_troglodytes_BRCA1_DNA_repair_associated_(BRCA1)_transcript_va\" #>  [7] \"XM_009432104.3:371-2650_PREDICTED:_Pan_troglodytes_BRCA1_DNA_repair_associated_(BRCA1)_transcript_va\" #>  [8] \"XM_016930487.2:371-2650_PREDICTED:_Pan_troglodytes_BRCA1_DNA_repair_associated_(BRCA1)_transcript_va\" #>  [9] \"XM_009432099.3:371-2653_PREDICTED:_Pan_troglodytes_BRCA1_DNA_repair_associated_(BRCA1)_transcript_va\" #> [10] \"XM_034941183.1:254-2533_PREDICTED:_Pan_paniscus_BRCA1_DNA_repair_associated_(BRCA1)_transcript_varia\" #> [11] \"XM_034941184.1:254-2533_PREDICTED:_Pan_paniscus_BRCA1_DNA_repair_associated_(BRCA1)_transcript_varia\" #> [12] \"XM_034941185.1:248-2527_PREDICTED:_Pan_paniscus_BRCA1_DNA_repair_associated_(BRCA1)_transcript_varia\" #> [13] \"XM_034941182.1:254-2536_PREDICTED:_Pan_paniscus_BRCA1_DNA_repair_associated_(BRCA1)_transcript_varia\" #> [14] \"XM_032163757.1:145-2418_PREDICTED:_Hylobates_moloch_BRCA1_DNA_repair_associated_(BRCA1)_transcript_v\" #> [15] \"XM_032163756.1:145-2421_PREDICTED:_Hylobates_moloch_BRCA1_DNA_repair_associated_(BRCA1)_transcript_v\" #> [16] \"XM_032163758.1:139-2412_PREDICTED:_Hylobates_moloch_BRCA1_DNA_repair_associated_(BRCA1)_transcript_v\" #> [17] \"XM_030923119.1:184-2463_PREDICTED:_Rhinopithecus_roxellana_BRCA1_DNA_repair_associated_(BRCA1)_trans\" #> [18] \"XM_030923118.1:183-2465_PREDICTED:_Rhinopithecus_roxellana_BRCA1_DNA_repair_associated_(BRCA1)_trans\" #> [19] \"XM_025363316.1:147-2426_PREDICTED:_Theropithecus_gelada_BRCA1_DNA_repair_associated_(BRCA1)_transcri\" #> [20] \"XM_039475995.1:49-2328_PREDICTED:_Saimiri_boliviensis_boliviensis_BRCA1_DNA_repair_associated_(BRCA1\" ## Do not run it. This is included with package  nams <- c(\"human_1\",\"human_2\",\"gorilla_1\",\"gorilla_2\",\"gorilla_3\",         \"chimpanzee_1\",\"chimpanzee_2\",\"chimpanzee_3\",\"chimpanzee_4\",         \"bonobos_1\",\"bonobos_2\",\"bonobos_3\",\"bonobos_4\",\"silvery_gibbon_1\",         \"silvery_gibbon_1\",\"silvery_gibbon_3\",\"golden_monkey_1\",         \"golden_monkey_2\",\"gelada_baboon\",\"bolivian_monkey\")  brca1_autm <- automorphism(                       seqs = brca1_aln,                        group = \"Z64\",                        cube = c(\"ACGT\", \"TGCA\"),                       cube_alt = c(\"CATG\", \"GTAC\"),                       nms = nams,                       verbose = FALSE) data(brca1_autm) brca1_autm #> AutomorphismList object of length: 190 #> names(190): human_1.human_2 human_1.gorilla_1 human_1.gorilla_2 ... golden_monkey_2.gelada_baboon golden_monkey_2.bolivian_monkey gelada_baboon.bolivian_monkey  #> -------  #> Automorphism object with 761 ranges and 6 metadata columns: #>         seqnames    ranges strand |        seq1        seq2    coord1    coord2      autm        cube #>            <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> <numeric> <character> #>     [1]        1         1      + |         ATG         ATG        50        50         1        ACGT #>     [2]        1         2      + |         GAT         GAT        11        11         1        ACGT #>     [3]        1         3      + |         TTA         TTA        60        60         1        ACGT #>     [4]        1         4      + |         TCT         TCT        31        31         1        ACGT #>     [5]        1         5      + |         GCT         GCT        27        27         1        ACGT #>     ...      ...       ...    ... .         ...         ...       ...       ...       ...         ... #>   [757]        1       757      + |         CAC         CAC         5         5         1        ACGT #>   [758]        1       758      + |         AGC         AGC        33        33         1        ACGT #>   [759]        1       759      + |         CAC         CAC         5         5         1        ACGT #>   [760]        1       760      + |         TAC         TAC        13        13         1        ACGT #>   [761]        1       761      + |         TGA         TGA        44        44         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #> ... #> <189 more DFrame element(s)> #> Two slots: 'DataList' & 'SeqRanges' #> -------"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa_brca1.html","id":"bar-plot-automorphism-distribution-by-cubes","dir":"Articles","previous_headings":"Automorphisms on \\(\\mathbb{Z}_{64}\\)","what":"Bar plot automorphism distribution by cubes","title":"Analysis of Automorphisms on a MSA of Primate BRCA1 Gene","text":"automorphism distribution cubes can summarized bar-plot graphic","code":"autms <- unlist(brca1_autm) counts <- table(autms$cube[ autms$autm != 1 | is.na(autms$autm) ])   par(family = \"serif\", cex = 0.8, font = 2, mar = c(4,6,4,4)) barplot(counts, #main=\"Automorphism distribution\",         xlab=\"Genetic-code cube representation\",         ylab=\"Fixed mutational events\", col=c(\"darkblue\",\"red\", \"darkgreen\", \"magenta\", \"orange\"),          border = NA, axes = FALSE, ylim = c(0,7000),         cex.lab = 2, cex.main = 1.5, cex.names = 2) axis(2, at = c(0, 2000, 4000, 6000), cex.axis = 1.5) mtext(side = 1,line = -2, at = c(0.7, 1.9, 3.1, 4.3, 5.5),       text = paste0( counts ), cex = 1.4,       col = c(\"white\", \"red\", \"yellow\", \"magenta\"))"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa_brca1.html","id":"bar-plot-automorphism-distribution-by-ranges-regions","dir":"Articles","previous_headings":"Automorphisms on \\(\\mathbb{Z}_{64}\\)","what":"Bar plot automorphism distribution by ranges (regions)","title":"Analysis of Automorphisms on a MSA of Primate BRCA1 Gene","text":"last result can summarized gene regions follow: , function automorphismByRanges permits classification pairwise alignment protein-coding sub-regions based mutational events observed quantitatively represented automorphisms genetic-code cubes. Searching automorphisms \\(\\mathbb{Z}_{64}\\) permits us quantitative differentiation mutational events different codon positions given DNA protein-encoding region. shown reference (4)) set different cubes can applied describe best evolutionary aminoacid scale highly correlated aminoacid physicochemical properties describing observed evolutionary process given protein. information subject can found supporting material reference (4)) GitHub GenomeAlgebra_SymmetricGroup, particularly interacting Mathematica notebook Genetic-Code-Scales_of_Amino-Acids.nb. automorphism distribution cubes can summarized bar-plot graphic","code":"brca1_autm_range <- automorphismByRanges(brca1_autm,                                    min.len = 2,                                   num.cores = 10L,                                   verbose = FALSE) brca1_autm_range #> GRangesList object of length 189: #> $human_1.human_2 #> GRanges object with 3 ranges and 1 metadata column: #>       seqnames    ranges strand |        cube #>          <Rle> <IRanges>  <Rle> | <character> #>   [1]        1     1-349      + |        ACGT #>   [2]        1       350      + |        Gaps #>   [3]        1   351-761      + |        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #>  #> $human_1.gorilla_1 #> GRanges object with 7 ranges and 1 metadata column: #>       seqnames    ranges strand |        cube #>          <Rle> <IRanges>  <Rle> | <character> #>   [1]        1     1-233      + |        ACGT #>   [2]        1       234      + |        TGCA #>   [3]        1   235-349      + |        ACGT #>   [4]        1       350      + |        Trnl #>   [5]        1   351-622      + |        ACGT #>   [6]        1       623      + |        TGCA #>   [7]        1   624-761      + |        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #>  #> $human_1.gorilla_2 #> GRanges object with 7 ranges and 1 metadata column: #>       seqnames    ranges strand |        cube #>          <Rle> <IRanges>  <Rle> | <character> #>   [1]        1     1-233      + |        ACGT #>   [2]        1       234      + |        TGCA #>   [3]        1   235-349      + |        ACGT #>   [4]        1       350      + |        Gaps #>   [5]        1   351-622      + |        ACGT #>   [6]        1       623      + |        TGCA #>   [7]        1   624-761      + |        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #>  #> ... #> <186 more elements> cts <- unlist(brca1_autm_range) counts <- table(cts$cube)  par(family = \"serif\", cex = 1, font = 2, las = 1) barplot(counts, main=\"Automorphism distribution\",         xlab=\"Genetic-code cube representation\",         col=c(\"darkblue\",\"red\", \"darkgreen\", \"magenta\"),          border = NA, axes = T) mtext(side = 1,line = -6, at = c(0.7, 1.9, 3.1, 4.3),       text = paste0( counts ),        col = c(\"white\", \"black\", \"yellow\", \"red\"))"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa_brca1.html","id":"grouping-automorphism-by-automorphisms-coefficients","dir":"Articles","previous_headings":"Automorphisms on \\(\\mathbb{Z}_{64}\\)","what":"Grouping automorphism by automorphism’s coefficients","title":"Analysis of Automorphisms on a MSA of Primate BRCA1 Gene","text":"Automorphisms automorphism’s coefficients can grouped. result provided package result evolutionary pressure DNA protein-coding regions (addressed preserve aminoacid physicochemical properties , consequently, biological functions encoded proteins) highest mutational rate found third base codon, followed first base, lowest rate found second one. DNA bases classified based physicochemical criteria used ordering set codons: number hydrogen bonds (strong-weak, S-W), chemical type (purine-pyrimidine, Y-R), chemical groups (amino versus keto, M-K) (see reference 4). Preserved codon positions labeled letter “H”. Preserved codon positions labeled letter “H” insertion-mutations identified multiple sequence alignment labeled “—”.","code":"autby_coef <- automorphismByCoef(brca1_autm,                                   verbose = FALSE) data(autby_coef, package = \"GenomAutomorphism\") autby_coef #> AutomorphismByCoefList object of length 190: #> $human_1.human_2 #> AutomorphismByCoef object with 239 ranges and 5 metadata columns: #>         seqnames    ranges strand |        seq1        seq2      autm    mut_type        cube #>            <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <character> <character> #>     [1]        1     1-238      + |         ATG         ATG         1         HHH        ACGT #>     [2]        1     1-238      + |         GAT         GAT         1         HHH        ACGT #>     [3]        1     1-238      + |         TTA         TTA         1         HHH        ACGT #>     [4]        1     1-238      + |         TCT         TCT         1         HHH        ACGT #>     [5]        1     1-238      + |         GCT         GCT         1         HHH        ACGT #>     ...      ...       ...    ... .         ...         ...       ...         ...         ... #>   [235]        1   511-761      + |         CCC         CCC         1         HHH        ACGT #>   [236]        1   511-761      + |         CTT         CTT         1         HHH        ACGT #>   [237]        1   511-761      + |         CCT         CCT         1         HHH        ACGT #>   [238]        1   511-761      + |         ATA         ATA         1         HHH        ACGT #>   [239]        1   511-761      + |         TGA         TGA         1         HHH        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #>  #> ... #> <189 more elements> cts <- unlist(autby_coef) counts <- table(cts$mut_type[ cts$autm != 1 & cts$autm != -1 ]) counts <- sort(counts, decreasing = TRUE)  par(family = \"serif\", cex.axis = 1.4, font = 2, las = 1,      cex.main = 1.4, cex.lab = 2) barplot(counts, main=\"Automorphism distribution per Mutation type\",         col = colorRampPalette(c(\"red\", \"yellow\", \"blue\"))(36),          border = NA, axes = TRUE,las=2)"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa_brca1.html","id":"conserved-and-non-conserved-regions","dir":"Articles","previous_headings":"Automorphisms on \\(\\mathbb{Z}_{64}\\)","what":"Conserved and non-conserved regions","title":"Analysis of Automorphisms on a MSA of Primate BRCA1 Gene","text":"specific function provided get coordinates conserved non-conserved regions, can used downstream analyses. conserved regions pairwise comparison retrieved typing: non-conserved regions pairwise comparison obtained function different settings:","code":"conserved_regions(x = autby_coef) #> AutomorphismByCoef object with 80625 ranges and 5 metadata columns: #>                                   seqnames    ranges strand |        seq1        seq2      autm    mut_type        cube #>                                      <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <character> <character> #>             human_1.gelada_baboon        1       1-3      + |         ATG         ATG         1         HHH        ACGT #>             human_1.gelada_baboon        1       1-3      + |         GAT         GAT         1         HHH        ACGT #>             human_1.gelada_baboon        1       1-3      + |         TTA         TTA         1         HHH        ACGT #>             human_2.gelada_baboon        1       1-3      + |         ATG         ATG         1         HHH        ACGT #>             human_2.gelada_baboon        1       1-3      + |         GAT         GAT         1         HHH        ACGT #>                               ...      ...       ...    ... .         ...         ...       ...         ...         ... #>   golden_monkey_2.bolivian_monkey        1   757-761      + |         TGA         TGA         1         HHH        ACGT #>     gelada_baboon.bolivian_monkey        1   757-761      + |         CAC         CAC         1         HHH        ACGT #>     gelada_baboon.bolivian_monkey        1   757-761      + |         AGC         AGC         1         HHH        ACGT #>     gelada_baboon.bolivian_monkey        1   757-761      + |         TAC         TAC         1         HHH        ACGT #>     gelada_baboon.bolivian_monkey        1   757-761      + |         TGA         TGA         1         HHH        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths ncs <- conserved_regions(x = autby_coef, conserved = FALSE) ncs #> AutomorphismByCoef object with 8956 ranges and 5 metadata columns: #>                                    seqnames    ranges strand |        seq1        seq2      autm    mut_type #>                                       <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <character> #>              human_1.gelada_baboon        1         4      + |         TCT         CCT         9         YHH #>              human_2.gelada_baboon        1         4      + |         TCT         CCT         9         YHH #>            gorilla_1.gelada_baboon        1         4      + |         TCT         CCT         9         YHH #>            gorilla_2.gelada_baboon        1         4      + |         TCT         CCT         9         YHH #>            gorilla_3.gelada_baboon        1         4      + |         TCT         CCT         9         YHH #>                                ...      ...       ...    ... .         ...         ...       ...         ... #>   silvery_gibbon_1.bolivian_monkey        1       756      + |         CCC         CCT        59         HHY #>   silvery_gibbon_3.bolivian_monkey        1       756      + |         CCC         CCT        59         HHY #>    golden_monkey_1.bolivian_monkey        1       756      + |         CCC         CCT        59         HHY #>    golden_monkey_2.bolivian_monkey        1       756      + |         CCC         CCT        59         HHY #>      gelada_baboon.bolivian_monkey        1       756      + |         CCC         CCT        59         HHY #>                                           cube #>                                    <character> #>              human_1.gelada_baboon        ACGT #>              human_2.gelada_baboon        ACGT #>            gorilla_1.gelada_baboon        ACGT #>            gorilla_2.gelada_baboon        ACGT #>            gorilla_3.gelada_baboon        ACGT #>                                ...         ... #>   silvery_gibbon_1.bolivian_monkey        ACGT #>   silvery_gibbon_3.bolivian_monkey        ACGT #>    golden_monkey_1.bolivian_monkey        ACGT #>    golden_monkey_2.bolivian_monkey        ACGT #>      gelada_baboon.bolivian_monkey        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa_brca1.html","id":"subsetting-regions-of-interest","dir":"Articles","previous_headings":"","what":"Subsetting regions of interest","title":"Analysis of Automorphisms on a MSA of Primate BRCA1 Gene","text":"application available bioinformatic tools straightforward. example, knowing positions conserved non-conserved regions, can subset alignment region potential interest. coordinates carrying mutational events : use function DNAStringSet Bioconductor R package Biostrings subset MSA primate cytochrome c.  Next, function ggseqlogo R package ggseqlogo applied get logo sequence selected MSA region.  corresponding aminoacid sequence corresponding aminoacid sequence logo  , first mutational event reported codon sequence correspond synonymous mutation.","code":"sort(unique(start(ncs))) #>   [1]   4   6   7  11  15  20  25  29  45  52  60  63  71  74  77  85  86  91  94 100 101 104 113 122 124 128 132 138 #>  [29] 139 142 143 146 148 151 152 155 159 161 164 167 170 172 175 176 181 182 190 191 193 194 196 205 214 216 225 227 #>  [57] 231 233 234 239 240 241 244 245 247 251 252 253 254 267 269 270 275 276 279 281 282 286 287 292 293 299 300 301 #>  [85] 310 318 319 323 324 326 328 329 330 331 333 339 340 350 357 359 360 361 363 369 370 374 375 376 378 394 396 399 #> [113] 402 406 407 410 417 418 421 425 428 431 433 435 438 442 443 444 445 447 453 458 461 466 472 476 477 478 480 482 #> [141] 483 485 486 487 489 499 501 502 503 505 507 509 510 511 516 518 521 522 523 525 526 532 535 536 537 545 549 550 #> [169] 552 554 560 564 568 569 572 576 578 584 585 590 597 601 602 605 623 647 653 654 659 660 665 669 678 681 683 685 #> [197] 693 701 702 703 704 716 726 728 730 731 748 749 753 756 brca1_aln_region <- DNAStringSet(brca1_aln, start = 37*3 - 2, end = 42*3) brca1_aln_region #> DNAStringSet object of length 20: #>      width seq                                                                                      names                #>  [1]    18 ACAAAGTGTGACCACATA                                                                       NM_007298.3:20-22... #>  [2]    18 ACAAAGTGTGACCACATA                                                                       U64805.1:1-2280_H... #>  [3]    18 ACAAAGTGTGACCACATA                                                                       XM_031011560.1:23... #>  [4]    18 ACAAAGTGTGACCACATA                                                                       XM_031011561.1:23... #>  [5]    18 ACAAAGTGTGACCACATA                                                                       XM_031011562.1:16... #>  ...   ... ... #> [16]    18 ACAAAGTGTGACCACATA                                                                       XM_032163758.1:13... #> [17]    18 ACAAAGTGTGACCACATA                                                                       XM_030923119.1:18... #> [18]    18 ACAAAGTGTGACCACATA                                                                       XM_030923118.1:18... #> [19]    18 ACAAAGTGTGACCACATA                                                                       XM_025363316.1:14... #> [20]    18 ACAAAGTGTGACCACATA                                                                       XM_039475995.1:49... ggseqlogo( as.character(brca1_aln_region) ) #> Warning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> = \"none\")` instead. brca1_aln_region_aa = translate(brca1_aln_region) brca1_aln_region_aa #> AAStringSet object of length 20: #>      width seq                                                                                      names                #>  [1]     6 TKCDHI                                                                                   NM_007298.3:20-22... #>  [2]     6 TKCDHI                                                                                   U64805.1:1-2280_H... #>  [3]     6 TKCDHI                                                                                   XM_031011560.1:23... #>  [4]     6 TKCDHI                                                                                   XM_031011561.1:23... #>  [5]     6 TKCDHI                                                                                   XM_031011562.1:16... #>  ...   ... ... #> [16]     6 TKCDHI                                                                                   XM_032163758.1:13... #> [17]     6 TKCDHI                                                                                   XM_030923119.1:18... #> [18]     6 TKCDHI                                                                                   XM_030923118.1:18... #> [19]     6 TKCDHI                                                                                   XM_025363316.1:14... #> [20]     6 TKCDHI                                                                                   XM_039475995.1:49... ggseqlogo( as.character(brca1_aln_region_aa) )"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa_brca1.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Analysis of Automorphisms on a MSA of Primate BRCA1 Gene","text":"1. Sanchez R, Morgado E, Grau R. Gene algebra genetic code algebraic structure. J Math Biol. 2005 Oct;51(4):431-57. doi: 10.1007/s00285-005-0332-8. Epub 2005 Jul 13. PMID: 16012800. ( PDF). 2. Robersy Sanchez, Jesús Barreto (2021) Genomic Abelian Finite Groups. doi: 10.1101/2021.06.01.446543. 3. M. V José, E.R. Morgado, R. Sánchez, T. Govezensky, 24 possible algebraic representations standard genetic code six three dimensions, Adv. Stud. Biol. 4 (2012) 119–152.PDF. 4. R. Sanchez. Symmetric Group Genetic–Code Cubes. Effect Genetic–Code Architecture Evolutionary Process MATCH Commun. Math. Comput. Chem. 79 (2018) 527-560. PDF.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/covid_19.html","id":"sars-coronavirus-gz02-vs-bat-sl-covzc45","dir":"Articles","previous_headings":"","what":"SARS coronavirus GZ02 vs bat-SL-CoVZC45","title":"Automorphism analysis on COVID-19 data","text":"","code":"URL <- paste0(\"https://github.com/genomaths/seqalignments/raw/master/\",          \"COVID-19/AY390556.1_265-13398_13398-21485_RNA-POL_SARS_COVI_GZ02.fas\")  covid_aln2 <- readDNAMultipleAlignment(filepath = URL) covid_aut <- automorphism(                     seq = covid_aln2,                     group = \"Z64\",                     cube = c(\"ACGT\", \"TGCA\"),                     cube_alt = c(\"CATG\", \"GTAC\"),                     verbose = FALSE)  covid_aut #> Automorphism object with 7100 ranges and 6 metadata columns: #>          seqnames    ranges strand |        seq1        seq2    coord1    coord2      autm        cube #>             <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> <numeric> <character> #>      [1]        1         1      + |         ATG         ATG        50        50         1        ACGT #>      [2]        1         2      + |         GAG         GAG        10        10         1        ACGT #>      [3]        1         3      + |         AGC         AGC        33        33         1        ACGT #>      [4]        1         4      + |         CTT         CTT        55        55         1        ACGT #>      [5]        1         5      + |         GTT         GTC        59        57        27        ACGT #>      ...      ...       ...    ... .         ...         ...       ...       ...       ...         ... #>   [7096]        1      7096      + |         CTT         CTT        55        55         1        ACGT #>   [7097]        1      7097      + |         GTT         GTT        59        59         1        ACGT #>   [7098]        1      7098      + |         AAT         AAC         3         1        43        ACGT #>   [7099]        1      7099      + |         AAC         AAC         1         1         1        ACGT #>   [7100]        1      7100      + |         TAA         TAA        12        12         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths counts <- table(covid_aut$cube[ covid_aut$autm != 1 | is.na(covid_aut$autm) ])  par(family = \"serif\", cex = 0.9, font = 2, mar=c(4,6,4,4)) barplot(counts, main=\"Automorphism distribution\",         xlab=\"Genetic-code cube representation\",         ylab=\"Fixed mutational events\",         col=c(\"darkblue\",\"red\", \"darkgreen\"),          border = NA, axes = FALSE, #ylim = c(0, 2000),          cex.lab = 2, cex.main = 1.5, cex.names = 2) axis(2, at = c(0, 500, 1000, 1500, 2000), cex.axis = 1.5) mtext(side = 1,line = -1.5, at = c(0.7, 1.9, 3.1, 4.3, 5.5),       text = paste0( counts ), cex = 1.4,       col = c(\"white\",\"yellow\", \"black\"))"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/covid_19.html","id":"analysis-of-conserved-regions","dir":"Articles","previous_headings":"","what":"Analysis of conserved regions","title":"Automorphism analysis on COVID-19 data","text":"Next, function fitCDF applied find best fitted probability function sizes conserved regions.   apply Bootstrap test Goodness fit, tt seems reasons reject hypothesis sizes conserved regions follows Generalized Gamma distribution.","code":"conserv2 <- conserved_regions(covid_aut) conserv2 #> AutomorphismByCoef object with 3813 ranges and 5 metadata columns: #>          seqnames    ranges strand |        seq1        seq2      autm    mut_type        cube #>             <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <character> <character> #>      [1]        1       1-4      + |         ATG         ATG         1         HHH        ACGT #>      [2]        1       1-4      + |         GAG         GAG         1         HHH        ACGT #>      [3]        1       1-4      + |         AGC         AGC         1         HHH        ACGT #>      [4]        1       1-4      + |         CTT         CTT         1         HHH        ACGT #>      [5]        1         7      + |         GGT         GGT         1         HHH        ACGT #>      ...      ...       ...    ... .         ...         ...       ...         ...         ... #>   [3809]        1 7093-7094      + |         GAT         GAT         1         HHH        ACGT #>   [3810]        1 7096-7097      + |         CTT         CTT         1         HHH        ACGT #>   [3811]        1 7096-7097      + |         GTT         GTT         1         HHH        ACGT #>   [3812]        1 7099-7100      + |         AAC         AAC         1         HHH        ACGT #>   [3813]        1 7099-7100      + |         TAA         TAA         1         HHH        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths widths <- width(conserv2) dist2 <- fitCDF(widths, distNames = c(2, 3, 7, 10, 11, 19, 20), plot = TRUE,                 loss.fun = \"cauchy\") #>  #> *** Fitting Log-normal distribution ... #> .Fitting Done. #>  #> *** Fitting Half-Normal distribution ... #> .Fitting Done. #>  #> *** Fitting Gamma distribution ... #> .Fitting Done. #>  #> *** Fitting Generalized 3P Gamma distribution ... #> .Fitting Done. #>  #> *** Fitting Weibull distribution ... #> .Fitting Done. #>  #> *** Fitting Exponential distribution ... #> .Fitting Done. #>  #> *** Fitting 2P Exponential distribution ... #> .Fitting Done. #>  * Estimating Studentized residuals for Generalized 3P Gamma distribution #>  * Plots for Generalized 3P Gamma distribution... dist2 #> ggamma CDF model #> ------ #> Parameters: #>          Estimate  Std. Error   t value   Pr(>|t|)     #> alpha 0.621461074 0.002930067 212.09793 < 2.22e-16 *** #> scale 0.970537071 0.021586713  44.95993 < 2.22e-16 *** #> psi   2.441111337 0.021649209 112.75753 < 2.22e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 1.973562e-05 on 3810 degrees of freedom #> Number of iterations to termination: 29  #> Reason for termination: Relative error in the sum of squares is at most `ftol'.  #>  #> Goodness of fit: #>     Adj.R.Square rho R.Cross.val       AIC #> gof            1   1   0.9998382 -29782.22 par(lwd = 0.5, cex.axis = 2, cex.lab =1.4,     cex.main = 2, mar=c(5,6,4,4), family = \"serif\") hist(widths, 14, freq = FALSE, las = 1, family = \"serif\", col = \"cyan1\", cex.main = 0.9, main = \"Histogram and best fitted CDF model for conserved region sizes\", xlab = \"Conserved region size\", yaxt = \"n\", ylab=\"\", cex.axis = 1.4) axis(side = 2, cex.axis = 1.4, las = 2) mtext(\"Density\", side = 2, cex = 1.4, line = 3.5)  x1 <- seq(1, 150, by = 1) txt <- TeX(r'($f(x) = \\frac{\\alpha}{\\beta\\Gamma(\\gamma)}{(\\frac{x}{\\beta})}            ^{\\alpha\\delta-1}e^{(-\\frac{x}{\\beta})^\\alpha}$)')  lines(x1, dggamma(x1,                   alpha = coef(dist2$bestfit)[1],                   scale = coef(dist2$bestfit)[2],                   psi = coef(dist2$bestfit)[3]                   ),       col = \"red\", lwd = 1) mtext(txt, side = 3, line = -4, cex = 1.4, adj = 0.7) mcgoftest(            varobj = widths,            model = dist2,           stat = \"ks\") #> *** Permutation GoF testing based on Kolmogorov-Smirnov statistic ( parametric approach )  ... #>       KS.stat.D      mc_p.value KS.stat.p.value     sample.size       num.sampl  #>       0.1671919       1.0000000       0.0000000    3813.0000000     999.0000000   mcgoftest(           varobj = widths,           model = dist2,           stat = \"rmse\",           breaks = 12) #> *** Permutation GoF testing based on Root Mean Square statistic ( parametric approach )  ... #>        rmse  mc_p.value sample.size   num.sampl  #>    13.75682     1.00000  3813.00000   999.00000"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/covid_19.html","id":"grouping-automorphism-by-automorphisms-coefficients--types-of-mutations","dir":"Articles","previous_headings":"Analysis of conserved regions","what":"Grouping automorphism by automorphism’s coefficients. Types of mutations","title":"Automorphism analysis on COVID-19 data","text":"Alignment gaps denoting indel mutations labeled “—”.","code":"autby_coef2 <- automorphismByCoef(covid_aut) autby_coef2 <- autby_coef2[ autby_coef2$autm != 1 & autby_coef2$autm != -1  ] counts2 <- table(autby_coef2$mut_type) counts2 <- sort(counts2, decreasing = TRUE) count. <- counts2[ counts2 > 9 ]  par(family = \"serif\", cex.axis = 2, font = 2, las = 1,      cex.main = 1.4, mar = c(6,3,4,4)) barplot(count., main=\"Automorphism distribution per Mutation type\",         col = colorRampPalette(c(\"red\", \"yellow\", \"blue\"))(36),          border = NA, axes = FALSE,las=2) axis(side = 2,  cex.axis = 2, line = -1.8 ) counts2 #>  #> HHY HHW HHR HHK HHM YHH RHH YHW HHS HRH RHW KHH YHK MHH --- YHR WHH MHW RHY RYH SHH HWH HYW MHK RHK HRR HMH KHW WHW YHM  #> 841 481 447 119  96  60  55  42  36  33  33  30  30  29  27  23  22  21  20  20  20  18  16  15  15  14  13  13  13  13  #> YHS HRY HYH HSH MHR HMW HWY HYY MHY SHR WHR HKY HMY RHR SHK WHM KHY KSH MHM RMH RRW RRY WSH KYH RMW RRH SHM SHW SHY YHY  #>  13  12  11  10  10   9   9   9   9   9   9   7   7   7   7   7   6   6   6   6   6   6   6   5   5   5   5   5   5   5  #> HKH HMR HSW HYR MRW RHM RYM WHK HKW HWK HWW HYM KHK KHM KHR KHS MMR MYH RHS RMR RRK RWW RYW RYY SMH WHY WSM HMK HMM HRK  #>   4   4   4   4   4   4   4   4   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   2   2   2  #> HSY HWM KMH KSM KWH MHS MMH MMM MMW MRH MRK RMY RSY RWK RWR RYK SYH WHS WKK WYK WYW YSH HMS HRM HRW HSK HWR HYK HYS KKK  #>   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   1   1   1   1   1   1   1   1  #> KMW KSW KWW KWY KYK KYW KYY MKH MSM MWH MWM MYK MYM MYR MYW RKH RKW RMK RRS RSH RSW RWY RYR SHS SKW SMK SMS SMW SRH SRM  #>   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1  #> SWK SWM SWS SWW SYW WKH WKM WMH WMK WMW WMY WRH WSW WSY WWH WWY WYM WYR WYS YKH YKR YMH YMM YMS YMW YRH YWH YWM YWS YWY  #>   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1  #> YYH  #>   1"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/covid_19.html","id":"sars-coronavirus-gz02-vs-bat-sl-covzc45-and-bat-sars-like-coronavirus-isolate-rs7327","dir":"Articles","previous_headings":"","what":"SARS coronavirus GZ02 vs bat-SL-CoVZC45 and Bat SARS-like coronavirus isolate Rs7327","title":"Automorphism analysis on COVID-19 data","text":"Joining datasets increases sample size improved predictions respect comparison SARS coronavirus GZ02 vs Bat SARS-like coronavirus alone.","code":"data(covid_autm, package = \"GenomAutomorphism\") covid_autm #> Automorphism object with 9722 ranges and 6 metadata columns: #>          seqnames    ranges strand |        seq1        seq2    coord1    coord2      autm        cube #>             <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> <numeric> <character> #>      [1]        1         1      + |         ATG         ATG        50        50         1        ACGT #>      [2]        1         2      + |         GAG         GAG        10        10         1        ACGT #>      [3]        1         3      + |         AGC         AGC        33        33         1        ACGT #>      [4]        1         4      + |         CTT         CTT        55        55         1        ACGT #>      [5]        1         5      + |         GTT         GTT        59        59         1        ACGT #>      ...      ...       ...    ... .         ...         ...       ...       ...       ...         ... #>   [9718]        1      9718      + |         TCA         TCA        28        28         1        ACGT #>   [9719]        1      9719      + |         ACT         ACT        19        19         1        ACGT #>   [9720]        1      9720      + |         CAG         CAG         6         6         1        ACGT #>   [9721]        1      9721      + |         GCA         GCA        24        24         1        ACGT #>   [9722]        1      9722      + |         TAA         TAA        12        12         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths conserv <- conserved_regions(covid_autm) conserv #> AutomorphismByCoef object with 6348 ranges and 5 metadata columns: #>          seqnames    ranges strand |        seq1        seq2      autm    mut_type        cube #>             <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <character> <character> #>      [1]        1      1-19      + |         ATG         ATG         1         HHH        ACGT #>      [2]        1      1-19      + |         GAG         GAG         1         HHH        ACGT #>      [3]        1      1-19      + |         AGC         AGC         1         HHH        ACGT #>      [4]        1      1-19      + |         CTT         CTT         1         HHH        ACGT #>      [5]        1      1-19      + |         GTT         GTT         1         HHH        ACGT #>      ...      ...       ...    ... .         ...         ...       ...         ...         ... #>   [6344]        1 9683-9722      + |         GGA         GGA         1         HHH        ACGT #>   [6345]        1 9683-9722      + |         TCT         TCT         1         HHH        ACGT #>   [6346]        1 9683-9722      + |         TCA         TCA         1         HHH        ACGT #>   [6347]        1 9683-9722      + |         GCA         GCA         1         HHH        ACGT #>   [6348]        1 9683-9722      + |         TAA         TAA         1         HHH        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths consvr <- c(conserv, conserv2) widths <- width(consvr) dist <- fitCDF(widths, distNames = c(2, 3, 7, 10, 11, 19, 20), plot = TRUE,                 loss.fun = \"cauchy\") #>  #> *** Fitting Log-normal distribution ... #> .Fitting Done. #>  #> *** Fitting Half-Normal distribution ... #> .Fitting Done. #>  #> *** Fitting Gamma distribution ... #> .Fitting Done. #>  #> *** Fitting Generalized 3P Gamma distribution ... #> .Fitting Done. #>  #> *** Fitting Weibull distribution ... #> .Fitting Done. #>  #> *** Fitting Exponential distribution ... #> .Fitting Done. #>  #> *** Fitting 2P Exponential distribution ... #> .Fitting Done. #>  * Estimating Studentized residuals for Generalized 3P Gamma distribution #>  * Plots for Generalized 3P Gamma distribution... dist #> ggamma CDF model #> ------ #> Parameters: #>          Estimate  Std. Error   t value   Pr(>|t|)     #> alpha 0.381621931 0.002040595 187.01507 < 2.22e-16 *** #> scale 0.492128654 0.022620932  21.75545 < 2.22e-16 *** #> psi   3.452723567 0.035559333  97.09753 < 2.22e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 6.55254e-05 on 10158 degrees of freedom #> Number of iterations to termination: 41  #> Reason for termination: Relative error in the sum of squares is at most `ftol'.  #>  #> Goodness of fit: #>     Adj.R.Square       rho R.Cross.val      AIC #> gof    0.9999999 0.9999999   0.9995317 -67874.9 par(lwd = 0.5, cex.axis = 2, cex.lab =1.4,     cex.main = 2, mar=c(5,6,4,4), family = \"serif\") hist(widths, 14, freq = FALSE, las = 1, family = \"serif\", col = \"cyan1\", cex.main = 0.9, main = \"Histogram and best fitted CDF model for conserved region sizes\", xlab = \"Conserved region size\", yaxt = \"n\", ylab=\"\", cex.axis = 1.4) axis(side = 2, cex.axis = 1.4, las = 2) mtext(\"Density\", side = 2, cex = 1.4, line = 3.5)  x1 <- seq(1, 150, by = 1) txt <- TeX(r'($f(x) = \\frac{\\alpha}{\\beta\\Gamma(\\gamma)}{(\\frac{x}{\\beta})}            ^{\\alpha\\delta-1}e^{(-\\frac{x}{\\beta})^\\alpha}$)')  lines(x1, dggamma(x1,                   alpha = coef(dist$bestfit)[1],                   scale = coef(dist$bestfit)[2],                   psi = coef(dist$bestfit)[3]                   ),       col = \"red\", lwd = 1) mtext(txt, side = 3, line = -4, cex = 1.4, adj = 0.7) mcgoftest(            varobj = widths,            model = dist,           stat = \"ks\") #> *** Permutation GoF testing based on Kolmogorov-Smirnov statistic ( parametric approach )  ... #>       KS.stat.D      mc_p.value KS.stat.p.value     sample.size       num.sampl  #>    8.707602e-02    1.000000e+00    0.000000e+00    1.016100e+04    9.990000e+02  cat(\"\\n===========================\\n\") #>  #> =========================== mcgoftest(           varobj = widths,           model = dist,           stat = \"rmse\",           breaks = 12) #> *** Permutation GoF testing based on Root Mean Square statistic ( parametric approach )  ... #>        rmse  mc_p.value sample.size   num.sampl  #>    29.19551     1.00000 10161.00000   999.00000"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/covid_19.html","id":"grouping-automorphism-by-automorphisms-coefficients","dir":"Articles","previous_headings":"SARS coronavirus GZ02 vs bat-SL-CoVZC45 and Bat SARS-like coronavirus isolate Rs7327","what":"Grouping automorphism by automorphism’s coefficients","title":"Automorphism analysis on COVID-19 data","text":"Alignment gaps denoting indel mutations labeled “—”.","code":"autby_coef <- automorphismByCoef(covid_autm) autby_coef <- c(autby_coef, autby_coef2) autby_coef <- autby_coef[ autby_coef$autm != 1 & autby_coef$autm != -1  ] counts <- table(autby_coef$mut_type) counts <- sort(counts, decreasing = TRUE) count. <- counts[ counts > 9 ]  par(family = \"serif\", cex.axis = 2, font = 2, las = 1,      cex.main = 1.4, cex.lab = 2, mar = c(6,4,4,1)) barplot(count., main=\"Automorphism distribution per Mutation type\",         col = colorRampPalette(c(\"red\", \"yellow\", \"blue\"))(36),          border = NA, axes = FALSE,las=2) axis(side = 2,  cex.axis = 2, line = -1.8 ) counts},{"path":"https://genomaths.github.io/GenomAutomorphism/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Robersy Sanchez. Author, maintainer.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sanchez R (2022). GenomAutomorphism: Package (One Line, Title Case). R package version 0.1, https://github.com/genomaths/GenomAutomorphism.","code":"@Manual{,   title = {GenomAutomorphism: What the Package Does (One Line, Title Case)},   author = {Robersy Sanchez},   year = {2022},   note = {R package version 0.1},   url = {https://github.com/genomaths/GenomAutomorphism}, }"},{"path":"https://genomaths.github.io/GenomAutomorphism/index.html","id":"genomautomorphism-","dir":"","previous_headings":"","what":"What the Package Does (One Line, Title Case)","title":"What the Package Does (One Line, Title Case)","text":"Robersy Sanchez Department Biology. Eberly College Science. Pennsylvania State University, University Park, PA 16802rus547@psu.eduORCID: orcid.org/0000-0002-5246-1453","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"What the Package Does (One Line, Title Case)","text":"R package compute autimorphisms pairwise aligned DNA sequences represented elements Genomic Abelian group described paper Genomic Abelian Finite Groups. general scenario, whole chromosomes genomic regions population (species close related species) can algebraically represented direct sum cyclic groups specifically Abelian p-groups. Basically, propose representation multiple sequence alignments (MSA) length N finite Abelian group created direct sum homocyclic Abelian group prime-power order:    G = (ℤp1α1)n1 ⊕ (ℤp1α2)n2 ⊕ … ⊕ (ℤpkαk)nk , pi’s prime numbers, αi ∈ ℕ ℤpiαi group integer modulo piαi. purpose automorphism two aligned DNA sequences, piαi ∈ {5, 26, 53}.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/index.html","id":"status","dir":"","previous_headings":"","what":"Status","title":"What the Package Does (One Line, Title Case)","text":"application development. Watch repo check updates.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/index.html","id":"tutotials","dir":"","previous_headings":"","what":"Tutotials","title":"What the Package Does (One Line, Title Case)","text":"several tutorials use package GenomAutomorphism website","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/index.html","id":"dependences","dir":"","previous_headings":"","what":"Dependences","title":"What the Package Does (One Line, Title Case)","text":"package depends, far, : Biostrings, GenomicRanges, numbers, S4Vectors.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/index.html","id":"installation-of-r-dependencies","dir":"","previous_headings":"","what":"Installation of R dependencies:","title":"What the Package Does (One Line, Title Case)","text":"","code":"if (!requireNamespace(\"BiocManager\")) install.packages(\"BiocManager\")     BiocManager::install()          BiocManager::install(c(\"Biostrings\", \"GenomicRanges\", \"S4Vectors\"))     install.packages(c(\"numbers\", \"devtools\"), dependencies=TRUE)"},{"path":"https://genomaths.github.io/GenomAutomorphism/index.html","id":"you-can-install-genomautomorphism-package-from-github","dir":"","previous_headings":"","what":"You can install GenomAutomorphism package from GitHub","title":"What the Package Does (One Line, Title Case)","text":"","code":"devtools::install_git(\"https://github.com/genomaths/GenomAutomorphism.git\")"},{"path":"https://genomaths.github.io/GenomAutomorphism/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"What the Package Does (One Line, Title Case)","text":"Sanchez R, Morgado E, Grau R. Gene algebra genetic code algebraic structure. J Math Biol. 2005 Oct;51(4):431-57. doi: 10.1007/s00285-005-0332-8. Epub 2005 Jul 13. PMID: 16012800. ( PDF). Sanchez R, Grau R, Morgado E. novel Lie algebra genetic code Galois field four DNA bases. Math Biosci. 2006;202: 156–174. doi:10.1016/j.mbs.2006.03.017 Sanchez R, Grau R. algebraic hypothesis primeval genetic code architecture. Math Biosci. 2009/07/18. 2009;221: 60–76. doi:S0025-5564(09)00114-X [pii] 10.1016/j.mbs.2009.07.001 Robersy Sanchez, Jesús Barreto (2021) Genomic Abelian Finite Groups. doi: 10.1101/2021.06.01.446543. M. V José, E.R. Morgado, R. Sánchez, T. Govezensky, 24 possible algebraic representations standard genetic code six three dimensions, Adv. Stud. Biol. 4 (2012) 119–152.PDF. R. Sanchez. Symmetric Group Genetic–Code Cubes. Effect Genetic–Code Architecture Evolutionary Process MATCH Commun. Math. Comput. Chem. 79 (2018) 527-560. PDF.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/index.html","id":"see-also","dir":"","previous_headings":"","what":"See also","title":"What the Package Does (One Line, Title Case)","text":"Symmetric Group Genetic-Code Cubes","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/Automorphism.html","id":null,"dir":"Reference","previous_headings":"","what":"A class definition to store codon automorphisms in given in the\nAbelian group representation. — Automorphism-class","title":"A class definition to store codon automorphisms in given in the\nAbelian group representation. — Automorphism-class","text":"Two classes involved storing codon automorphisms: Automorphism-class AutomorphismList-class. class definition store list Automorphism class objects derived pairwise automorphism estimation pairwise alignments. function build AutomorphismList-class object list DataFrame Automorphism class object.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/Automorphism.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A class definition to store codon automorphisms in given in the\nAbelian group representation. — Automorphism-class","text":"","code":"valid.Automorphism.mcols(x)  as.AutomorphismList(x, ...)  # S4 method for GRangesList as.AutomorphismList(x, ...)  # S4 method for list as.AutomorphismList(x, grs = GRanges(), ...)  # S4 method for AutomorphismList names(x)  # S4 method for AutomorphismList names(x) <- value  # S4 method for AutomorphismList as.list(x)  valid.AutomorphismList(x)  valid.AutomorphismByCoef(x)  valid.AutomorphismByCoefList(x)  valid.ConservedRegion(x)  valid.ConservedRegionList(x)"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/Automorphism.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A class definition to store codon automorphisms in given in the\nAbelian group representation. — Automorphism-class","text":"x 'ConservedRegionList object' gr GRanges","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/Automorphism.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A class definition to store codon automorphisms in given in the\nAbelian group representation. — Automorphism-class","text":"Automorphism-class method.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/Automorphism.html","id":"as-from-automorphism-","dir":"Reference","previous_headings":"","what":"as(from, \"Automorphism\")","title":"A class definition to store codon automorphisms in given in the\nAbelian group representation. — Automorphism-class","text":"Permits transformation data.frame DataFrame-class object Automorphism-class object proper columns provided. Automorphism-class object six columns: \"seq1\", \"seq2\", \"coord1\", \"coord2\", \"autm\", \"cube\". See examples function automorphism. Observe Automorphism-class inherits GRanges-class transformation starting GRanges-class object Automorphism-class straightforward. However, transformation starting data.frame DataFrame-class object \\(\"x\"\\) requires creation additional GRanges-class object, default argument seqnames = \"1\", strand = \"+\" start/end = 1:nrow(x), length = nrow(x). details must keep mind prevent fundamental errors downstream analyses.","code":""},{"path":[]},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/Automorphism.html","id":"as-automorphismlist","dir":"Reference","previous_headings":"","what":"as.AutomorphismList","title":"A class definition to store codon automorphisms in given in the\nAbelian group representation. — Automorphism-class","text":".AutomorphismList function transform list GRanges-class, GRangesList-class, list data.frame DataFrame-class objects AutomorphismList-class object.","code":""},{"path":[]},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/BaseGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"A class definition to store codon automorphisms in given in the\nAbelian group representation. — BaseGroup-class","title":"A class definition to store codon automorphisms in given in the\nAbelian group representation. — BaseGroup-class","text":"class definition store codon automorphisms given Abelian group representation. Valid BaseGroup mcols Valid 'BaseGroup' inheritance 'GRanges' class","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/BaseGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A class definition to store codon automorphisms in given in the\nAbelian group representation. — BaseGroup-class","text":"","code":"valid.BaseGroup.elem(x)  valid.GRanges(x)"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/BaseGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A class definition to store codon automorphisms in given in the\nAbelian group representation. — BaseGroup-class","text":"x 'BaseGroup object'","code":""},{"path":[]},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/CodonGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"A class definition to store codon automorphisms in given in the\nAbelian group representation. — CodonGroup-class","title":"A class definition to store codon automorphisms in given in the\nAbelian group representation. — CodonGroup-class","text":"class definition store codon automorphisms given Abelian group representation. Valid CodonGroup mcols","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/CodonGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A class definition to store codon automorphisms in given in the\nAbelian group representation. — CodonGroup-class","text":"","code":"valid.CodonGroup.mcols(x)"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/CodonGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A class definition to store codon automorphisms in given in the\nAbelian group representation. — CodonGroup-class","text":"x 'CodonGroup' object","code":""},{"path":[]},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/CodonSeq.html","id":null,"dir":"Reference","previous_headings":"","what":"A class definition to store codon coordinates given in the Abelian\ngroup and the codon sequence. — CodonSeq-class","title":"A class definition to store codon coordinates given in the Abelian\ngroup and the codon sequence. — CodonSeq-class","text":"objects 'CodonSeq' 'MatrixList' class returned function get_coord. object store coordinate sequence list 3D-vectors list vectors located slot named 'CoordList'. original codon sequence (provided) stored slot named 'SeqRanges'.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/allClasses.html","id":null,"dir":"Reference","previous_headings":"","what":"Show method for 'AutomorphismList' class object — MatrixList-class","title":"Show method for 'AutomorphismList' class object — MatrixList-class","text":"Show method 'AutomorphismList' class object Show method 'CodonSeq' class object Show method 'MatrixList' class object","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/allClasses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show method for 'AutomorphismList' class object — MatrixList-class","text":"","code":"# S4 method for AutomorphismList show(object)  # S4 method for CodonSeq show(object)  # S4 method for MatrixList show(object)"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/allClasses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show method for 'AutomorphismList' class object — MatrixList-class","text":"object object 'MatrixList' class","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/aln.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated DNAStringSet class object — aln","title":"Simulated DNAStringSet class object — aln","text":"DNAStringSet carrying small pairwise DNA sequence alignment used examples provided package functions.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/aln.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated DNAStringSet class object — aln","text":"","code":"aln"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/aln.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated DNAStringSet class object — aln","text":"DNAStringSet class object.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/aut3D.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z5^3. — aut3D","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z5^3. — aut3D","text":"Given two codon sequences represented Z5^3 Abelian group, function computes automorphisms describing codon mutational events.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/aut3D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z5^3. — aut3D","text":"","code":"aut3D(   seq = NULL,   filepath = NULL,   cube = c(\"ACGT\", \"TGCA\"),   cube_alt = c(\"CATG\", \"GTAC\"),   start = NA,   end = NA,   chr = 1L,   strand = \"+\",   num.cores = detectCores() - 1,   tasks = 0L,   verbose = TRUE )"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/aut3D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z5^3. — aut3D","text":"seq object DNAStringSet DNAMultipleAlignment class carrying DNA pairwise alignment two sequences. pairwise alignment provided argument seq 'fasta' file filepath must correspond codon sequences. filepath character vector containing path file fasta format read. argument must given codon & base arguments provided. cube, cube_alt character string denoting pairs 24 Genetic-code cubes, given references (2-3). , base pairs given cubes must complementary . cube pair call dual cubes , shown reference (3), pair integrates group. start, end, chr, strand Optional parameters required build GRanges-class. provided default values given function definition used. num.cores, tasks Parameters parallel computation using package BiocParallel-package: number cores use, .e. many child processes run simultaneously (see bplapply number tasks per job (Linux OS). verbose TRUE, prints progress bar. group character string denoting group representation given base codon shown reference (1).","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/aut3D.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z5^3. — aut3D","text":"object Automorphism-class four columns metacolumn named: seq1, seq2, autm, cube.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/aut3D.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z5^3. — aut3D","text":"Automorphisms Z5^3' described functions \\(f(x) = x mod Z5\\), diagonal matrix, noticed reference (4).","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/aut3D.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z5^3. — aut3D","text":"Sanchez R, Morgado E, Grau R. Gene algebra genetic code algebraic structure. J Math Biol. 2005 Oct;51(4):431-57. doi: 10.1007/s00285-005-0332-8. Epub 2005 Jul 13. PMID: 16012800. ( PDF). Robersy Sanchez, Jesús Barreto (2021) Genomic Abelian Finite Groups. doi: 10.1101/2021.06.01.446543. M. V José, E.R. Morgado, R. Sánchez, T. Govezensky, 24 possible algebraic representations standard genetic code six three dimensions, Adv. Stud. Biol. 4 (2012) 119–152.PDF. R. Sanchez. Symmetric Group Genetic–Code Cubes. Effect Genetic–Code Architecture Evolutionary Process MATCH Commun. Math. Comput. Chem. 79 (2018) 527-560. PDF.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/aut3D.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z5^3. — aut3D","text":"","code":"## Load a pairwise alignment data(aln, package = \"GenomAutomorphism\") aln #> DNAStringSet object of length 2: #>     width seq #> [1]    51 ACCTATGTTGGTATT---GCGCTCCAACTCCTTGGCTCTAGCTCACTACAT #> [2]    51 ATCTATGTTGGTATTACGACGCTCCAATTCCTTGGGTCC------CTCCTT  ## Automorphism on Z5^3 autms <- aut3D(seq = aln) #> Error in validObject(.Object): invalid class “CodonGroup” object:  #>     *** Argument 'x' is not a CodonGroup-class object.The slot 'group' is #>     not present or wrong naming. autms #> Error in eval(expr, envir, enclos): object 'autms' not found"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ125.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z125. — autZ125","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z125. — autZ125","text":"Given two codon sequences represented Z125 Abelian group, function computes automorphisms describing codon mutational events.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ125.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z125. — autZ125","text":"","code":"autZ125(   seq = NULL,   filepath = NULL,   cube = c(\"ACGT\", \"TGCA\"),   cube_alt = c(\"CATG\", \"GTAC\"),   start = NA,   end = NA,   chr = 1L,   strand = \"+\",   num.cores = detectCores() - 1,   tasks = 0L,   verbose = TRUE )"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ125.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z125. — autZ125","text":"seq object DNAStringSet DNAMultipleAlignment class carrying DNA pairwise alignment two sequences. pairwise alignment provided argument seq 'fasta' file filepath must correspond codon sequences. filepath character vector containing path file fasta format read. argument must given codon & base arguments provided. cube, cube_alt character string denoting pairs 24 Genetic-code cubes, given references (2-3). , base pairs given cubes must complementary . cube pair call dual cubes , shown reference (3), pair integrates group. start, end, chr, strand Optional parameters required build GRanges-class. provided default values given function definition used. num.cores, tasks Parameters parallel computation using package BiocParallel-package: number cores use, .e. many child processes run simultaneously (see bplapply number tasks per job (Linux OS). verbose TRUE, prints progress bar. group character string denoting group representation given base codon shown reference (1).","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ125.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z125. — autZ125","text":"object Automorphism-class four columns metacolumn named: seq1, seq2, autm, cube.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ125.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z125. — autZ125","text":"Automorphisms Z125 described functions \\(f(x) = k x mod 64\\), k x elements set integers modulo 64. noticed reference (1)","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ125.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z125. — autZ125","text":"Sanchez R, Morgado E, Grau R. Gene algebra genetic code algebraic structure. J Math Biol. 2005 Oct;51(4):431-57. doi: 10.1007/s00285-005-0332-8. Epub 2005 Jul 13. PMID: 16012800. ( PDF). Robersy Sanchez, Jesús Barreto (2021) Genomic Abelian Finite Groups. doi: 10.1101/2021.06.01.446543. M. V José, E.R. Morgado, R. Sánchez, T. Govezensky, 24 possible algebraic representations standard genetic code six three dimensions, Adv. Stud. Biol. 4 (2012) 119–152.PDF. R. Sanchez. Symmetric Group Genetic–Code Cubes. Effect Genetic–Code Architecture Evolutionary Process MATCH Commun. Math. Comput. Chem. 79 (2018) 527-560. PDF.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ125.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z125. — autZ125","text":"","code":"## Load a pairwise alignment data(aln) aln #> DNAStringSet object of length 2: #>     width seq #> [1]    51 ACCTATGTTGGTATT---GCGCTCCAACTCCTTGGCTCTAGCTCACTACAT #> [2]    51 ATCTATGTTGGTATTACGACGCTCCAATTCCTTGGGTCC------CTCCTT  ## Automorphism on Z125 autms <- autZ125(seq = aln) #>    |                                                                               |                                                                      |   0%   |                                                                               |=======                                                               |  10%   |                                                                               |==============                                                        |  20%   |                                                                               |=====================                                                 |  30%   |                                                                               |============================                                          |  40%   |                                                                               |===================================                                   |  50%   |                                                                               |==========================================                            |  60%   |                                                                               |=================================================                     |  70%   |                                                                               |========================================================              |  80%   |                                                                               |===============================================================       |  90%   |                                                                               |======================================================================| 100% #>  autms #> Automorphism object with 17 ranges and 6 metadata columns: #>        seqnames    ranges strand |        seq1        seq2    coord1    coord2 #>           <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> #>    [1]        1         1      + |         ACC         ATC        57       107 #>    [2]        1         2      + |         TAT         TAT        49        49 #>    [3]        1         3      + |         GTT         GTT       119       119 #>    [4]        1         4      + |         GGT         GGT        94        94 #>    [5]        1         5      + |         ATT         ATT       109       109 #>    ...      ...       ...    ... .         ...         ...       ...       ... #>   [13]        1        13      + |         TCT         TCC        74        72 #>   [14]        1        14      + |         AGC         ---        82         0 #>   [15]        1        15      + |         TCA         ---        71         0 #>   [16]        1        16      + |         CTA         CTC       111       112 #>   [17]        1        17      + |         CAT         CTT        39       114 #>             autm        cube #>        <numeric> <character> #>    [1]        26        ACGT #>    [2]         1        ACGT #>    [3]         1        ACGT #>    [4]         1        ACGT #>    [5]         1        ACGT #>    ...       ...         ... #>   [13]        28        ACGT #>   [14]         0        Trnl #>   [15]         0        Trnl #>   [16]       117        ACGT #>   [17]        51        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ5.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z5. — autZ5","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z5. — autZ5","text":"Given two codon sequences represented Z5 Abelian group, function computes automorphisms describing codon mutational events.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z5. — autZ5","text":"","code":"autZ5(   seq = NULL,   filepath = NULL,   cube = c(\"ACGT\", \"TGCA\"),   cube_alt = c(\"CATG\", \"GTAC\"),   start = NA,   end = NA,   chr = 1L,   strand = \"+\",   num.cores = detectCores() - 1,   tasks = 0L,   verbose = TRUE )"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ5.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z5. — autZ5","text":"seq object DNAStringSet DNAMultipleAlignment class carrying DNA pairwise alignment two sequences. filepath character vector containing path file fasta format read. argument must given codon & base arguments provided. cube, cube_alt character string denoting pairs 24 Genetic-code cubes, given references (2-3). , base pairs given cubes must complementary . cube pair call dual cubes , shown reference (3), pair integrates group. start, end, chr, strand Optional parameters required build GRanges-class. provided default values given function definition used. num.cores, tasks Parameters parallel computation using package BiocParallel-package: number cores use, .e. many child processes run simultaneously (see bplapply number tasks per job (Linux OS). verbose TRUE, prints progress bar. group character string denoting group representation given base codon shown reference (1).","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ5.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z5. — autZ5","text":"object Automorphism-class four columns metacolumn named: seq1, seq2, autm, cube.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ5.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z5. — autZ5","text":"Automorphisms Z5 described functions \\(f(x) = k x mod 64\\), k x elements set integers modulo 64. noticed reference (1). pairwise alignment provided argument seq 'fasta' file filepath must correspond DNA base sequences.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ5.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z5. — autZ5","text":"Sanchez R, Morgado E, Grau R. Gene algebra genetic code algebraic structure. J Math Biol. 2005 Oct;51(4):431-57. doi: 10.1007/s00285-005-0332-8. Epub 2005 Jul 13. PMID: 16012800. ( PDF). Robersy Sanchez, Jesús Barreto (2021) Genomic Abelian Finite Groups. doi: 10.1101/2021.06.01.446543. M. V José, E.R. Morgado, R. Sánchez, T. Govezensky, 24 possible algebraic representations standard genetic code six three dimensions, Adv. Stud. Biol. 4 (2012) 119–152.PDF. R. Sanchez. Symmetric Group Genetic–Code Cubes. Effect Genetic–Code Architecture Evolutionary Process MATCH Commun. Math. Comput. Chem. 79 (2018) 527-560. PDF.","code":""},{"path":[]},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ5.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z5. — autZ5","text":"","code":"## Load a pairwise alignment data(aln, package = \"GenomAutomorphism\") aln #> DNAStringSet object of length 2: #>     width seq #> [1]    51 ACCTATGTTGGTATT---GCGCTCCAACTCCTTGGCTCTAGCTCACTACAT #> [2]    51 ATCTATGTTGGTATTACGACGCTCCAATTCCTTGGGTCC------CTCCTT  ## Automorphism on Z5 autms <- autZ5(seq = aln) #>    |                                                                               |                                                                      |   0%   |                                                                               |====                                                                  |   6%   |                                                                               |=========                                                             |  12%   |                                                                               |=============                                                         |  19%   |                                                                               |==================                                                    |  25%   |                                                                               |======================                                                |  31%   |                                                                               |==========================                                            |  38%   |                                                                               |===============================                                       |  44%   |                                                                               |===================================                                   |  50%   |                                                                               |=======================================                               |  56%   |                                                                               |============================================                          |  62%   |                                                                               |================================================                      |  69%   |                                                                               |====================================================                  |  75%   |                                                                               |=========================================================             |  81%   |                                                                               |=============================================================         |  88%   |                                                                               |==================================================================    |  94%   |                                                                               |======================================================================| 100% #>  autms #> Automorphism object with 51 ranges and 6 metadata columns: #>        seqnames    ranges strand |        seq1        seq2    coord1    coord2 #>           <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> #>    [1]        1         1      + |           A           A         1         1 #>    [2]        1         2      + |           C           T         2         4 #>    [3]        1         3      + |           C           C         2         2 #>    [4]        1         4      + |           T           T         4         4 #>    [5]        1         5      + |           A           A         1         1 #>    ...      ...       ...    ... .         ...         ...       ...       ... #>   [47]        1        47      + |           T           T         4         4 #>   [48]        1        48      + |           A           C         1         2 #>   [49]        1        49      + |           C           C         2         2 #>   [50]        1        50      + |           A           T         1         4 #>   [51]        1        51      + |           T           T         4         4 #>             autm        cube #>        <numeric> <character> #>    [1]         1        ACGT #>    [2]         2        ACGT #>    [3]         1        ACGT #>    [4]         1        ACGT #>    [5]         1        ACGT #>    ...       ...         ... #>   [47]         1        ACGT #>   [48]         2        ACGT #>   [49]         1        ACGT #>   [50]         4        ACGT #>   [51]         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ64.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z64. — autZ64","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z64. — autZ64","text":"Given two codon sequences represented Z64 Abelian group, function computes automorphisms describing codon mutational events.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ64.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z64. — autZ64","text":"","code":"autZ64(   seq = NULL,   filepath = NULL,   cube = c(\"ACGT\", \"TGCA\"),   cube_alt = c(\"CATG\", \"GTAC\"),   start = NA,   end = NA,   chr = 1L,   strand = \"+\",   num.cores = detectCores() - 1,   tasks = 0L,   verbose = TRUE )"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ64.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z64. — autZ64","text":"seq object DNAStringSet DNAMultipleAlignment class carrying DNA pairwise alignment two sequences. pairwise alignment provided argument seq 'fasta' file filepath must correspond codon sequences. filepath character vector containing path file fasta format read. argument must given codon & base arguments provided. cube, cube_alt character string denoting pairs 24 Genetic-code cubes, given references (2-3). , base pairs given cubes must complementary . cube pair call dual cubes , shown reference (3), pair integrates group. start, end, chr, strand Optional parameters required build GRanges-class. provided default values given function definition used. num.cores, tasks Parameters parallel computation using package BiocParallel-package: number cores use, .e. many child processes run simultaneously (see bplapply number tasks per job (Linux OS). verbose TRUE, prints progress bar. group character string denoting group representation given base codon shown reference (1).","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ64.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z64. — autZ64","text":"object Automorphism-class four columns metacolumn named: seq1, seq2, autm, cube.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ64.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z64. — autZ64","text":"Automorphisms Z64 described functions \\(f(x) = k x mod 64\\), k x elements set integers modulo 64.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ64.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z64. — autZ64","text":"Sanchez R, Morgado E, Grau R. Gene algebra genetic code algebraic structure. J Math Biol. 2005 Oct;51(4):431-57. doi: 10.1007/s00285-005-0332-8. Epub 2005 Jul 13. PMID: 16012800. ( PDF). Robersy Sanchez, Jesús Barreto (2021) Genomic Abelian Finite Groups. doi: 10.1101/2021.06.01.446543. M. V José, E.R. Morgado, R. Sánchez, T. Govezensky, 24 possible algebraic representations standard genetic code six three dimensions, Adv. Stud. Biol. 4 (2012) 119–152.PDF. R. Sanchez. Symmetric Group Genetic–Code Cubes. Effect Genetic–Code Architecture Evolutionary Process MATCH Commun. Math. Comput. Chem. 79 (2018) 527-560. PDF.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ64.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z64. — autZ64","text":"","code":"## Load a pairwise alignment data(aln) aln #> DNAStringSet object of length 2: #>     width seq #> [1]    51 ACCTATGTTGGTATT---GCGCTCCAACTCCTTGGCTCTAGCTCACTACAT #> [2]    51 ATCTATGTTGGTATTACGACGCTCCAATTCCTTGGGTCC------CTCCTT  ## Automorphism on Z64 autms <- autZ64(seq = aln) #>    |                                                                               |                                                                      |   0%   |                                                                               |=======                                                               |  10%   |                                                                               |==============                                                        |  20%   |                                                                               |=====================                                                 |  30%   |                                                                               |============================                                          |  40%   |                                                                               |===================================                                   |  50%   |                                                                               |==========================================                            |  60%   |                                                                               |=================================================                     |  70%   |                                                                               |========================================================              |  80%   |                                                                               |===============================================================       |  90%   |                                                                               |======================================================================| 100% #>  autms #> Automorphism object with 17 ranges and 6 metadata columns: #>        seqnames    ranges strand |        seq1        seq2    coord1    coord2 #>           <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> #>    [1]        1         1      + |         ACC         ATC        17        49 #>    [2]        1         2      + |         TAT         TAT        15        15 #>    [3]        1         3      + |         GTT         GTT        59        59 #>    [4]        1         4      + |         GGT         GGT        43        43 #>    [5]        1         5      + |         ATT         ATT        51        51 #>    ...      ...       ...    ... .         ...         ...       ...       ... #>   [13]        1        13      + |         TCT         TCC        31        29 #>   [14]        1        14      + |         AGC         ---        33        NA #>   [15]        1        15      + |         TCA         ---        28        NA #>   [16]        1        16      - |         CTA         CTC        52        53 #>   [17]        1        17      + |         CAT         CTT         7        55 #>             autm        cube #>        <numeric> <character> #>    [1]        33        ACGT #>    [2]         1        ACGT #>    [3]         1        ACGT #>    [4]         1        ACGT #>    [5]         1        ACGT #>    ...       ...         ... #>   [13]         3        ACGT #>   [14]         0        Trnl #>   [15]         0        Trnl #>   [16]        30        TGCA #>   [17]        17        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autby_coef.html","id":null,"dir":"Reference","previous_headings":"","what":"Automorphisms between DNA Primate BRCA1 Genes Grouped by Coefficients — autby_coef","title":"Automorphisms between DNA Primate BRCA1 Genes Grouped by Coefficients — autby_coef","text":"AutomorphismList object carrying list pairwise automorphisms DNA sequences MSA primate somatic cytochrome C grouped automorphism's coefficients. grouping derives dataset brca1_autm applying function automorphismByCoef.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autby_coef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automorphisms between DNA Primate BRCA1 Genes Grouped by Coefficients — autby_coef","text":"","code":"autby_coef"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autby_coef.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Automorphisms between DNA Primate BRCA1 Genes Grouped by Coefficients — autby_coef","text":"AutomorphismByCoefList class object.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autm.html","id":null,"dir":"Reference","previous_headings":"","what":"Automorphisms between DNA Sequences from two COVID-19 genomes — autm","title":"Automorphisms between DNA Sequences from two COVID-19 genomes — autm","text":"AutomorphismList object carrying list pairwise automorphisms SARS coronavirus GZ02 (GenBank: AY390556.1: 265-13398_13398-21485) Bat SARS-like coronavirus isolate bat-SL-CoVZC45 (GenBank: MG772933.1:265-1345513455-21542), nonstructural_polyprotein. pairwise DNA sequence alignment available dataset named covid_aln automorphisms estimated function autZ64.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automorphisms between DNA Sequences from two COVID-19 genomes — autm","text":"","code":"autm"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autm.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Automorphisms between DNA Sequences from two COVID-19 genomes — autm","text":"AutomorphismList class object.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphism.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in a Given Abelian group. — automorphism","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in a Given Abelian group. — automorphism","text":"Given two codon sequences represented given Abelian group, function computes automorphisms describing codon mutational events. Basically, function wrapping call corresponding function specified Abelian group.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphism.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in a Given Abelian group. — automorphism","text":"","code":"automorphism(seqs = NULL, filepath = NULL, group = \"Z4\", ...)  # S4 method for DNAStringSet_OR_NULL automorphism(   seqs = NULL,   filepath = NULL,   group = c(\"Z5\", \"Z64\", \"Z125\", \"Z5^3\"),   cube = c(\"ACGT\", \"TGCA\"),   cube_alt = c(\"CATG\", \"GTAC\"),   nms = NULL,   start = NA,   end = NA,   chr = 1L,   strand = \"+\",   num.cores = detectCores() - 1,   tasks = 0L,   verbose = TRUE )"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphism.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in a Given Abelian group. — automorphism","text":"filepath character vector containing path file fasta format read. argument must given codon & base arguments provided. group character string denoting group representation given base codon shown reference (1). cube, cube_alt character string denoting pairs 24 Genetic-code cubes, given references (2-3). , base pairs given cubes must complementary . cube pair call \\(dual cubes\\) , shown reference (3), pair integrates group. nms Optional. used DNA sequence alignment provided carries two sequences. character string giving short names alignments compared. given automorphisms pairwise alignment named : \"aln_1\", \"aln_2\", . start, end, chr, strand Optional parameters required build GRanges-class. provided default values given function definition used. num.cores, tasks Parameters parallel computation using package BiocParallel-package: number cores use, .e. many child processes run simultaneously (see bplapply number tasks per job (Linux OS). verbose TRUE, prints progress bar. seq object DNAStringSet DNAMultipleAlignment class carrying DNA pairwise alignment two sequences. pairwise alignment provided argument seq 'fasta' file filepath must correspond codon sequences.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphism.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in a Given Abelian group. — automorphism","text":"function returns Automorphism-class object four columns metacolumn named: seq1, seq2, autm, cube.","code":""},{"path":[]},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphism.html","id":"automorphismbyranges-","dir":"Reference","previous_headings":"","what":"automorphismByRanges:","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in a Given Abelian group. — automorphism","text":"function returns GRanges-class object. Consecutive mutational events (codon sequence) described automorphisms cube grouped range.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphism.html","id":"automorphismbycoef","dir":"Reference","previous_headings":"","what":"automorphismByCoef","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in a Given Abelian group. — automorphism","text":"function returns GRanges-class object. Consecutive mutational events (codon sequence) described automorphism coefficients grouped range.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphism.html","id":"getautomorphisms","dir":"Reference","previous_headings":"","what":"getAutomorphisms","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in a Given Abelian group. — automorphism","text":"function returns AutomorphismList-class object list Automorphism-class objects, inherits GRanges-class objects.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphism.html","id":"conserved-regions","dir":"Reference","previous_headings":"","what":"conserved_regions","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in a Given Abelian group. — automorphism","text":"Returns AutomorphismByCoef class object containing requested regions.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphism.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in a Given Abelian group. — automorphism","text":"Herein, automorphisms algebraic descriptions mutational event observed codon sequences represented different Abelian groups. particular, described references (3-4), representation codon set defined Abelian group 24 possible isomorphic Abelian groups. Abelian groups can labeled based DNA base-order used generate . set 24 Abelian groups can described group isomorphic symmetric group degree four (\\(S_4\\), see reference (4)). Function automorphismByRanges permits classification pairwise alignment protein-coding sub-regions based mutational events observed genetic-code cubes describe . Automorphisms Z5, Z64 Z125 described functions \\(f(x) = k x mod 64\\) \\(f(x) = k x mod 125\\), k x elements set integers modulo 64 modulo 125, respectively. automorphism found cubes provided argument \\(cube\\), function automorphism search automorphisms cubes provided argument \\(cube_alt\\). Automorphisms Z5^3' described functions \\(f(x) = Ax mod Z5\\), diagonal matrix. Arguments cube cube_alt must pairs ' dual cubes (see section 2.4 reference 4).","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphism.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in a Given Abelian group. — automorphism","text":"Sanchez R, Morgado E, Grau R. Gene algebra genetic code algebraic structure. J Math Biol. 2005 Oct;51(4):431-57. doi: 10.1007/s00285-005-0332-8. Epub 2005 Jul 13. PMID: 16012800. ( PDF). Robersy Sanchez, Jesús Barreto (2021) Genomic Abelian Finite Groups. doi: 10.1101/2021.06.01.446543. M. V José, E.R. Morgado, R. Sánchez, T. Govezensky, 24 possible algebraic representations standard genetic code six three dimensions, Adv. Stud. Biol. 4 (2012) 119–152.PDF. R. Sanchez. Symmetric Group Genetic–Code Cubes. Effect Genetic–Code Architecture Evolutionary Process MATCH Commun. Math. Comput. Chem. 79 (2018) 527-560. PDF","code":""},{"path":[]},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphism.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in a Given Abelian group. — automorphism","text":"","code":"## Load a pairwise alignment data(aln) aln #> DNAStringSet object of length 2: #>     width seq #> [1]    51 ACCTATGTTGGTATT---GCGCTCCAACTCCTTGGCTCTAGCTCACTACAT #> [2]    51 ATCTATGTTGGTATTACGACGCTCCAATTCCTTGGGTCC------CTCCTT  ## Automorphism on \"Z5^3\" autms <- automorphism(seq = aln, group = \"Z5^3\") #> Error in validObject(.Object): invalid class “CodonGroup” object:  #>     *** Argument 'x' is not a CodonGroup-class object.The slot 'group' is #>     not present or wrong naming. autms #> Error in eval(expr, envir, enclos): object 'autms' not found  ## Automorphism on \"Z64\" autms <- automorphism(seq = aln, group = \"Z64\") #>    |                                                                               |                                                                      |   0%   |                                                                               |=======                                                               |  10%   |                                                                               |==============                                                        |  20%   |                                                                               |=====================                                                 |  30%   |                                                                               |============================                                          |  40%   |                                                                               |===================================                                   |  50%   |                                                                               |==========================================                            |  60%   |                                                                               |=================================================                     |  70%   |                                                                               |========================================================              |  80%   |                                                                               |===============================================================       |  90%   |                                                                               |======================================================================| 100% #>  autms #> Automorphism object with 17 ranges and 6 metadata columns: #>        seqnames    ranges strand |        seq1        seq2    coord1    coord2 #>           <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> #>    [1]        1         1      + |         ACC         ATC        17        49 #>    [2]        1         2      + |         TAT         TAT        15        15 #>    [3]        1         3      + |         GTT         GTT        59        59 #>    [4]        1         4      + |         GGT         GGT        43        43 #>    [5]        1         5      + |         ATT         ATT        51        51 #>    ...      ...       ...    ... .         ...         ...       ...       ... #>   [13]        1        13      + |         TCT         TCC        31        29 #>   [14]        1        14      + |         AGC         ---        33        NA #>   [15]        1        15      + |         TCA         ---        28        NA #>   [16]        1        16      - |         CTA         CTC        52        53 #>   [17]        1        17      + |         CAT         CTT         7        55 #>             autm        cube #>        <numeric> <character> #>    [1]        33        ACGT #>    [2]         1        ACGT #>    [3]         1        ACGT #>    [4]         1        ACGT #>    [5]         1        ACGT #>    ...       ...         ... #>   [13]         3        ACGT #>   [14]         0        Trnl #>   [15]         0        Trnl #>   [16]        30        TGCA #>   [17]        17        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths  ## Grouping into ranges the automorphisms by cubes  automorphismByRanges(autms) #> GRanges object with 6 ranges and 1 metadata column: #>       seqnames    ranges strand |        cube #>          <Rle> <IRanges>  <Rle> | <character> #>   [1]        1       1-5      + |        ACGT #>   [2]        1         6      + |        Trnl #>   [3]        1      7-13      + |        ACGT #>   [4]        1     14-15      + |        Trnl #>   [5]        1        16      - |        TGCA #>   [6]        1        17      + |        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths  ## Automorphism on \"Z64\" from position 1 to 33 autms <- automorphism(seq = aln,                       group = \"Z64\",                       start = 1,                       end = 33) #>    |                                                                               |                                                                      |   0%   |                                                                               |==================                                                    |  25%   |                                                                               |===================================                                   |  50%   |                                                                               |====================================================                  |  75%   |                                                                               |======================================================================| 100% #>  autms #> Automorphism object with 11 ranges and 6 metadata columns: #>        seqnames    ranges strand |        seq1        seq2    coord1    coord2 #>           <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> #>    [1]        1         1      + |         ACC         ATC        17        49 #>    [2]        1         2      + |         TAT         TAT        15        15 #>    [3]        1         3      + |         GTT         GTT        59        59 #>    [4]        1         4      + |         GGT         GGT        43        43 #>    [5]        1         5      + |         ATT         ATT        51        51 #>    [6]        1         6      + |         ---         ACG        NA        18 #>    [7]        1         7      + |         GCG         ACG        26        18 #>    [8]        1         8      + |         CTC         CTC        53        53 #>    [9]        1         9      + |         CAA         CAA         4         4 #>   [10]        1        10      + |         CTC         TTC        53        61 #>   [11]        1        11      + |         CTT         CTT        55        55 #>             autm        cube #>        <numeric> <character> #>    [1]        33        ACGT #>    [2]         1        ACGT #>    [3]         1        ACGT #>    [4]         1        ACGT #>    [5]         1        ACGT #>    [6]         0        Trnl #>    [7]        45        ACGT #>    [8]         1        ACGT #>    [9]         1        ACGT #>   [10]        41        ACGT #>   [11]         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths  ## Grouping into ranges the automorphisms by cubes  automorphismByRanges(autms) #> GRanges object with 3 ranges and 1 metadata column: #>       seqnames    ranges strand |        cube #>          <Rle> <IRanges>  <Rle> | <character> #>   [1]        1       1-5      + |        ACGT #>   [2]        1         6      + |        Trnl #>   [3]        1      7-11      + |        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphismByCoef.html","id":null,"dir":"Reference","previous_headings":"","what":"Autmorphism Grouping by Coefficient — automorphismByCoef","title":"Autmorphism Grouping by Coefficient — automorphismByCoef","text":"Automorphisms automorphism's coefficients grouped.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphismByCoef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Autmorphism Grouping by Coefficient — automorphismByCoef","text":"","code":"automorphismByCoef(x, ...)  # S4 method for Automorphism automorphismByCoef(x, mut.type = TRUE)  # S4 method for AutomorphismList automorphismByCoef(   x,   min.len = 1L,   mut.type = TRUE,   num.cores = detectCores() - 1,   tasks = 0L,   verbose = TRUE )"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphismByCoef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Autmorphism Grouping by Coefficient — automorphismByCoef","text":"x automorphism-class object returned function automorphism. mut.type Logical. Whether include mutation type given function mut_type. num.cores, tasks Integers. Argument num.cores denotes number cores use, .e. many child processes run simultaneously (see bplapply function BiocParallel package). Argument tasks denotes number tasks per job. value must scalar integer >= 0L. documentation job defined single call function, bplapply. task division \\(X\\) argument chunks. tasks == 0 (default), \\(X\\) divided evenly possible number workers (see MulticoreParam BiocParallel package).","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphismByCoef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Autmorphism Grouping by Coefficient — automorphismByCoef","text":"AutomorphismByCoef class object. coefficient 0 value assigned mutational events automorphisms, e.g., indel mutations.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphismByCoef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Autmorphism Grouping by Coefficient — automorphismByCoef","text":"","code":"## Load dataset data(autm, package = \"GenomAutomorphism\")  automorphismByCoef(x = autm[1:2]) #> AutomorphismByCoef object with 2 ranges and 5 metadata columns: #>       seqnames    ranges strand |        seq1        seq2      autm    mut_type #>          <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <character> #>   [1]        1       1-2      + |         ATG         ATG         1         HHH #>   [2]        1       1-2      + |         GAG         GAG         1         HHH #>              cube #>       <character> #>   [1]        ACGT #>   [2]        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphismByRanges.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the automorphisms by ranges. — automorphismByRanges","title":"Get the automorphisms by ranges. — automorphismByRanges","text":"Automorphisms estimated pairwise MSA alignment can grouped ranges inherits GRanges-class GRanges-class.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphismByRanges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the automorphisms by ranges. — automorphismByRanges","text":"","code":"automorphismByRanges(x, ...)  # S4 method for Automorphism automorphismByRanges(x)  # S4 method for AutomorphismList automorphismByRanges(   x,   min.len = 0L,   num.cores = detectCores() - 1,   tasks = 0L,   verbose = TRUE )"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphismByRanges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the automorphisms by ranges. — automorphismByRanges","text":"x AutomorphismList-class object returned function automorphism. num.cores, tasks Integers. Argument num.cores denotes number cores use, .e. many child processes run simultaneously (see bplapply function BiocParallel package). Argument tasks denotes number tasks per job. value must scalar integer >= 0L. documentation job defined single call function, bplapply. task division \\(X\\) argument chunks. tasks == 0 (default), \\(X\\) divided evenly possible number workers (see MulticoreParam BiocParallel package).","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphismByRanges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the automorphisms by ranges. — automorphismByRanges","text":" GRanges-class GRangesList-class. GRanges-class object column named cube, carries type cube automorphims.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphismByRanges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the automorphisms by ranges. — automorphismByRanges","text":"","code":"## Load dataset data(autm, package = \"GenomAutomorphism\")  automorphismByRanges(x = autm[c(1,4)]) #> GRanges object with 1 range and 1 metadata column: #>       seqnames    ranges strand |        cube #>          <Rle> <IRanges>  <Rle> | <character> #>   [1]        1       1-4      + |        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/base2codon.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a DNA sequence into codons — base2codon","title":"Split a DNA sequence into codons — base2codon","text":"function split DNA sequence codon sequence.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/base2codon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a DNA sequence into codons — base2codon","text":"","code":"base2codon(x, ...)  # S4 method for character base2codon(x)  # S4 method for DNAStringSet base2codon(x)  # S4 method for DNAMultipleAlignment base2codon(x)"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/base2codon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a DNA sequence into codons — base2codon","text":"x character string, DNAStringSet-class DNAMultipleAlignment-class object carrying DNA sequence.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/base2codon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a DNA sequence into codons — base2codon","text":"argument 'x' character string, character vector codons returned. argument 'x' DNAStringSet-class DNAMultipleAlignment-class object, matrix codons returned.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/base2codon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Split a DNA sequence into codons — base2codon","text":"expected provided DNA sequence multiple 3, otherwise gaps added end sequence.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/base2codon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Split a DNA sequence into codons — base2codon","text":"Robersy Sanchez https://genomaths.com. 01/15/2022","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/base2codon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a DNA sequence into codons — base2codon","text":"","code":"## Gaps are added at the sequence end. seq <- c(\"ACCT\") base2codon(x = seq) #> Warning: *** Base sequence of 'x' is not multiple of 3. Gaps '-' have been added at the end of the sequence. #> [1] \"ACC\" \"T--\"  ## This DNA sequence is multiple of 3 seq <- c(\"ACCTCA\") base2codon(x = seq) #> [1] \"ACC\" \"TCA\"  ## Load a DNAStringSet. A matrix of codons is returned data(aln) base2codon(x = aln) #>       [,1]  [,2]  #>  [1,] \"ACC\" \"ATC\" #>  [2,] \"TAT\" \"TAT\" #>  [3,] \"GTT\" \"GTT\" #>  [4,] \"GGT\" \"GGT\" #>  [5,] \"ATT\" \"ATT\" #>  [6,] \"---\" \"ACG\" #>  [7,] \"GCG\" \"ACG\" #>  [8,] \"CTC\" \"CTC\" #>  [9,] \"CAA\" \"CAA\" #> [10,] \"CTC\" \"TTC\" #> [11,] \"CTT\" \"CTT\" #> [12,] \"GGC\" \"GGG\" #> [13,] \"TCT\" \"TCC\" #> [14,] \"AGC\" \"---\" #> [15,] \"TCA\" \"---\" #> [16,] \"CTA\" \"CTC\" #> [17,] \"CAT\" \"CTT\""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/base_coord.html","id":null,"dir":"Reference","previous_headings":"","what":"Base coordinates on a given a given Abelian group representation. — base_coord","title":"Base coordinates on a given a given Abelian group representation. — base_coord","text":"Given string denoting codon base DNA (RNA) alphabet genetic-code Abelian group given reference (1).","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/base_coord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base coordinates on a given a given Abelian group representation. — base_coord","text":"","code":"base_coord(base = NULL, filepath = NULL, cube = \"ACGT\", group = \"Z4\", ...)  # S4 method for DNAStringSet_OR_NULL base_coord(   base = NULL,   filepath = NULL,   cube = c(\"ACGT\", \"AGCT\", \"TCGA\", \"TGCA\", \"CATG\", \"GTAC\", \"CTAG\", \"GATC\", \"ACTG\",     \"ATCG\", \"GTCA\", \"GCTA\", \"CAGT\", \"TAGC\", \"TGAC\", \"CGAT\", \"AGTC\", \"ATGC\", \"CGTA\",     \"CTGA\", \"GACT\", \"GCAT\", \"TACG\", \"TCAG\"),   group = c(\"Z4\", \"Z5\"),   start = NA,   end = NA,   chr = 1L,   strand = \"+\" )"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/base_coord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base coordinates on a given a given Abelian group representation. — base_coord","text":"base object DNAStringSet DNAMultipleAlignment class carrying DNA pairwise alignment two sequences. filepath character vector containing path file fasta format read. argument must given codon & base arguments provided. cube character string denoting one 24 Genetic-code cubes, given references (2 2 3). group character string denoting group representation given base codon shown reference (1). start, end, chr, strand Optional parameters required build GRanges-class. provided default values given function definition used.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/base_coord.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Base coordinates on a given a given Abelian group representation. — base_coord","text":"Symbols \"-\" \"N\" usually found DNA sequence alignments denote gaps missing/unknown bases represented number: '-1' Z4 '0' Z5. Z64 symbol 'NA' returned codons including symbols \"-\" \"N\". function returns BaseGroup object carrying DNA sequence(s) respective coordinates requested Abelian group base representation (one-dimension, \"Z4\" \"Z5\"). Observe get coordinates set integer numbers (\"Z\") also possible defined integrate Abelian group. just used insertion codon set 3D space (R^3).","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/base_coord.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Base coordinates on a given a given Abelian group representation. — base_coord","text":"Robersy Sanchez, Jesús Barreto (2021) Genomic Abelian Finite Groups. doi: 10.1101/2021.06.01.446543. M. V José, E.R. Morgado, R. Sánchez, T. Govezensky, 24 possible algebraic representations standard genetic code six three dimensions, Adv. Stud. Biol. 4 (2012) 119–152.PDF. R. Sanchez. Symmetric Group Genetic–Code Cubes. Effect Genetic–Code Architecture Evolutionary Process MATCH Commun. Math. Comput. Chem. 79 (2018) 527-560.","code":""},{"path":[]},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/base_coord.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Base coordinates on a given a given Abelian group representation. — base_coord","text":"Robersy Sanchez https://genomaths.com","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/base_coord.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Base coordinates on a given a given Abelian group representation. — base_coord","text":"","code":"## Load a pairwise alignment  data(aln) aln #> DNAStringSet object of length 2: #>     width seq #> [1]    51 ACCTATGTTGGTATT---GCGCTCCAACTCCTTGGCTCTAGCTCACTACAT #> [2]    51 ATCTATGTTGGTATTACGACGCTCCAATTCCTTGGGTCC------CTCCTT  ## DNA base representation in the Abelian group Z4 bs_cor <- base_coord(     base = aln,      cube = \"ACGT\") bs_cor #> BaseGroup object with 51 ranges and 4 metadata columns: #>        seqnames    ranges strand |        seq1        seq2    coord1    coord2 #>           <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> #>    [1]        1         1      + |           A           A         0         0 #>    [2]        1         2      + |           C           T         1         3 #>    [3]        1         3      + |           C           C         1         1 #>    [4]        1         4      + |           T           T         3         3 #>    [5]        1         5      + |           A           A         0         0 #>    ...      ...       ...    ... .         ...         ...       ...       ... #>   [47]        1        47      + |           T           T         3         3 #>   [48]        1        48      + |           A           C         0         1 #>   [49]        1        49      + |           C           C         1         1 #>   [50]        1        50      + |           A           T         0         3 #>   [51]        1        51      + |           T           T         3         3 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths  ## DNA base representation in the Abelian group Z5 bs_cor <- base_coord(     base = aln,      cube = \"ACGT\",     group = \"Z5\") bs_cor #> BaseGroup object with 51 ranges and 4 metadata columns: #>        seqnames    ranges strand |        seq1        seq2    coord1    coord2 #>           <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> #>    [1]        1         1      + |           A           A         1         1 #>    [2]        1         2      + |           C           T         2         4 #>    [3]        1         3      + |           C           C         2         2 #>    [4]        1         4      + |           T           T         4         4 #>    [5]        1         5      + |           A           A         1         1 #>    ...      ...       ...    ... .         ...         ...       ...       ... #>   [47]        1        47      + |           T           T         4         4 #>   [48]        1        48      + |           A           C         1         2 #>   [49]        1        49      + |           C           C         2         2 #>   [50]        1        50      + |           A           T         1         4 #>   [51]        1        51      + |           T           T         4         4 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/brca1_aln.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiple Sequence Alignment (MSA) of Primate BRCA1 DNA repair genes. — brca1_aln","title":"Multiple Sequence Alignment (MSA) of Primate BRCA1 DNA repair genes. — brca1_aln","text":"DNAMultipleAlignment carrying MSA BRCA1 DNA repair genes used examples provided package functions. original file can downloaded GitHub : https://bit.ly/3DimROD","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/brca1_aln.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiple Sequence Alignment (MSA) of Primate BRCA1 DNA repair genes. — brca1_aln","text":"","code":"brca1_aln"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/brca1_aln.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Multiple Sequence Alignment (MSA) of Primate BRCA1 DNA repair genes. — brca1_aln","text":"DNAMultipleAlignment class object.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/brca1_autm.html","id":null,"dir":"Reference","previous_headings":"","what":"Automorphisms between DNA Sequences from Primate BRCA1 Genes — brca1_autm","title":"Automorphisms between DNA Sequences from Primate BRCA1 Genes — brca1_autm","text":"AutomorphismList object carrying list pairwise automorphisms DNA sequences MSA primate BRCA1 DNA repair gene. automorphisms estimated brca1_aln MSA function autZ64.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/brca1_autm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automorphisms between DNA Sequences from Primate BRCA1 Genes — brca1_autm","text":"","code":"brca1_autm"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/brca1_autm.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Automorphisms between DNA Sequences from Primate BRCA1 Genes — brca1_autm","text":"AutomorphismList class object.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/codon_coord.html","id":null,"dir":"Reference","previous_headings":"","what":"Codon coordinates on a given a given Abelian group representation. — codon_coord","title":"Codon coordinates on a given a given Abelian group representation. — codon_coord","text":"Given string denoting codon base DNA (RNA) alphabet genetic-code Abelian group given reference (1).","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/codon_coord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Codon coordinates on a given a given Abelian group representation. — codon_coord","text":"","code":"codon_coord(codon = NULL, ...)  # S4 method for BaseGroup codon_coord(codon, group = NULL)  # S4 method for DNAStringSet_OR_NULL codon_coord(   codon = NULL,   filepath = NULL,   cube = c(\"ACGT\", \"AGCT\", \"TCGA\", \"TGCA\", \"CATG\", \"GTAC\", \"CTAG\", \"GATC\", \"ACTG\",     \"ATCG\", \"GTCA\", \"GCTA\", \"CAGT\", \"TAGC\", \"TGAC\", \"CGAT\", \"AGTC\", \"ATGC\", \"CGTA\",     \"CTGA\", \"GACT\", \"GCAT\", \"TACG\", \"TCAG\"),   group = c(\"Z4\", \"Z5\", \"Z64\", \"Z125\", \"Z4^3\", \"Z5^3\"),   start = NA,   end = NA,   chr = 1L,   strand = \"+\" )  # S4 method for matrix_OR_data_frame codon_coord(   codon,   cube = c(\"ACGT\", \"AGCT\", \"TCGA\", \"TGCA\", \"CATG\", \"GTAC\", \"CTAG\", \"GATC\", \"ACTG\",     \"ATCG\", \"GTCA\", \"GCTA\", \"CAGT\", \"TAGC\", \"TGAC\", \"CGAT\", \"AGTC\", \"ATGC\", \"CGTA\",     \"CTGA\", \"GACT\", \"GCAT\", \"TACG\", \"TCAG\"),   group = c(\"Z64\", \"Z125\", \"Z4^3\", \"Z5^3\") )"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/codon_coord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Codon coordinates on a given a given Abelian group representation. — codon_coord","text":"codon object BaseGroup-class (generated function base_coord), DNAStringSet DNAMultipleAlignment class carrying DNA pairwise alignment two sequences. group character string denoting group representation given base codon shown reference (2-3). filepath character vector containing path file fasta format read. argument must given codon & base arguments provided. cube character string denoting one 24 Genetic-code cubes, given references (2-3). start, end, chr, strand Optional parameters required build GRanges-class. provided default values given function definition used.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/codon_coord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Codon coordinates on a given a given Abelian group representation. — codon_coord","text":"CodonGroup-class object.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/codon_coord.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Codon coordinates on a given a given Abelian group representation. — codon_coord","text":"Symbols \"-\" \"N\" usually found DNA sequence alignments denote gaps missing/unknown bases represented number: '-1' Z4 '0' Z5. Z64 symbol 'NA' returned codons including symbols \"-\" \"N\". function returns GRanges-class object carrying codon sequence(s) respective coordinates requested Abelian group simply, group =  'Z5^3' 3D-coordinates, derive Z5 indicated reference (3). Notice coordinates can 3D just one-dimension (\"Z64\" \"Z125\"). Hence, pairwise alignment provided argument codon must correspond codon sequences.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/codon_coord.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Codon coordinates on a given a given Abelian group representation. — codon_coord","text":"Robersy Sanchez, Jesús Barreto (2021) Genomic Abelian Finite Groups. doi: 10.1101/2021.06.01.446543. M. V José, E.R. Morgado, R. Sánchez, T. Govezensky, 24 possible algebraic representations standard genetic code six three dimensions, Adv. Stud. Biol. 4 (2012) 119–152.PDF. R. Sanchez. Symmetric Group Genetic–Code Cubes. Effect Genetic–Code Architecture Evolutionary Process MATCH Commun. Math. Comput. Chem. 79 (2018) 527-560.","code":""},{"path":[]},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/codon_coord.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Codon coordinates on a given a given Abelian group representation. — codon_coord","text":"Robersy Sanchez https://genomaths.com","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/codon_coord.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Codon coordinates on a given a given Abelian group representation. — codon_coord","text":"","code":"## Load a pairwise alignment  data(aln) aln #> DNAStringSet object of length 2: #>     width seq #> [1]    51 ACCTATGTTGGTATT---GCGCTCCAACTCCTTGGCTCTAGCTCACTACAT #> [2]    51 ATCTATGTTGGTATTACGACGCTCCAATTCCTTGGGTCC------CTCCTT  ## DNA base representation in the Abelian group Z5 bs_cor <- codon_coord(     codon = aln,      cube = \"ACGT\",     group = \"Z5\") bs_cor ## 3-D coordinates #> CodonGroup object with 17 ranges and 4 metadata columns: #>        seqnames    ranges strand |        seq1        seq2      coord1 #>           <Rle> <IRanges>  <Rle> | <character> <character> <character> #>    [1]        1         1      + |         ACC         ATC       1,2,2 #>    [2]        1         2      + |         TAT         TAT       4,1,4 #>    [3]        1         3      + |         GTT         GTT       3,4,4 #>    [4]        1         4      + |         GGT         GGT       3,3,4 #>    [5]        1         5      + |         ATT         ATT       1,4,4 #>    ...      ...       ...    ... .         ...         ...         ... #>   [13]        1        13      + |         TCT         TCC       4,2,4 #>   [14]        1        14      + |         AGC         ---       1,3,2 #>   [15]        1        15      + |         TCA         ---       4,2,1 #>   [16]        1        16      + |         CTA         CTC       2,4,1 #>   [17]        1        17      + |         CAT         CTT       2,1,4 #>             coord2 #>        <character> #>    [1]       1,4,2 #>    [2]       4,1,4 #>    [3]       3,4,4 #>    [4]       3,3,4 #>    [5]       1,4,4 #>    ...         ... #>   [13]       4,2,2 #>   [14]       0,0,0 #>   [15]       0,0,0 #>   [16]       2,4,2 #>   [17]       2,4,4 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths   ## DNA base representation in the Abelian group Z64 bs_cor <- codon_coord(             codon = aln,              cube = \"ACGT\",             group = \"Z64\") bs_cor #> CodonGroup object with 17 ranges and 4 metadata columns: #>        seqnames    ranges strand |        seq1        seq2      coord1 #>           <Rle> <IRanges>  <Rle> | <character> <character> <character> #>    [1]        1         1      + |         ACC         ATC          17 #>    [2]        1         2      + |         TAT         TAT          15 #>    [3]        1         3      + |         GTT         GTT          59 #>    [4]        1         4      + |         GGT         GGT          43 #>    [5]        1         5      + |         ATT         ATT          51 #>    ...      ...       ...    ... .         ...         ...         ... #>   [13]        1        13      + |         TCT         TCC          31 #>   [14]        1        14      + |         AGC         ---          33 #>   [15]        1        15      + |         TCA         ---          28 #>   [16]        1        16      + |         CTA         CTC          52 #>   [17]        1        17      + |         CAT         CTT           7 #>             coord2 #>        <character> #>    [1]          49 #>    [2]          15 #>    [3]          59 #>    [4]          43 #>    [5]          51 #>    ...         ... #>   [13]          29 #>   [14]        <NA> #>   [15]        <NA> #>   [16]          53 #>   [17]          55 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths  ## Giving a matrix of codons codon_coords(base2codon(x = aln)) #> Error in codon_coords(base2codon(x = aln)): could not find function \"codon_coords\""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/conserved_regions.html","id":null,"dir":"Reference","previous_headings":"","what":"Conserved and Non-conserved Regions from a MSA — conserved_regions","title":"Conserved and Non-conserved Regions from a MSA — conserved_regions","text":"Returns Conserved Non-conserved Regions MSA.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/conserved_regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conserved and Non-conserved Regions from a MSA — conserved_regions","text":"","code":"conserved_regions(x, ...)  # S4 method for Automorphism conserved_regions(   x,   conserved = TRUE,   output = c(\"all_pairs\", \"unique_pairs\", \"unique\") )  # S4 method for AutomorphismList conserved_regions(   x,   conserved = TRUE,   output = c(\"all_pairs\", \"unique_pairs\", \"unique\") )  # S4 method for AutomorphismByCoef conserved_regions(   x,   conserved = TRUE,   output = c(\"all_pairs\", \"unique_pairs\", \"unique\") )  # S4 method for AutomorphismByCoefList conserved_regions(   x,   conserved = TRUE,   output = c(\"all_pairs\", \"unique_pairs\", \"unique\") )"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/conserved_regions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conserved and Non-conserved Regions from a MSA — conserved_regions","text":"x Automorphism, AutomorphismList, AutomorphismByCoef AutomorphismByCoefList class object. conserved Logical, Whether return conserved non-conserved regions.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/conserved_regions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conserved and Non-conserved Regions from a MSA — conserved_regions","text":"AutomorphismByCoef class object containing requested regions.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/conserved_regions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conserved and Non-conserved Regions from a MSA — conserved_regions","text":"","code":"## Load dataset data(autm, package = \"GenomAutomorphism\") conserved_regions(autm[1:3]) #> AutomorphismByCoef object with 3 ranges and 5 metadata columns: #>       seqnames    ranges strand |        seq1        seq2      autm    mut_type #>          <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <character> #>   [1]        1       1-3      + |         ATG         ATG         1         HHH #>   [2]        1       1-3      + |         GAG         GAG         1         HHH #>   [3]        1       1-3      + |         AGC         AGC         1         HHH #>              cube #>       <character> #>   [1]        ACGT #>   [2]        ACGT #>   [3]        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/covid_aln.html","id":null,"dir":"Reference","previous_headings":"","what":"Pairwise Sequence Alignment (MSA) of COVID-19 genomes. — covid_aln","title":"Pairwise Sequence Alignment (MSA) of COVID-19 genomes. — covid_aln","text":"DNAMultipleAlignment carrying pairwise sequence alignment SARS coronavirus GZ02 (GenBank: AY390556.1: 265-13398_13398-21485) Bat SARS-like coronavirus isolate bat-SL-CoVZC45 (GenBank: MG772933.1:265-1345513455-21542), complete genomes. alignment available GitHub: https://github.com/genomaths/seqalignments/tree/master/COVID-19","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/covid_aln.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pairwise Sequence Alignment (MSA) of COVID-19 genomes. — covid_aln","text":"","code":"covid_aln"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/covid_aln.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pairwise Sequence Alignment (MSA) of COVID-19 genomes. — covid_aln","text":"DNAMultipleAlignment class object.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/covid_autm.html","id":null,"dir":"Reference","previous_headings":"","what":"Automorphisms between DNA Sequences from two COVID-19 genomes — covid_autm","title":"Automorphisms between DNA Sequences from two COVID-19 genomes — covid_autm","text":"AutomorphismList object carrying list pairwise automorphisms SARS coronavirus GZ02 (GenBank: AY390556.1: 265-13398_13398-21485) Bat SARS-like coronavirus isolate bat-SL-CoVZC45 (GenBank: KY417151.1: protein-coding regions). pairwise DNA sequence alignment available dataset named covid_aln automorphisms estimated function autZ64.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/covid_autm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automorphisms between DNA Sequences from two COVID-19 genomes — covid_autm","text":"","code":"covid_autm"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/covid_autm.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Automorphisms between DNA Sequences from two COVID-19 genomes — covid_autm","text":"AutomorphismList class object.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/cyc_aln.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiple Sequence Alignment (MSA) of Primate Somatic Cytochrome C — cyc_aln","title":"Multiple Sequence Alignment (MSA) of Primate Somatic Cytochrome C — cyc_aln","text":"DNAMultipleAlignment carrying MSA Primate Somatic Cytochrome C used examples provided package functions. original file can downloaded GitHub : https://bit.ly/3kdEAzs","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/cyc_aln.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiple Sequence Alignment (MSA) of Primate Somatic Cytochrome C — cyc_aln","text":"","code":"cyc_aln"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/cyc_aln.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Multiple Sequence Alignment (MSA) of Primate Somatic Cytochrome C — cyc_aln","text":"DNAMultipleAlignment class object.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/cyc_autm.html","id":null,"dir":"Reference","previous_headings":"","what":"Automorphisms between DNA Sequences from Primate Cytochrome C Genes — cyc_autm","title":"Automorphisms between DNA Sequences from Primate Cytochrome C Genes — cyc_autm","text":"AutomorphismList object carrying list pairwise automorphisms DNA sequences MSA Primate Somatic Cytochrome C used examples provided package functions. automorphisms estimated cyc_aln MSA function autZ64.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/cyc_autm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automorphisms between DNA Sequences from Primate Cytochrome C Genes — cyc_autm","text":"","code":"cyc_autm"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/cyc_autm.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Automorphisms between DNA Sequences from Primate Cytochrome C Genes — cyc_autm","text":"AutomorphismList class object.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/getAutomorphisms.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Automorphisms — getAutomorphisms","title":"Get Automorphisms — getAutomorphisms","text":"function returns AutomorphismList-class object list Automorphism-class objects, inherits GRanges-class objects.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/getAutomorphisms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Automorphisms — getAutomorphisms","text":"","code":"getAutomorphisms(x, ...)  # S4 method for AutomorphismList getAutomorphisms(x)  # S4 method for list getAutomorphisms(x)  # S4 method for DataFrame_OR_data.frame getAutomorphisms(x)"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/getAutomorphisms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Automorphisms — getAutomorphisms","text":"sake saving memory, Automorphism-class objects stored AutomorphismList-class,  inherits GRanges-class. function just transform Automorphism-class object object class now inheriting GRanges-class.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/getAutomorphisms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Automorphisms — getAutomorphisms","text":"","code":"## Load dataset data(autm, package = \"GenomAutomorphism\")  x1 <- autm[1:2] x1 #> Automorphism object with 2 ranges and 6 metadata columns: #>       seqnames    ranges strand |        seq1        seq2    coord1    coord2 #>          <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> #>   [1]        1         1      + |         ATG         ATG        50        50 #>   [2]        1         2      + |         GAG         GAG        10        10 #>            autm        cube #>       <numeric> <character> #>   [1]         1        ACGT #>   [2]         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths  ## A list of DataFrame objects as.list(x1)   #> Error in getListElement(x, i, ...): Automorphism objects don't support [[, as.list(), lapply(), or unlist() #>   at the moment  ## Get automorphism on GRanges objects x1 <- getAutomorphisms(autm[1:2]) #> Error in (function (classes, fdef, mtable) {    methods <- .findInheritedMethods(classes, fdef, mtable)    if (length(methods) == 1L)         return(methods[[1L]])    else if (length(methods) == 0L) {        cnames <- paste0(\"\\\"\", vapply(classes, as.character,             \"\"), \"\\\"\", collapse = \", \")        stop(gettextf(\"unable to find an inherited method for function %s for signature %s\",             sQuote(fdef@generic), sQuote(cnames)), domain = NA)    }    else stop(\"Internal error in finding inherited methods; didn't return a unique method\",         domain = NA)})(list(structure(\"Automorphism\", package = \"GenomAutomorphism\")),     new(\"standardGeneric\", .Data = function (x, ...)     standardGeneric(\"getAutomorphisms\"), generic = structure(\"getAutomorphisms\", package = \"GenomAutomorphism\"),         package = \"GenomAutomorphism\", group = list(), valueClass = character(0),         signature = \"x\", default = NULL, skeleton = (function (x,             ...)         stop(\"invalid call in method dispatch to 'getAutomorphisms' (no default method)\",             domain = NA))(x, ...)), <environment>): unable to find an inherited method for function ‘getAutomorphisms’ for signature ‘\"Automorphism\"’ x1 #> Automorphism object with 2 ranges and 6 metadata columns: #>       seqnames    ranges strand |        seq1        seq2    coord1    coord2 #>          <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> #>   [1]        1         1      + |         ATG         ATG        50        50 #>   [2]        1         2      + |         GAG         GAG        10        10 #>            autm        cube #>       <numeric> <character> #>   [1]         1        ACGT #>   [2]         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths  ## A list of GRanges objects as.list(x1) #> Error in getListElement(x, i, ...): Automorphism objects don't support [[, as.list(), lapply(), or unlist() #>   at the moment"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/get_coord.html","id":null,"dir":"Reference","previous_headings":"","what":"DNA base/codon sequence and coordinates represented on a given Abelian\ngroup. — get_coord","title":"DNA base/codon sequence and coordinates represented on a given Abelian\ngroup. — get_coord","text":"Given string denoting codon base DNA (RNA) alphabet genetic-code Abelian group given reference (1), function returns object CodonGroup-class carrying DNA base/codon sequence coordinates represented given Abelian group.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/get_coord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DNA base/codon sequence and coordinates represented on a given Abelian\ngroup. — get_coord","text":"","code":"get_coord(x, ...)  # S4 method for BaseGroup_OR_CodonGroup get_coord(x, output = c(\"all\", \"matrix.list\"))  # S4 method for DNAStringSet_OR_NULL get_coord(   x,   output = c(\"all\", \"matrix.list\"),   base_seq = TRUE,   filepath = NULL,   cube = \"ACGT\",   group = \"Z4\",   start = NA,   end = NA,   chr = 1L,   strand = \"+\" )"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/get_coord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DNA base/codon sequence and coordinates represented on a given Abelian\ngroup. — get_coord","text":"x object BaseGroup-class, CodonGroup-class, DNAStringSet DNAMultipleAlignment class carrying DNA pairwise alignment two sequences. Objects BaseGroup-class CodonGroup-class generated functions: base_coord codon_coord, respectively. output See Value section. base_seq Logical. Whether return base codon coordinates selected Abelian group. codon coordinates requested, number DNA bases given sequences must multiple 3. filepath character vector containing path file fasta format read. argument must given codon & base arguments provided. cube character string denoting one 24 Genetic-code cubes, given references (2 2 3). group character string denoting group representation given base codon shown reference (1). start, end, chr, strand Optional parameters required build GRanges-class. provided default values given function definition used.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/get_coord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DNA base/codon sequence and coordinates represented on a given Abelian\ngroup. — get_coord","text":"object CodonGroup-class class returned output = \"\". two slots, first one carrying list matrices second one carrying codon/base sequence information. , x object CodonGroup-class class, list matrices codon coordinate can retrieved x@CoordList information codon sequence x@SeqRanges. output = \"matrix.list\", object MatrixList class returned.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/get_coord.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DNA base/codon sequence and coordinates represented on a given Abelian\ngroup. — get_coord","text":"Symbols \"-\" \"N\" usually found DNA sequence alignments denote gaps missing/unknown bases represented number: '-1' Z4 '0' Z5. Z64 symbol 'NA' returned codons including symbols \"-\" \"N\". Although CodonGroup-class object returned functions codon_coord base_coord useful store genomic information, base codon coordinates given numeric magnitudes. Function get_coord provides way get coordinates numeric object object still preserve base/codon sequence information.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/get_coord.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DNA base/codon sequence and coordinates represented on a given Abelian\ngroup. — get_coord","text":"","code":"## Load a pairwise alignment  data(aln) aln #> DNAStringSet object of length 2: #>     width seq #> [1]    51 ACCTATGTTGGTATT---GCGCTCCAACTCCTTGGCTCTAGCTCACTACAT #> [2]    51 ATCTATGTTGGTATTACGACGCTCCAATTCCTTGGGTCC------CTCCTT  ## DNA base representation in the Abelian group Z5 coord <- get_coord(     x = aln,      cube = \"ACGT\",     group = \"Z5\") coord ## A list of vectors #> CodonSeq object of length: 2 #> names(2): coord1 coord2  #> -------  #> Vector of length: 51  #>   1: 2: 3: 4: 5: ... 47: 48: 49: 50: 51: #> 1  1  2  2  4  1 ...   4   1   2   1   4 #> ... #> <1 more numeric element(s)> #> Two slots: 'CoordList' & 'SeqRanges' #> -------   ## Extract the coordinate list coord@CoordList #> $coord1 #>  [1] 1 2 2 4 1 4 3 4 4 3 3 4 1 4 4 0 0 0 3 2 3 2 4 2 2 1 1 2 4 2 2 4 4 3 3 2 4 2 #> [39] 4 1 3 2 4 2 1 2 4 1 2 1 4 #>  #> $coord2 #>  [1] 1 4 2 4 1 4 3 4 4 3 3 4 1 4 4 1 2 3 1 2 3 2 4 2 2 1 1 4 4 2 2 4 4 3 3 3 4 2 #> [39] 2 0 0 0 0 0 0 2 4 2 2 4 4 #>   ## Extract the sequence list coord@SeqRanges #> GRanges object with 51 ranges and 2 metadata columns: #>        seqnames    ranges strand |        seq1        seq2 #>           <Rle> <IRanges>  <Rle> | <character> <character> #>    [1]        1         1      + |           A           A #>    [2]        1         2      + |           C           T #>    [3]        1         3      + |           C           C #>    [4]        1         4      + |           T           T #>    [5]        1         5      + |           A           A #>    ...      ...       ...    ... .         ...         ... #>   [47]        1        47      + |           T           T #>   [48]        1        48      + |           A           C #>   [49]        1        49      + |           C           C #>   [50]        1        50      + |           A           T #>   [51]        1        51      + |           T           T #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths  ## DNA codon representation in the Abelian group Z64 coord <- get_coord(             x = aln,              base_seq = FALSE,             cube = \"ACGT\",             group = \"Z64\") coord #> CodonSeq object of length: 2 #> names(2): coord1 coord2  #> -------  #> Vector of length: 17  #>   1: 2: 3: 4: 5: ... 13: 14: 15: 16: 17: #> 1 17 15 59 43 51 ...  31  33  28  52   7 #> ... #> <1 more numeric element(s)> #> Two slots: 'CoordList' & 'SeqRanges' #> -------   ## Extract the coordinate list coord@CoordList #> $coord1 #>  [1] 17 15 59 43 51 NA 26 53  4 53 55 41 31 33 28 52  7 #>  #> $coord2 #>  [1] 49 15 59 43 51 18 18 53  4 61 55 42 29 NA NA 53 55 #>   ## Extract the sequence list coord@SeqRanges #> GRanges object with 17 ranges and 2 metadata columns: #>        seqnames    ranges strand |        seq1        seq2 #>           <Rle> <IRanges>  <Rle> | <character> <character> #>    [1]        1         1      + |         ACC         ATC #>    [2]        1         2      + |         TAT         TAT #>    [3]        1         3      + |         GTT         GTT #>    [4]        1         4      + |         GGT         GGT #>    [5]        1         5      + |         ATT         ATT #>    ...      ...       ...    ... .         ...         ... #>   [13]        1        13      + |         TCT         TCC #>   [14]        1        14      + |         AGC         --- #>   [15]        1        15      + |         TCA         --- #>   [16]        1        16      + |         CTA         CTC #>   [17]        1        17      + |         CAT         CTT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/matrices.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Coordinate Representation from DNA Sequences on Specified\nAbelian Group — matrices","title":"Get the Coordinate Representation from DNA Sequences on Specified\nAbelian Group — matrices","text":"Extract Coordinate Representation DNA Sequences Specified Abelian Group.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/matrices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Coordinate Representation from DNA Sequences on Specified\nAbelian Group — matrices","text":"","code":"matrices(x, ...)  # S4 method for CodonSeq_OR_MatrixList matrices(x)  # S4 method for DNAStringSet_OR_NULL matrices(   x,   base_seq = TRUE,   filepath = NULL,   cube = \"ACGT\",   group = c(\"Z4\", \"Z5\", \"Z64\", \"Z125\", \"Z4^3\", \"Z5^3\"),   start = NA,   end = NA,   chr = 1L,   strand = \"+\" )"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/matrices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the Coordinate Representation from DNA Sequences on Specified\nAbelian Group — matrices","text":"x object DNAStringSet DNAMultipleAlignment class carrying DNA pairwise alignment two sequences. base_seq Logical. Whether return base codon coordinates selected Abelian group. codon coordinates requested, number DNA bases given sequences must multiple 3. filepath character vector containing path file fasta format read. argument must given codon & base arguments provided. cube character string denoting one 24 Genetic-code cubes, given references (2-3). group character string denoting group representation given base codon shown reference (1). start, end, chr, strand Optional parameters required build GRanges-class. provided default values given function definition used.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/matrices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Coordinate Representation from DNA Sequences on Specified\nAbelian Group — matrices","text":"list vectors (group = c(\"Z4\", \"Z5\", \"Z64\", \"Z125\") list matrices (group = (\"Z4^3\", \"Z5^3\")) carrying coordinate representation specified Abelian group.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/matrices.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the Coordinate Representation from DNA Sequences on Specified\nAbelian Group — matrices","text":"alternative ways get list matrices base/codon coordinate information codon sequence CodonSeq MatrixList class objects. functions can either take output functions base_coord matrices  operate directly DNAStringSet retrieve DNA sequence alignment file. base_seq parameter determine whether return matrices coordinate DNA codon sequence. function seqranges, granges parameter determine whether return GRanges-class object DataFrame.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/matrices.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get the Coordinate Representation from DNA Sequences on Specified\nAbelian Group — matrices","text":"Robersy Sanchez, Jesús Barreto (2021) Genomic Abelian Finite Groups. doi: 10.1101/2021.06.01.446543. M. V José, E.R. Morgado, R. Sánchez, T. Govezensky, 24 possible algebraic representations standard genetic code six three dimensions, Adv. Stud. Biol. 4 (2012) 119–152.PDF. R. Sanchez. Symmetric Group Genetic–Code Cubes. Effect Genetic–Code Architecture Evolutionary Process MATCH Commun. Math. Comput. Chem. 79 (2018) 527-560.","code":""},{"path":[]},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/matrices.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the Coordinate Representation from DNA Sequences on Specified\nAbelian Group — matrices","text":"Robersy Sanchez https://genomaths.com","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/matrices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Coordinate Representation from DNA Sequences on Specified\nAbelian Group — matrices","text":"","code":"## Load a pairwise alignment data(aln) aln #> DNAStringSet object of length 2: #>     width seq #> [1]    51 ACCTATGTTGGTATT---GCGCTCCAACTCCTTGGCTCTAGCTCACTACAT #> [2]    51 ATCTATGTTGGTATTACGACGCTCCAATTCCTTGGGTCC------CTCCTT  ## Coordinate representation of the aligned sequences on \"Z4\". ## A list of vectors matrices(     x = aln,     base_seq = TRUE,     filepath = NULL,     cube = \"ACGT\",     group = \"Z4\", ) #> Error in (function (classes, fdef, mtable) {    methods <- .findInheritedMethods(classes, fdef, mtable)    if (length(methods) == 1L)         return(methods[[1L]])    else if (length(methods) == 0L) {        cnames <- paste0(\"\\\"\", vapply(classes, as.character,             \"\"), \"\\\"\", collapse = \", \")        stop(gettextf(\"unable to find an inherited method for function %s for signature %s\",             sQuote(fdef@generic), sQuote(cnames)), domain = NA)    }    else stop(\"Internal error in finding inherited methods; didn't return a unique method\",         domain = NA)})(list(structure(\"MatrixList\", package = \"GenomAutomorphism\")),     new(\"standardGeneric\", .Data = function (x, ...)     standardGeneric(\"matrices\"), generic = structure(\"matrices\", package = \"GenomAutomorphism\"),         package = \"GenomAutomorphism\", group = list(), valueClass = character(0),         signature = \"x\", default = NULL, skeleton = (function (x,             ...)         stop(\"invalid call in method dispatch to 'matrices' (no default method)\",             domain = NA))(x, ...)), <environment>): unable to find an inherited method for function ‘matrices’ for signature ‘\"MatrixList\"’  ## Coordinate representation of the aligned sequences on \"Z4\". ## A list of matrices matrices(     x = aln,     base_seq = FALSE,     filepath = NULL,     cube = \"ACGT\",     group = \"Z5^3\", ) #> Error in validObject(.Object): invalid class “CodonGroup” object:  #>     *** Argument 'x' is not a CodonGroup-class object.The slot 'group' is #>     not present or wrong naming."},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/mut_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Classification of DNA base mutations — mut_type","title":"Classification of DNA base mutations — mut_type","text":"DNA/RNA base can classified three main classes according three criteria (1): number hydrogen bonds (strong-weak), chemical type (purine-pyrimidine), chemical groups (amino versus keto). criterion produces partition set bases: 1) According number hydrogen bonds (DNA/RNA double helix): strong S=C,G (three hydrogen bonds) weak W=,U (two hydrogen bonds). According chemical type: purines R=, G pyrimidines Y=C,U. 3). According presence amino keto groups base rings: amino M=C,keto K=G,U. , mutational event can classified according type involved (2).","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/mut_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classification of DNA base mutations — mut_type","text":"","code":"mut_type(x, y)"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/mut_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classification of DNA base mutations — mut_type","text":"x, y Character strings denoting DNA bases","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/mut_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classification of DNA base mutations — mut_type","text":"charqacter string length 'x' 'y'.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/mut_type.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Classification of DNA base mutations — mut_type","text":". Cornish-Bowden, Nomenclature incompletely specified bases nucleic acid sequences: recommendations 1984, Nucleic Acids Res. 13 (1985) 3021–3030. MA.. Jiménez-Montaño, C.R. de la Mora-Basánez, T. Pöschel, hypercube structure genetic code explains conservative non-conservative aminoacid substitutions vivo vitro, Biosystems. 39 (1996) 117–125.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/seqranges.html","id":null,"dir":"Reference","previous_headings":"","what":"Get DNA sequence Ranges and Coordinates representation on a given\nAbelian Group — seqranges","title":"Get DNA sequence Ranges and Coordinates representation on a given\nAbelian Group — seqranges","text":"Extract gene ranges coordinates pairwise alignment codon/base sequences represented given Abelian group.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/seqranges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get DNA sequence Ranges and Coordinates representation on a given\nAbelian Group — seqranges","text":"","code":"seqranges(x, ...)  # S4 method for CodonSeq seqranges(x, granges = TRUE)  # S4 method for DNAStringSet_OR_NULL seqranges(   x,   granges = TRUE,   base_seq = TRUE,   filepath = NULL,   start = NA,   end = NA,   chr = 1L,   strand = \"+\" )"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/seqranges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get DNA sequence Ranges and Coordinates representation on a given\nAbelian Group — seqranges","text":"x object DNAStringSet DNAMultipleAlignment class carrying DNA pairwise alignment two sequences. granges Logical. Whether return GRanges-class object DataFrame. base_seq Logical. Whether return base codon coordinates selected Abelian group. codon coordinates requested, number DNA bases given sequences must multiple 3. filepath character vector containing path file fasta format read. argument must given codon & base arguments provided. start, end, chr, strand Optional parameters required build GRanges-class. provided default values given function definition used. cube character string denoting one 24 Genetic-code cubes, given references (2-3). group character string denoting group representation given base codon shown reference (1).","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/seqranges.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get DNA sequence Ranges and Coordinates representation on a given\nAbelian Group — seqranges","text":"function provide alternative way get codon coordinate information codon sequence CodonSeq class objects. function can either take output functions codon_coord operate directly DNAStringSet retrieve DNA sequence alignment file.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/seqranges.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get DNA sequence Ranges and Coordinates representation on a given\nAbelian Group — seqranges","text":"Robersy Sanchez, Jesús Barreto (2021) Genomic Abelian Finite Groups. doi: 10.1101/2021.06.01.446543. M. V José, E.R. Morgado, R. Sánchez, T. Govezensky, 24 possible algebraic representations standard genetic code six three dimensions, Adv. Stud. Biol. 4 (2012) 119–152.PDF. R. Sanchez. Symmetric Group Genetic–Code Cubes. Effect Genetic–Code Architecture Evolutionary Process MATCH Commun. Math. Comput. Chem. 79 (2018) 527-560.","code":""},{"path":[]},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/seqranges.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get DNA sequence Ranges and Coordinates representation on a given\nAbelian Group — seqranges","text":"Robersy Sanchez https://genomaths.com","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/seqranges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get DNA sequence Ranges and Coordinates representation on a given\nAbelian Group — seqranges","text":"","code":"## Load a pairwise alignment data(aln) aln #> DNAStringSet object of length 2: #>     width seq #> [1]    51 ACCTATGTTGGTATT---GCGCTCCAACTCCTTGGCTCTAGCTCACTACAT #> [2]    51 ATCTATGTTGGTATTACGACGCTCCAATTCCTTGGGTCC------CTCCTT  ## A GRanges object carrying the aligned DNA sequence. seqranges(     x = aln,     base_seq = TRUE,     filepath = NULL, ) #> GRanges object with 51 ranges and 2 metadata columns: #>        seqnames    ranges strand |        seq1        seq2 #>           <Rle> <IRanges>  <Rle> | <character> <character> #>    [1]        1         1      + |           A           A #>    [2]        1         2      + |           C           T #>    [3]        1         3      + |           C           C #>    [4]        1         4      + |           T           T #>    [5]        1         5      + |           A           A #>    ...      ...       ...    ... .         ...         ... #>   [47]        1        47      + |           T           T #>   [48]        1        48      + |           A           C #>   [49]        1        49      + |           C           C #>   [50]        1        50      + |           A           T #>   [51]        1        51      + |           T           T #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths  ## A GRanges object carrying the aligned codon sequence. seqranges(     x = aln,     base_seq = FALSE,     filepath = NULL, ) #> GRanges object with 17 ranges and 2 metadata columns: #>        seqnames    ranges strand |        seq1        seq2 #>           <Rle> <IRanges>  <Rle> | <character> <character> #>    [1]        1         1      + |         ACC         ATC #>    [2]        1         2      + |         TAT         TAT #>    [3]        1         3      + |         GTT         GTT #>    [4]        1         4      + |         GGT         GGT #>    [5]        1         5      + |         ATT         ATT #>    ...      ...       ...    ... .         ...         ... #>   [13]        1        13      + |         TCT         TCC #>   [14]        1        14      + |         AGC         --- #>   [15]        1        15      + |         TCA         --- #>   [16]        1        16      + |         CTA         CTC #>   [17]        1        17      + |         CAT         CTT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/sortByChromAndStart.html","id":null,"dir":"Reference","previous_headings":"","what":"Sorting GRanges-class objects — sortByChromAndStart","title":"Sorting GRanges-class objects — sortByChromAndStart","text":"Sorts GRanges-class objects seqname (chromosome), start, position.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/sortByChromAndStart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sorting GRanges-class objects — sortByChromAndStart","text":"","code":"sortByChromAndStart(x)  sortByChromAndEnd(gr)"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/sortByChromAndStart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sorting GRanges-class objects — sortByChromAndStart","text":"x GRanges object","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/sortByChromAndStart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sorting GRanges-class objects — sortByChromAndStart","text":"GRanges-class object original object class.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/sortByChromAndStart.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sorting GRanges-class objects — sortByChromAndStart","text":"Objects inherits GRanges-class can sorted well.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/sortByChromAndStart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sorting GRanges-class objects — sortByChromAndStart","text":"","code":"GR <- as(c('chr2:1-1', 'chr1:1-1'), 'GRanges') GR <- sortByChromAndStart(GR)"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/valid.Automorphism.html","id":null,"dir":"Reference","previous_headings":"","what":"Valid Automorphism — valid.Automorphism","title":"Valid Automorphism — valid.Automorphism","text":"Valid Automorphism","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/valid.Automorphism.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Valid Automorphism — valid.Automorphism","text":"","code":"valid.Automorphism(x)"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/valid.Automorphism.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Valid Automorphism — valid.Automorphism","text":"x 'Automorphism object'","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/valid.BaseGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Valid BaseGroup — valid.BaseGroup","title":"Valid BaseGroup — valid.BaseGroup","text":"Valid BaseGroup","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/valid.BaseGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Valid BaseGroup — valid.BaseGroup","text":"","code":"valid.BaseGroup(x)"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/valid.BaseGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Valid BaseGroup — valid.BaseGroup","text":"x 'BaseGroup object'","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/valid.CodonGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Valid CodonGroup — valid.CodonGroup","title":"Valid CodonGroup — valid.CodonGroup","text":"Valid CodonGroup","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/valid.CodonGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Valid CodonGroup — valid.CodonGroup","text":"","code":"valid.CodonGroup(x)"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/valid.CodonGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Valid CodonGroup — valid.CodonGroup","text":"x 'CodonGroup object'","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/news/index.html","id":"genomautomorphism-01","dir":"Changelog","previous_headings":"","what":"GenomAutomorphism 0.1","title":"GenomAutomorphism 0.1","text":"Available https://github.com/genomaths/GenomAutomorphism Initial development.","code":""}]
