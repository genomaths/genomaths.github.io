[{"path":"https://genomaths.github.io/GenomAutomorphism/articles/GenomAutomorphism.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Get started-with GenomAutomorphism","text":"R package compute autimorphisms pairwise aligned DNA sequences represented elements Genomic Abelian group described reference (1). general scenario, whole chromosomes genomic regions population (species close related species) can algebraically represented direct sum cyclic groups specifically Abelian p-groups. Basically, propose representation multiple sequence alignments (MSA) length N finite Abelian group created direct sum Abelian group prime-power order: \\[ \\qquad G = (\\mathbb{Z}_{p^{\\alpha_{1}}_1})^{n_1} \\oplus (\\mathbb{Z}_{p^{\\alpha_{2}}_1})^{n_2} \\oplus \\dots \\oplus (\\mathbb{Z}_{p^{\\alpha_{k}}_k})^{n_k} \\] , \\(p_i\\)’s prime numbers, \\(\\alpha_i \\\\mathbb{N}\\) \\(\\mathbb{Z}_{p^{\\alpha_{}}_i}\\) group integer modulo \\(p^{\\alpha_{}}_i\\). purpose estimating automorphism two aligned DNA sequences, \\(p^{\\alpha_{}}_i \\\\{5, 2^6, 5^3 \\}\\).","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/GenomAutomorphism.html","id":"automorphisms","dir":"Articles","previous_headings":"Overview","what":"Automorphisms","title":"Get started-with GenomAutomorphism","text":"Herein, automorphisms considered algebraic descriptions mutational event observed codon sequences represented different Abelian groups. particular, described references (3-4), representation codon set defined Abelian group 24 possible isomorphic Abelian groups. Abelian groups can labeled based DNA base-order used generate . set 24 Abelian groups can described group isomorphic symmetric group degree four (\\(S_4\\), see reference (4)). support symmetric group 24 Abelian group genetic-code cubes, users can also see Symmetric Group Genetic-CodeCubes., specifically Mathematica notebook IntroductionToZ5GeneticCodeVectorSpace.nb interact using Wolfram Player, freely available (Windows Linux OS) , https://www.wolfram.com/player/.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/GenomAutomorphism.html","id":"load-the-r-libraries","dir":"Articles","previous_headings":"Overview","what":"Load the R libraries","title":"Get started-with GenomAutomorphism","text":"","code":"library(Biostrings) library(GenomAutomorphism)"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/GenomAutomorphism.html","id":"read-the-alignment-fasta-and-encode-the-sequences","dir":"Articles","previous_headings":"","what":"Read the alignment FASTA and encode the sequences","title":"Get started-with GenomAutomorphism","text":"pairwise sequence alignment protein coding regions SARS coronavirus GZ02 (GenBank: AY390556.1) Bat SARS-like coronavirus isolate Rs7327 (GenBank: KY417151.1) provided package.","code":"data(covid_aln, package = \"GenomAutomorphism\") covid_aln #> DNAMultipleAlignment with 2 rows and 29166 columns #>      aln                                                                                            names                #> [1] ATGGAGAGCCTTGTTCTTGGTGTCAACGAGAAAACACACGTCCAAC...CAAAATTCCATGAGTGGAGCTTCTGCTGATTCAACTCAGGCATAA lcl|AY390556.1_cd... #> [2] ATGGAGAGCCTTGTTCTTGGTGTCAACGAGAAAACACACGTCCAAC...CAAAATTCCATGAGTGGAGCTTCTGCTGATTCAACTCAGGCATAA lcl|KY417151.1_cd..."},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/GenomAutomorphism.html","id":"group-representations","dir":"Articles","previous_headings":"","what":"Group representations","title":"Get started-with GenomAutomorphism","text":"DNA sequence read, corresponding codon sequences can represented Abelian group \\(\\mathbb{Z}_{64}\\) (.e., set integers remainder modulo 64). codon coordinates requested cube ACGT. Following reference (4)), cubes labeled based order DNA bases used define sum operation. codon sequences (seq1 seq2) corresponding coordinates (left) returned, well coordinated representation \\(\\mathbb{Z}_{64}\\) (coord1 coord2).","code":"codons <- codon_coord(                     codon = covid_aln,                      cube = \"ACGT\",                      group = \"Z64\",                      chr = 1L,                     strand = \"+\",                     start = 1,                     end = 750) codons #> CodonGroup object with 250 ranges and 4 metadata columns: #>         seqnames    ranges strand |        seq1        seq2      coord1      coord2 #>            <Rle> <IRanges>  <Rle> | <character> <character> <character> <character> #>     [1]        1         1      + |         AAT         AAT           3           3 #>     [2]        1         2      + |         TGG         TGG          46          46 #>     [3]        1         3      + |         GGG         GGG          42          42 #>     [4]        1         4      + |         GTT         GTT          59          59 #>     [5]        1         5      + |         ACG         ACG          18          18 #>     ...      ...       ...    ... .         ...         ...         ...         ... #>   [246]        1       246      + |         CGA         CGA          36          36 #>   [247]        1       247      + |         CGC         CGT          37          39 #>   [248]        1       248      + |         ACG         ACG          18          18 #>   [249]        1       249      + |         CAA         CAA           4           4 #>   [250]        1       250      + |         AGG         AGG          34          34 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/GenomAutomorphism.html","id":"dual-genetic-code-cubes","dir":"Articles","previous_headings":"Group representations","what":"“Dual” genetic-code cubes","title":"Get started-with GenomAutomorphism","text":"particular interest coordinate representation “dual” genetic-code cubes. cubes codons complementary base pairs coordinates corresponding cubes, shown reference (4)). pair “dual” cubes integrates group. example, let’s consider complementary codons “ACG” “TGC”, complementary base pairs: ::T, C:::G, G:::C, symbol “:” denotes hydrogen bonds bases. representations dual cubes “ACGT” “TGCA” \\(\\mathbb{Z}_{4}\\) : sum base coordinates modulo \\(\\mathbb{Z}_{4}\\) 3. result codon different cubes codon representation \\(\\mathbb{Z}_{64}\\) : sum base coordinates modulo \\(\\mathbb{Z}_{64}\\) 63. result codon different cubes","code":"x0 <- c(\"ACG\", \"TGC\") x1 <- DNAStringSet(x0) x1 #> DNAStringSet object of length 2: #>     width seq #> [1]     3 ACG #> [2]     3 TGC x2 <- base_coord(x1, cube = \"ACGT\") x2 #> BaseGroup object with 3 ranges and 4 metadata columns: #>       seqnames    ranges strand |        seq1        seq2    coord1    coord2 #>          <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> #>   [1]        1         1      + |           A           T         0         3 #>   [2]        1         2      + |           C           G         1         2 #>   [3]        1         3      + |           G           C         2         1 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths  x2. <- base_coord(x1, cube = \"TGCA\") x2. #> BaseGroup object with 3 ranges and 4 metadata columns: #>       seqnames    ranges strand |        seq1        seq2    coord1    coord2 #>          <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> #>   [1]        1         1      + |           A           T         3         0 #>   [2]        1         2      + |           C           G         2         1 #>   [3]        1         3      + |           G           C         1         2 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths ## cube \"ACGT\" (x2$coord1 + x2$coord2) %% 4    #> [1] 3 3 3  ## cube \"TGCA\" (x2.$coord1 + x2.$coord2) %% 4    #> [1] 3 3 3 ## Codon ACG (x2$coord1 + x2.$coord1) %% 4  #> [1] 3 3 3  ## Codon TGC (x2$coord2 + x2.$coord2) %% 4  #> [1] 3 3 3 ## cube ACGT x3 <- codon_coord(codon = x2, group = \"Z64\")  x3 #> CodonGroup object with 1 range and 4 metadata columns: #>       seqnames    ranges strand |        seq1        seq2      coord1      coord2 #>          <Rle> <IRanges>  <Rle> | <character> <character> <character> <character> #>   [1]        1         1      + |         ACG         TGC          18          45 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths  ## cube TGCA x3. <- codon_coord(codon = x2., group = \"Z64\")  x3. #> CodonGroup object with 1 range and 4 metadata columns: #>       seqnames    ranges strand |        seq1        seq2      coord1      coord2 #>          <Rle> <IRanges>  <Rle> | <character> <character> <character> <character> #>   [1]        1         1      + |         ACG         TGC          45          18 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths ## cube \"ACGT\" (as.numeric(x3$coord1) + as.numeric(x3$coord2)) %% 64   #> [1] 63  ## cube \"TGCA\" (as.numeric(x3.$coord1) + as.numeric(x3.$coord2)) %% 64    #> [1] 63 ## Codon ACG (as.numeric(x3$coord1) + as.numeric(x3.$coord1)) %% 64  #> [1] 63  ## Codon TGC (as.numeric(x3$coord2) + as.numeric(x3.$coord2)) %% 64  #> [1] 63"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/GenomAutomorphism.html","id":"automorphisms-on-mathbbz_64","dir":"Articles","previous_headings":"","what":"Automorphisms on \\(\\mathbb{Z}_{64}\\)","title":"Get started-with GenomAutomorphism","text":"Automorphisms can computed starting directly FASTA file. Notice can work genomic regions interest giving start end alignment coordinates. \\(\\mathbb{Z}_{64}\\) automorphisms described functions \\(f(x) = k\\,x\\quad mod\\,64\\), \\(k\\) \\(x\\) elements set integers modulo 64. , function automorphism three important arguments given values: group = “Z64”, cube = c(“ACGT”, “TGCA”), cube_alt = c(“CATG”, “GTAC”). groups “Z64” “Z125” mutational events can described automorphisms given cube. analysis automorphisms accomplished set dual genetic-code cubes. character string denoting pairs dual genetic-code cubes, given argument cube. Setting group specifies group automorphisms computed. groups can : “Z5”, “Z64”, “Z125”, “Z5^3”. automorphisms found first set dual cubes, algorithm search automorphisms alternative set dual cubes. Observe two new columns added, automorphism coefficient \\(k\\) (named autm) genetic-code cube automorphism found. convention DNA sequence given positive strand. Since dual cube “ACGT” corresponds complementary base order TGCA, automorphisms described cube TGCA represent mutational events affecting DNA negative strand (-). last result can summarized gene regions follow: , function automorphismByRanges permits classification pairwise alignment protein-coding sub-regions based mutational events observed quantitatively represented automorphisms genetic-code cubes. Searching automorphisms \\(\\mathbb{Z}_{64}\\) permits us quantitative differentiation mutational events different codon positions given DNA protein-encoding region. shown reference (4) set different cubes can applied describe best evolutionary aminoacid scale highly correlated aminoacid physicochemical properties describing observed evolutionary process given protein. information subject can found supporting material reference (4)) GitHub GenomeAlgebra_SymmetricGroup, particularly interacting Mathematica notebook Genetic-Code-Scales_of_Amino-Acids.nb.","code":"autm <- automorphisms(                     seqs = covid_aln,                     group = \"Z64\",                     cube = c(\"ACGT\", \"TGCA\"),                     cube_alt = c(\"CATG\", \"GTAC\"),                     start = 1,                     end = 750,                      verbose = FALSE) autm #> Automorphism object with 250 ranges and 6 metadata columns: #>         seqnames    ranges strand |        seq1        seq2    coord1    coord2      autm        cube #>            <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> <numeric> <character> #>     [1]        1         1      + |         AAT         AAT         3         3         1        ACGT #>     [2]        1         2      + |         TGG         TGG        46        46         1        ACGT #>     [3]        1         3      + |         GGG         GGG        42        42         1        ACGT #>     [4]        1         4      + |         GTT         GTT        59        59         1        ACGT #>     [5]        1         5      + |         ACG         ACG        18        18         1        ACGT #>     ...      ...       ...    ... .         ...         ...       ...       ...       ...         ... #>   [246]        1       246      + |         CGA         CGA        36        36         1        ACGT #>   [247]        1       247      + |         CGC         CGT        37        39        27        ACGT #>   [248]        1       248      + |         ACG         ACG        18        18         1        ACGT #>   [249]        1       249      + |         CAA         CAA         4         4         1        ACGT #>   [250]        1       250      + |         AGG         AGG        34        34         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths aut_range <- automorphismByRanges(autm) aut_range #> GRanges object with 9 ranges and 1 metadata column: #>       seqnames    ranges strand |        cube #>          <Rle> <IRanges>  <Rle> | <character> #>   [1]        1      1-43      + |        ACGT #>   [2]        1        44      - |        TGCA #>   [3]        1    45-105      + |        ACGT #>   [4]        1       106      - |        TGCA #>   [5]        1   107-117      + |        ACGT #>   [6]        1       118      + |        Trnl #>   [7]        1   119-211      + |        ACGT #>   [8]        1       212      - |        TGCA #>   [9]        1   213-250      + |        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/GenomAutomorphism.html","id":"automorphisms-between-whole-genomes-of-sars-cov-2-related-coronaviruses","dir":"Articles","previous_headings":"","what":"Automorphisms between whole genomes of SARS-CoV-2 related coronaviruses","title":"Get started-with GenomAutomorphism","text":"Next, automorphism whole pairwise alignment SARS-CoV-2 related coronaviruses: data available package summary range Regions described automorphism can described translations (labeled “Trnl”) can shown follow: codon positions cover insertion-deletion (indel) mutational events. wholes regions can summarized typing: one indel mutation found region spike glycoprotein located: 7076 - 8331. , pairwise alignment SARS coronavirus GZ02 Bat SARS-like coronavirus (bat-SL-CoVZC45) reveals 8 single indel mutational events, four regions two indel mutations one region 3 indel mutations. general, indel mutational event can modeled translations \\(\\mathbb{Z}_{64}\\).","code":"## Do not need to run it.  covid_autm <- automorphisms(                     seq = covid_aln,                     group = \"Z64\",                     cube = c(\"ACGT\", \"TGCA\"),                     cube_alt = c(\"CATG\", \"GTAC\"),                     verbose = FALSE) data(covid_autm, package = \"GenomAutomorphism\") covid_autm #> Automorphism object with 9722 ranges and 6 metadata columns: #>          seqnames    ranges strand |        seq1        seq2    coord1    coord2      autm        cube #>             <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> <numeric> <character> #>      [1]        1         1      + |         ATG         ATG        50        50         1        ACGT #>      [2]        1         2      + |         GAG         GAG        10        10         1        ACGT #>      [3]        1         3      + |         AGC         AGC        33        33         1        ACGT #>      [4]        1         4      + |         CTT         CTT        55        55         1        ACGT #>      [5]        1         5      + |         GTT         GTT        59        59         1        ACGT #>      ...      ...       ...    ... .         ...         ...       ...       ...       ...         ... #>   [9718]        1      9718      + |         TCA         TCA        28        28         1        ACGT #>   [9719]        1      9719      + |         ACT         ACT        19        19         1        ACGT #>   [9720]        1      9720      + |         CAG         CAG         6         6         1        ACGT #>   [9721]        1      9721      + |         GCA         GCA        24        24         1        ACGT #>   [9722]        1      9722      + |         TAA         TAA        12        12         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths aut_range <- automorphismByRanges(covid_autm) aut_range #> GRanges object with 460 ranges and 1 metadata column: #>         seqnames    ranges strand |        cube #>            <Rle> <IRanges>  <Rle> | <character> #>     [1]        1     1-102      + |        ACGT #>     [2]        1       103      - |        TGCA #>     [3]        1   104-105      + |        ACGT #>     [4]        1       106      - |        TGCA #>     [5]        1   107-201      + |        ACGT #>     ...      ...       ...    ... .         ... #>   [456]        1 9577-9608      + |        ACGT #>   [457]        1      9609      - |        TGCA #>   [458]        1 9610-9674      + |        ACGT #>   [459]        1      9675      - |        TGCA #>   [460]        1 9676-9722      + |        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths idx = which(covid_autm$cube == \"Trnl\") covid_autm[ idx ] #> Automorphism object with 19 ranges and 6 metadata columns: #>        seqnames    ranges strand |        seq1        seq2    coord1    coord2      autm        cube #>           <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> <numeric> <character> #>    [1]        1       916      + |         AAC         AAA         1         0         0        Trnl #>    [2]        1       944      + |         ---         CCG        NA        22         0        Trnl #>    [3]        1       971      + |         ACA         ---        16        NA         0        Trnl #>    [4]        1      7077      + |         ---         AAA        NA         0         0        Trnl #>    [5]        1      9109      + |         AAT         AAA         3         0         0        Trnl #>    ...      ...       ...    ... .         ...         ...       ...       ...       ...         ... #>   [15]        1      9277      + |         CTT         ---        55        NA         0        Trnl #>   [16]        1      9278      + |         CAT         ---         7        NA         0        Trnl #>   [17]        1      9279      + |         GAA         ---         8        NA         0        Trnl #>   [18]        1      9295      + |         AAA         ---         0        NA         0        Trnl #>   [19]        1      9296      + |         CGA         ---        36        NA         0        Trnl #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths idx = which(aut_range$cube == \"Trnl\") aut_range[ idx ] #> GRanges object with 13 ranges and 1 metadata column: #>        seqnames    ranges strand |        cube #>           <Rle> <IRanges>  <Rle> | <character> #>    [1]        1       916      + |        Trnl #>    [2]        1       944      + |        Trnl #>    [3]        1       971      + |        Trnl #>    [4]        1      7077      + |        Trnl #>    [5]        1      9109      + |        Trnl #>    ...      ...       ...    ... .         ... #>    [9]        1 9244-9245      + |        Trnl #>   [10]        1      9247      + |        Trnl #>   [11]        1      9257      + |        Trnl #>   [12]        1 9277-9279      + |        Trnl #>   [13]        1 9295-9296      + |        Trnl #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths data.frame(aut_range[idx]) #>    seqnames start  end width strand cube #> 1         1   916  916     1      + Trnl #> 2         1   944  944     1      + Trnl #> 3         1   971  971     1      + Trnl #> 4         1  7077 7077     1      + Trnl #> 5         1  9109 9109     1      + Trnl #> 6         1  9188 9189     2      + Trnl #> 7         1  9230 9230     1      + Trnl #> 8         1  9234 9235     2      + Trnl #> 9         1  9244 9245     2      + Trnl #> 10        1  9247 9247     1      + Trnl #> 11        1  9257 9257     1      + Trnl #> 12        1  9277 9279     3      + Trnl #> 13        1  9295 9296     2      + Trnl  ## region width width(aut_range[ idx ]) #>  [1] 1 1 1 1 1 2 1 2 2 1 1 3 2"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/GenomAutomorphism.html","id":"bar-plot-automorphism-distribution-by-cubes","dir":"Articles","previous_headings":"Automorphisms between whole genomes of SARS-CoV-2 related coronaviruses","what":"Bar plot automorphism distribution by cubes","title":"Get started-with GenomAutomorphism","text":"automorphism distribution cubes can summarized bar-plot graphic","code":"counts <- table(covid_autm$cube[ covid_autm$autm != 1 |                                      is.na(covid_autm$autm) ])  par(family = \"serif\", cex = 0.9, font = 2, mar=c(4,6,4,4)) barplot(counts, main=\"Automorphism distribution\",         xlab=\"Genetic-code cube representation\",         ylab=\"Fixed mutational events\",         col=c(\"darkblue\",\"red\", \"darkgreen\"),          border = NA, axes = FALSE,          cex.lab = 2, cex.main = 1.5, cex.names = 2) axis(2, at = c(0, 200, 400, 600, 800), cex.axis = 1.5) mtext(side = 1,line = -1.5, at = c(0.7, 1.9, 3.1, 4.3, 5.5),     text = paste0( counts ), cex = 1.4,     col = c(\"white\",\"yellow\", \"black\"))"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/GenomAutomorphism.html","id":"grouping-automorphism-by-automorphisms-coefficients--types-of-mutations","dir":"Articles","previous_headings":"Automorphisms between whole genomes of SARS-CoV-2 related coronaviruses","what":"Grouping automorphism by automorphism’s coefficients. Types of mutations","title":"Get started-with GenomAutomorphism","text":"Barplot frequency mutation types greater 2.  Every single base mutational event across MSA classified according IUPAC nomenclature: 1) According number hydrogen bonds (DNA/RNA double helix): strong S={C, G} (three hydrogen bonds) weak W={, U} (two hydrogen bonds). According chemical type: purines R={, G} pyrimidines Y={C, U}. 3). According presence amino keto groups base rings: amino M={C, } keto K={G, T}. Constant (hold) base positions labeled letter H. , codon positions labeled HKH means first third bases remains constant mutational events bases G T found MSA. analysis frequency mutational events (automorphisms, COVID: human SARS coronavirus GZ02 vs Bat SARS-like coronavirus isolate -SL-CoVZC45) mutation types shown last figure. Results consistent well-known observation highlighted Crick: highest mutational rate found third base codon (HHY: 425, HHR: 189, HHW: 88), followed YHH: 34 first base, lowest rate found second one (5).","code":"autby_coef <- automorphism_bycoef(covid_autm) autby_coef <- autby_coef[ autby_coef$autm != 1 & autby_coef$autm != -1  ] counts <- table(autby_coef$mut_type) counts <- sort(counts, decreasing = TRUE) count. <- counts[ counts > 2 ]  par(family = \"serif\", cex.axis = 2, font = 2, las = 1,      cex.main = 1.4, mar = c(6,2,4,4)) barplot(count., main=\"Automorphism distribution per Mutation type\",         col = colorRampPalette(c(\"red\", \"yellow\", \"blue\"))(36),          border = NA, axes = FALSE,las=2) axis(side = 2,  cex.axis = 2, line = -1.8 ) counts #>  #> HHY HHR HHW YHH HHK HHM RHH HRH HYH HHS MHH WHH HMH KHH HYW YHW RHK RHY WHW YHM YHY HKH HMR HRR HRY HWH KHW RYY YHK YHR  #> 425 189  88  34  32  24  24  18  18  13  12  11   7   6   5   5   4   4   4   4   4   3   3   3   3   3   3   3   3   3  #> HMW HYK KHY KSW MHK MHW MRH RHM RHR RHW RKW RMH RMW RRY RSW RYH RYW SHH SHW SRH WMH WMS WSY YWH HKR HMK HMY HSR HWS HWW  #>   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   1   1   1   1   1   1  #> HWY HYR HYY KHK KHR KKS KMH KMW KRK KRY KSH MHR MHS MKM MMM MRM MWH MWM MWS MWW MYY RMY RRK RRM RSK RYK SHM SHY SKY SMW  #>   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1  #> SRM SWR SWY SYH WHY WRH WRY WWH WWK WWS WWY WYH WYM WYW YHS YKH YKY YRY YWM YWW YWY YYH YYR  #>   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1"},{"path":[]},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/GenomAutomorphism.html","id":"conserved-regions","dir":"Articles","previous_headings":"Automorphisms between whole genomes of SARS-CoV-2 related coronaviruses > Conserved and non-conserved regions","what":"Conserved regions","title":"Get started-with GenomAutomorphism","text":"Conserved non-conserved gene regions can easily observed MSA editing bioinformatic tools. However, interesting get regions coordinates downstream analysis. Conserved regions pairwise comparisons obtain function conserved_regions: Several regions similar one comparison.","code":"conserv <- conserved_regions(covid_autm) conserv #> AutomorphismByCoef object with 6348 ranges and 5 metadata columns: #>          seqnames    ranges strand |        seq1        seq2      autm    mut_type        cube #>             <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <character> <character> #>      [1]        1      1-19      + |         ATG         ATG         1         HHH        ACGT #>      [2]        1      1-19      + |         GAG         GAG         1         HHH        ACGT #>      [3]        1      1-19      + |         AGC         AGC         1         HHH        ACGT #>      [4]        1      1-19      + |         CTT         CTT         1         HHH        ACGT #>      [5]        1      1-19      + |         GTT         GTT         1         HHH        ACGT #>      ...      ...       ...    ... .         ...         ...       ...         ...         ... #>   [6344]        1 9683-9722      + |         GGA         GGA         1         HHH        ACGT #>   [6345]        1 9683-9722      + |         TCT         TCT         1         HHH        ACGT #>   [6346]        1 9683-9722      + |         TCA         TCA         1         HHH        ACGT #>   [6347]        1 9683-9722      + |         GCA         GCA         1         HHH        ACGT #>   [6348]        1 9683-9722      + |         TAA         TAA         1         HHH        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths conserv_unique <- conserved_regions(covid_autm, output = \"unique\") conserv_unique #> GRanges object with 744 ranges and 2 metadata columns: #>         seqnames    ranges strand |      autm        cube #>            <Rle> <IRanges>  <Rle> | <numeric> <character> #>     [1]        1      1-19      + |         1        ACGT #>     [2]        1     21-44      + |         1        ACGT #>     [3]        1     47-52      + |         1        ACGT #>     [4]        1     54-60      + |         1        ACGT #>     [5]        1     62-80      + |         1        ACGT #>     ...      ...       ...    ... .       ...         ... #>   [740]        1 9610-9614      + |         1        ACGT #>   [741]        1 9616-9648      + |         1        ACGT #>   [742]        1 9650-9674      + |         1        ACGT #>   [743]        1 9676-9681      + |         1        ACGT #>   [744]        1 9683-9722      + |         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/GenomAutomorphism.html","id":"automorphisms-on-mathbbz_125","dir":"Articles","previous_headings":"","what":"Automorphisms on \\(\\mathbb{Z}_{125}\\)","title":"Get started-with GenomAutomorphism","text":"Alternatively, can use algebraic representation \\(\\mathbb{Z}_{125}\\). sake reducing computational time example, ‘autm_z125’ available package. summary range whole genome can described automorphisms \\(\\mathbb{Z}_{125}\\).","code":"autm_z125 <- automorphisms(                     seq = covid_aln,                      group = \"Z125\",                      cube = c(\"ACGT\", \"TGCA\"),                     cube_alt = c(\"CATG\", \"GTAC\"),                     verbose = FALSE) data(autm_z125, package = \"GenomAutomorphism\") autm_z125 #> Automorphism object with 9722 ranges and 6 metadata columns: #>          seqnames    ranges strand |        seq1        seq2    coord1    coord2      autm        cube #>             <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> <numeric> <character> #>      [1]        1         1      + |         AGA         AGA        81        81         1        ACGT #>      [2]        1         2      + |         TAT         TAT        49        49         1        ACGT #>      [3]        1         3      + |         GGG         GGG        93        93         1        ACGT #>      [4]        1         4      + |         GTT         GTT       119       119         1        ACGT #>      [5]        1         5      + |         AGT         AGT        84        84         1        ACGT #>      ...      ...       ...    ... .         ...         ...       ...       ...       ...         ... #>   [9718]        1      9718      + |         CTC         CTC       112       112         1        ACGT #>   [9719]        1      9719      + |         TGA         TGA        96        96         1        ACGT #>   [9720]        1      9720      + |         GTT         GTT       119       119         1        ACGT #>   [9721]        1      9721      + |         CTA         CTA       111       111         1        ACGT #>   [9722]        1      9722      + |         AAA         AAA        31        31         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths aut_range_2 <- automorphismByRanges(autm_z125) aut_range_2 #> GRanges object with 9 ranges and 1 metadata column: #>       seqnames    ranges strand |        cube #>          <Rle> <IRanges>  <Rle> | <character> #>   [1]        1    1-1784      + |        ACGT #>   [2]        1 1785-1787      + |        Trnl #>   [3]        1 1788-8117      + |        ACGT #>   [4]        1 8118-8123      + |        Trnl #>   [5]        1 8124-8255      + |        ACGT #>   [6]        1 8256-8261      + |        Trnl #>   [7]        1 8262-8285      + |        ACGT #>   [8]        1 8286-8291      + |        Trnl #>   [9]        1 8292-9722      + |        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths counts <- table(autm_z125$cube[ autm_z125$autm != 1 ])  par(family = \"serif\", cex = 1, font = 2) barplot(counts, main=\"Automorphism distribution\",         xlab=\"Genetic-code cube representation\",         ylab=\"Fixed mutational events\",         col=c(\"darkblue\",\"red\"),          ylim = c(0, 1300),         border = NA, axes = TRUE) mtext(side = 1,line = -2, at = c(0.7, 1.9, 3.1),     text = paste0( counts ), cex = 1.4,     col = c(\"white\",\"red\"))"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/GenomAutomorphism.html","id":"automorphisms-on-the-genetic-code-cube-representation-on-gf5","dir":"Articles","previous_headings":"","what":"Automorphisms on the Genetic-code Cube Representation on GF(5)","title":"Get started-with GenomAutomorphism","text":"Genetic-code Cube Representations Galois Field GF(5) studied (4). codon represented coordinate 3D space. Automorphisms represented diagonal matrices, elements \\(x\\) \\(x \\\\mathbb{Z}_5\\). result available package","code":"autm_3d <- automorphisms(                     seq = covid_aln,                      group = \"Z5^3\",                      cube = c(\"ACGT\", \"TGCA\"),                     cube_alt = c(\"CATG\", \"GTAC\"),                     verbose = FALSE) data(autm_3d, package = \"GenomAutomorphism\") autm_3d #> Automorphism object with 9722 ranges and 6 metadata columns: #>          seqnames    ranges strand |        seq1        seq2   coord1   coord2        autm        cube #>             <Rle> <IRanges>  <Rle> | <character> <character> <matrix> <matrix> <character> <character> #>      [1]        1         1      + |         AGA         AGA    1:3:1    1:3:1       1,1,1        ACGT #>      [2]        1         2      + |         TAT         TAT    4:1:4    4:1:4       1,1,1        ACGT #>      [3]        1         3      + |         GGG         GGG    3:3:3    3:3:3       1,1,1        ACGT #>      [4]        1         4      + |         GTT         GTT    3:4:4    3:4:4       1,1,1        ACGT #>      [5]        1         5      + |         AGT         AGT    1:3:4    1:3:4       1,1,1        ACGT #>      ...      ...       ...    ... .         ...         ...      ...      ...         ...         ... #>   [9718]        1      9718      + |         CTC         CTC    2:4:2    2:4:2       1,1,1        ACGT #>   [9719]        1      9719      + |         TGA         TGA    4:3:1    4:3:1       1,1,1        ACGT #>   [9720]        1      9720      + |         GTT         GTT    3:4:4    3:4:4       1,1,1        ACGT #>   [9721]        1      9721      + |         CTA         CTA    2:4:1    2:4:1       1,1,1        ACGT #>   [9722]        1      9722      + |         AAA         AAA    1:1:1    1:1:1       1,1,1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/GenomAutomorphism.html","id":"grouping-automorphism-by-automorphisms-coefficients","dir":"Articles","previous_headings":"Automorphisms on the Genetic-code Cube Representation on GF(5)","what":"Grouping automorphism by automorphism’s coefficients","title":"Get started-with GenomAutomorphism","text":"Automorphisms preserved codons (DNA base-triplets) represented identity matrix, .e., matrix diagonal elements “1,1,1”. Conserved regions pairwise comparisons obtain function conserved_regions: whole genome mutational events represented automorphisms 3D space \\(\\mathbb{Z}_{5}^3\\), specifically cube ACGT (see 4).","code":"autby_coef_3d <- automorphism_bycoef(autm_3d) autby_coef_3d <- autby_coef_3d[ autby_coef_3d$autm != \"1,1,1\" ] autby_coef_3d #> AutomorphismByCoef object with 1249 ranges and 5 metadata columns: #>          seqnames    ranges strand |        seq1        seq2        autm    mut_type        cube #>             <Rle> <IRanges>  <Rle> | <character> <character> <character> <character> <character> #>      [1]        1        28      + |         GGG         GAG       1,2,1         HRH        ACGT #>      [2]        1        46      + |         CAC         CGC       1,3,1         HRH        ACGT #>      [3]        1        60      + |         CTC         TTC       2,1,1         YHH        ACGT #>      [4]        1        77      + |         TAT         TAC       1,1,3         HHY        ACGT #>      [5]        1        97      + |         GGT         GAT       1,2,1         HRH        ACGT #>      ...      ...       ...    ... .         ...         ...         ...         ...         ... #>   [1245]        1      9649      + |         ATC         ACC       1,3,1         HYH        ACGT #>   [1246]        1      9663      + |         CAT         TAT       2,1,1         YHH        ACGT #>   [1247]        1      9680      + |         TAA         TGA       1,3,1         HRH        ACGT #>   [1248]        1      9688      + |         CGT         CAT       1,2,1         HRH        ACGT #>   [1249]        1      9703      + |         ATC         ACC       1,3,1         HYH        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths conserv <- conserved_regions(autm_3d) conserv #> AutomorphismByCoef object with 6964 ranges and 5 metadata columns: #>          seqnames    ranges strand |        seq1        seq2        autm    mut_type        cube #>             <Rle> <IRanges>  <Rle> | <character> <character> <character> <character> <character> #>      [1]        1      1-27      + |         AGA         AGA       1,1,1         HHH        ACGT #>      [2]        1      1-27      + |         TAT         TAT       1,1,1         HHH        ACGT #>      [3]        1      1-27      + |         GGG         GGG       1,1,1         HHH        ACGT #>      [4]        1      1-27      + |         GTT         GTT       1,1,1         HHH        ACGT #>      [5]        1      1-27      + |         AGT         AGT       1,1,1         HHH        ACGT #>      ...      ...       ...    ... .         ...         ...         ...         ...         ... #>   [6960]        1 9704-9722      + |         CTC         CTC       1,1,1         HHH        ACGT #>   [6961]        1 9704-9722      + |         TGA         TGA       1,1,1         HHH        ACGT #>   [6962]        1 9704-9722      + |         GTT         GTT       1,1,1         HHH        ACGT #>   [6963]        1 9704-9722      + |         CTA         CTA       1,1,1         HHH        ACGT #>   [6964]        1 9704-9722      + |         AAA         AAA       1,1,1         HHH        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths counts <- table(autby_coef_3d$cube[ autby_coef_3d$autm != \"1,1,1\"])  par(family = \"serif\", cex = 1, font = 2, cex.main = 1) barplot(counts, main=\"Automorphism distribution\",         xlab=\"Genetic-code cube representation\",         ylab=\"Fixed mutational events\",         col=c(\"darkblue\",\"red\"),          ylim = c(0, 1300),          border = NA, axes = TRUE) mtext(side = 1,line = -2, at = c(0.7, 1.9),     text = paste0( counts ), cex = 1.4,     col = c(\"white\"))"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/GenomAutomorphism.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Get started-with GenomAutomorphism","text":"","code":"1. Sanchez R, Morgado E, Grau R. Gene algebra from a  genetic code algebraic structure. J Math Biol. 2005 Oct;51(4):431-57.  doi:10.1007/s00285-005-0332-8. Epub 2005 Jul 13. PMID: 16012800. ([PDF](https://arxiv.org/pdf/q-bio/0412033.pdf)).  2. Robersy Sanchez, Jesus Barreto (2021) Genomic Abelian Finite Groups.  [doi:10.1101/2021.06.01.446543](https://doi.org/10.1101/2021.06.01.446543)  3. M. V Jose, E.R. Morgado, R. Sanchez, T. Govezensky, The 24 possible algebraic representations of the standard genetic code in six or in three dimensions, Adv. Stud. Biol. 4 (2012) 119-152. [PDF](https://is.gd/na9eap).  4. R. Sanchez. Symmetric Group of the Genetic-Code Cubes. Effect of the Genetic-Code Architecture on the Evolutionary Process MATCH Commun. Math. Comput. Chem. 79 (2018) 527-560.  [PDF](https://bit.ly/2Z9mjM7).  5. Crick FHC. The Origin of the Genetic Code. J Mol Biol. 1968;38: 367–379."},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/GenomAutomorphism.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Get started-with GenomAutomorphism","text":"output sessionInfo() system document compiled:","code":"#> R version 4.2.1 (2022-06-23) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 20.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] GenomAutomorphism_0.99.3 Biostrings_2.64.0        GenomeInfoDb_1.32.2      XVector_0.36.0           #> [5] IRanges_2.30.0           S4Vectors_0.34.0         BiocGenerics_0.42.0      BiocStyle_2.24.0         #>  #> loaded via a namespace (and not attached): #>  [1] assertthat_0.2.1       rprojroot_2.0.3        digest_0.6.29          foreach_1.5.2          utf8_1.2.2             #>  [6] R6_2.5.1               evaluate_0.15          highr_0.9              pillar_1.8.0           zlibbioc_1.42.0        #> [11] rlang_1.0.4            rstudioapi_0.13        data.table_1.14.2      jquerylib_0.1.4        rmarkdown_2.14         #> [16] pkgdown_2.0.6          textshaping_0.3.6      desc_1.4.1             BiocParallel_1.30.3    stringr_1.4.0          #> [21] numbers_0.8-2          RCurl_1.98-1.7         compiler_4.2.1         xfun_0.30              pkgconfig_2.0.3        #> [26] systemfonts_1.0.4      htmltools_0.5.2        tidyselect_1.1.2       tibble_3.1.7           GenomeInfoDbData_1.2.8 #> [31] bookdown_0.26          codetools_0.2-18       fansi_1.0.3            crayon_1.5.1           dplyr_1.0.9            #> [36] bitops_1.0-7           jsonlite_1.8.0         lifecycle_1.0.1        DBI_1.1.2              magrittr_2.0.3         #> [41] cli_3.3.0              stringi_1.7.6          cachem_1.0.6           fs_1.5.2               doParallel_1.0.17      #> [46] bslib_0.3.1            ellipsis_0.3.2         ragg_1.2.2             generics_0.1.3         vctrs_0.4.1            #> [51] iterators_1.0.14       tools_4.2.1            glue_1.6.2             purrr_0.3.4            parallel_4.2.1         #> [56] fastmap_1.1.0          yaml_2.3.5             BiocManager_1.30.17    GenomicRanges_1.48.0   memoise_2.0.1          #> [61] knitr_1.39             sass_0.4.1"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_and_decision_tree.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"A Short Introduction to Algebraic Taxonomy on Genes Regions","text":"R package compute autimorphisms pairwise aligned DNA sequences represented elements Genomic Abelian group described reference (1). general scenario, whole chromosomes genomic regions population (species close related species) can algebraically represented direct sum cyclic groups specifically Abelian p-groups. Basically, propose representation multiple sequence alignments (MSA) length N finite Abelian group created direct sum Abelian group prime-power order: \\[ \\qquad G = (\\mathbb{Z}_{p^{\\alpha_{1}}_1})^{n_1} \\oplus (\\mathbb{Z}_{p^{\\alpha_{2}}_1})^{n_2} \\oplus \\dots \\oplus (\\mathbb{Z}_{p^{\\alpha_{k}}_k})^{n_k} \\] , \\(p_i\\)’s prime numbers, \\(\\alpha_i \\\\mathbb{N}\\) \\(\\mathbb{Z}_{p^{\\alpha_{}}_i}\\) group integer modulo \\(p^{\\alpha_{}}_i\\). purpose estimating automorphism two aligned DNA sequences, \\(p^{\\alpha_{}}_i \\\\{5, 2^6, 5^3 \\}\\).","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_and_decision_tree.html","id":"automorphisms","dir":"Articles","previous_headings":"Overview","what":"Automorphisms","title":"A Short Introduction to Algebraic Taxonomy on Genes Regions","text":"Herein, automorphisms considered algebraic descriptions mutational event observed codon sequences represented different Abelian groups. particular, described references (3-4), representation codon set defined Abelian group 24 possible isomorphic Abelian groups. Abelian groups can labeled based DNA base-order used generate . set 24 Abelian groups can described group isomorphic symmetric group degree four (\\(S_4\\), see reference (4)). support symmetric group 24 Abelian group genetic-code cubes, users can also see Symmetric Group Genetic-Code Cubes., specifically Mathematica notebook IntroductionToZ5GeneticCodeVectorSpace.nb interact using Wolfram Player, freely available (Windows Linux OS) , https://www.wolfram.com/player/.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_and_decision_tree.html","id":"automorphisms-on-mathbbz_64","dir":"Articles","previous_headings":"","what":"Automorphisms on \\(\\mathbb{Z}_{64}\\)","title":"A Short Introduction to Algebraic Taxonomy on Genes Regions","text":"First, proceed load install, needed, R packages required analysis. needed R package required current analysis can installed : particular, might require install library CHAID can installed typing R console: can install GenomAutomorphism package GitHub required libraries installed, proceed load libraries Next, proceed check DNA multiple sequence alignment (MSA) file. FASTA file carrying MSA primate BRCA1 DNA repair gene. Notice familiar FASTA file, better directly read function automorphisms. However, current example, step can bypassed, since MSA provided provided together GenomAutomorphism R package Load MSA available package sequence names Next, function automorphisms applied represent codon sequence Abelian group \\(\\mathbb{Z}_{64}\\) (.e., set integers remainder modulo 64). codon coordinates requested cube ACGT. Following reference (4)), cubes labeled based order DNA bases used define sum operation. Z64, automorphisms described functions \\(f(x) = k\\,x \\quad mod\\,64\\), \\(k\\) \\(x\\) elements set integers modulo 64. , function automorphisms three important arguments given values: group = “Z64”, cube = c(“ACGT”, “TGCA”), cube_alt = c(“CATG”, “GTAC”). Setting group specifies group automorphisms computed. groups can : “Z5”, “Z64”, “Z125”, “Z5^3”. groups “Z64” “Z125” mutational events can described automorphisms given cube. , character string denoting pairs “dual” genetic-code cubes, given references (1-4)), given argument cube. , base pairs given cubes must complementary . cube pair call dual cubes , shown reference (4)), pair integrates group. automorphisms found first set dual cubes, algorithm search automorphisms alternative set dual cubes. Object brca1_autm included package can load typing:","code":"install.packages(c(\"party\", \"partykit\", \"data.table\", \"ggplot2\",                    \"ggparty\", \"dplyr\"), dependencies=TRUE) install.packages(\"CHAID\", repos=\"http://R-Forge.R-project.org\") devtools::install_git(\"https://github.com/genomaths/GenomAutomorphism.git\") library(GenomAutomorphism) library(Biostrings) library(party) library(partykit) library(data.table) library(ggplot2) library(ggparty) library(dplyr) library(CHAID) ## Do not run it. This is included with package URL <- paste0(\"https://github.com/genomaths/seqalignments/raw/master/BRCA1/\",               \"brca1_primates_dna_repair_20_sequences.fasta\")  brca1_aln <- readDNAMultipleAlignment(filepath = URL) data(\"brca1_aln\", package = \"GenomAutomorphism\") brca1_aln #> DNAMultipleAlignment with 20 rows and 2283 columns #>       aln                                                                                           names                #>  [1] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA NM_007298.3:20-22... #>  [2] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA U64805.1:1-2280_H... #>  [3] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA XM_031011560.1:23... #>  [4] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA XM_031011561.1:23... #>  [5] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA XM_031011562.1:16... #>  [6] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCTCAGATCCCCCACAGCCACTACTGA XM_009432101.3:27... #>  [7] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCTCAGATCCCCCACAGCCACTACTGA XM_009432104.3:37... #>  [8] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCTCAGATCCCCCACAGCCACTACTGA XM_016930487.2:37... #>  [9] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCTCAGATCCCCCACAGCCACTACTGA XM_009432099.3:37... #>  ... ... #> [12] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCTCAGATCCCCCACAGCCACTACTGA XM_034941185.1:24... #> [13] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCTCAGATCCCCCACAGCCACTACTGA XM_034941182.1:25... #> [14] ATGGATTTATCTGCTGTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGATACCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA XM_032163757.1:14... #> [15] ATGGATTTATCTGCTGTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGATACCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA XM_032163756.1:14... #> [16] ATGGATTTATCTGCTGTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGATACCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA XM_032163758.1:13... #> [17] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACGCCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA XM_030923119.1:18... #> [18] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACGCCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA XM_030923118.1:18... #> [19] ATGGATTTACCTGCTGTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA XM_025363316.1:14... #> [20] ATGGATTTATCTGCTGTTCGTGTTGAAGAAGTGCAAAATGTCCTT...CTGGACACCTACCTGATACCCCAGATCCCTCACAGCCACTACTGA XM_039475995.1:49... strtrim(names(brca1_aln@unmasked), 100) #>  [1] \"NM_007298.3:20-2299_Homo_sapiens_BRCA1_DNA_repair_associated_(BRCA1)_transcript_variant_4_mRNA\"       #>  [2] \"U64805.1:1-2280_Homo_sapiens_Brca1-delta11b_(Brca1)_mRNA_complete_cds\"                                #>  [3] \"XM_031011560.1:233-2515_PREDICTED:_Gorilla_gorilla_gorilla_BRCA1_DNA_repair_associated_(BRCA1)_trans\" #>  [4] \"XM_031011561.1:233-2512_PREDICTED:_Gorilla_gorilla_gorilla_BRCA1_DNA_repair_associated_(BRCA1)_trans\" #>  [5] \"XM_031011562.1:163-2442_PREDICTED:_Gorilla_gorilla_gorilla_BRCA1_DNA_repair_associated_(BRCA1)_trans\" #>  [6] \"XM_009432101.3:276-2555_PREDICTED:_Pan_troglodytes_BRCA1_DNA_repair_associated_(BRCA1)_transcript_va\" #>  [7] \"XM_009432104.3:371-2650_PREDICTED:_Pan_troglodytes_BRCA1_DNA_repair_associated_(BRCA1)_transcript_va\" #>  [8] \"XM_016930487.2:371-2650_PREDICTED:_Pan_troglodytes_BRCA1_DNA_repair_associated_(BRCA1)_transcript_va\" #>  [9] \"XM_009432099.3:371-2653_PREDICTED:_Pan_troglodytes_BRCA1_DNA_repair_associated_(BRCA1)_transcript_va\" #> [10] \"XM_034941183.1:254-2533_PREDICTED:_Pan_paniscus_BRCA1_DNA_repair_associated_(BRCA1)_transcript_varia\" #> [11] \"XM_034941184.1:254-2533_PREDICTED:_Pan_paniscus_BRCA1_DNA_repair_associated_(BRCA1)_transcript_varia\" #> [12] \"XM_034941185.1:248-2527_PREDICTED:_Pan_paniscus_BRCA1_DNA_repair_associated_(BRCA1)_transcript_varia\" #> [13] \"XM_034941182.1:254-2536_PREDICTED:_Pan_paniscus_BRCA1_DNA_repair_associated_(BRCA1)_transcript_varia\" #> [14] \"XM_032163757.1:145-2418_PREDICTED:_Hylobates_moloch_BRCA1_DNA_repair_associated_(BRCA1)_transcript_v\" #> [15] \"XM_032163756.1:145-2421_PREDICTED:_Hylobates_moloch_BRCA1_DNA_repair_associated_(BRCA1)_transcript_v\" #> [16] \"XM_032163758.1:139-2412_PREDICTED:_Hylobates_moloch_BRCA1_DNA_repair_associated_(BRCA1)_transcript_v\" #> [17] \"XM_030923119.1:184-2463_PREDICTED:_Rhinopithecus_roxellana_BRCA1_DNA_repair_associated_(BRCA1)_trans\" #> [18] \"XM_030923118.1:183-2465_PREDICTED:_Rhinopithecus_roxellana_BRCA1_DNA_repair_associated_(BRCA1)_trans\" #> [19] \"XM_025363316.1:147-2426_PREDICTED:_Theropithecus_gelada_BRCA1_DNA_repair_associated_(BRCA1)_transcri\" #> [20] \"XM_039475995.1:49-2328_PREDICTED:_Saimiri_boliviensis_boliviensis_BRCA1_DNA_repair_associated_(BRCA1\" ## Do not run it. This is included with package  nams <- c(\"human_1\",\"human_2\",\"gorilla_1\",\"gorilla_2\",\"gorilla_3\",         \"chimpanzee_1\",\"chimpanzee_2\",\"chimpanzee_3\",\"chimpanzee_4\",         \"bonobos_1\",\"bonobos_2\",\"bonobos_3\",\"bonobos_4\",\"silvery_gibbon_1\",         \"silvery_gibbon_1\",\"silvery_gibbon_3\",\"golden_monkey_1\",         \"golden_monkey_2\",\"gelada_baboon\",\"bolivian_monkey\")  brca1_autm <- automorphisms(                       seqs = brca1_aln,                        group = \"Z64\",                        cube = c(\"ACGT\", \"TGCA\"),                       cube_alt = c(\"CATG\", \"GTAC\"),                       nms = nams,                        verbose = FALSE) data(brca1_autm, package = \"GenomAutomorphism\") brca1_autm #> AutomorphismList object of length: 190 #> names(190): human_1.human_2 human_1.gorilla_1 human_1.gorilla_2 ... golden_monkey_2.gelada_baboon golden_monkey_2.bolivian_monkey gelada_baboon.bolivian_monkey  #> -------  #> Automorphism object with 761 ranges and 6 metadata columns: #>         seqnames    ranges strand |        seq1        seq2    coord1    coord2      autm        cube #>            <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> <numeric> <character> #>     [1]        1         1      + |         ATG         ATG        50        50         1        ACGT #>     [2]        1         2      + |         GAT         GAT        11        11         1        ACGT #>     [3]        1         3      + |         TTA         TTA        60        60         1        ACGT #>     [4]        1         4      + |         TCT         TCT        31        31         1        ACGT #>     [5]        1         5      + |         GCT         GCT        27        27         1        ACGT #>     ...      ...       ...    ... .         ...         ...       ...       ...       ...         ... #>   [757]        1       757      + |         CAC         CAC         5         5         1        ACGT #>   [758]        1       758      + |         AGC         AGC        33        33         1        ACGT #>   [759]        1       759      + |         CAC         CAC         5         5         1        ACGT #>   [760]        1       760      + |         TAC         TAC        13        13         1        ACGT #>   [761]        1       761      + |         TGA         TGA        44        44         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #> ... #> <189 more DFrame element(s)> #> Two slots: 'DataList' & 'SeqRanges' #> -------"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_and_decision_tree.html","id":"grouping-automorphisms-by-automorphisms-coefficients","dir":"Articles","previous_headings":"Automorphisms on \\(\\mathbb{Z}_{64}\\)","what":"Grouping automorphisms by automorphism’s coefficients","title":"A Short Introduction to Algebraic Taxonomy on Genes Regions","text":"Automorphisms automorphism’s coefficients can grouped. task can accomplished function automorphism_bycoef. However, sake time, output included package Object brca1_autm included package can load typing: next interested mutational events respect human (reference).","code":"## Not need to run it here autby_coef <- automorphism_bycoef(x = brca1_autm,                                  verbose = FALSE) data(autby_coef, package = \"GenomAutomorphism\") autby_coef #> AutomorphismByCoefList object of length 190: #> $human_1.human_2 #> AutomorphismByCoef object with 239 ranges and 5 metadata columns: #>         seqnames    ranges strand |        seq1        seq2      autm    mut_type        cube #>            <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <character> <character> #>     [1]        1     1-238      + |         ATG         ATG         1         HHH        ACGT #>     [2]        1     1-238      + |         GAT         GAT         1         HHH        ACGT #>     [3]        1     1-238      + |         TTA         TTA         1         HHH        ACGT #>     [4]        1     1-238      + |         TCT         TCT         1         HHH        ACGT #>     [5]        1     1-238      + |         GCT         GCT         1         HHH        ACGT #>     ...      ...       ...    ... .         ...         ...       ...         ...         ... #>   [235]        1   511-761      + |         CCC         CCC         1         HHH        ACGT #>   [236]        1   511-761      + |         CTT         CTT         1         HHH        ACGT #>   [237]        1   511-761      + |         CCT         CCT         1         HHH        ACGT #>   [238]        1   511-761      + |         ATA         ATA         1         HHH        ACGT #>   [239]        1   511-761      + |         TGA         TGA         1         HHH        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #>  #> ... #> <189 more elements> nams <- names(brca1_autm) idx1 <- grep(\"human_1.\", nams) idx2 <- grep(\"human_2.\", nams) idx <- union(idx1, idx2) h_brca1_autm <- unlist(brca1_autm[ idx ]) h_brca1_autm = h_brca1_autm[ which(h_brca1_autm$autm != 1) ] h_brca1_autm #> Automorphism object with 1397 ranges and 6 metadata columns: #>                           seqnames    ranges strand |        seq1        seq2    coord1    coord2      autm        cube #>                              <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> <numeric> <character> #>           human_1.human_2        1       239      + |         CAT         CGT         7        39        33        ACGT #>           human_1.human_2        1       253      + |         GCA         GTA        24        56        21        ACGT #>           human_1.human_2        1       323      + |         TCT         CCT        31        23         9        ACGT #>           human_1.human_2        1       333      + |         TCT         TCC        31        29         3        ACGT #>           human_1.human_2        1       350      + |         ---         ---        NA        NA        -1        Gaps #>                       ...      ...       ...    ... .         ...         ...       ...       ...       ...         ... #>   human_2.bolivian_monkey        1       716      + |         AAT         AGT         3        35        33        ACGT #>   human_2.bolivian_monkey        1       726      + |         GAG         GAA        10         8        52        ACGT #>   human_2.bolivian_monkey        1       730      + |         GTG         GTA        58        56        12        ACGT #>   human_2.bolivian_monkey        1       731      + |         ACC         ACT        17        19        35        ACGT #>   human_2.bolivian_monkey        1       756      + |         CCC         CCT        21        23        59        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_and_decision_tree.html","id":"bar-plot-automorphism-distribution-by-coefficient","dir":"Articles","previous_headings":"Automorphisms on \\(\\mathbb{Z}_{64}\\)","what":"Bar plot automorphism distribution by coefficient","title":"A Short Introduction to Algebraic Taxonomy on Genes Regions","text":"automorphism distribution cubes can summarized bar-plot graphic. Object autby_coef carried pairwise comparisons, enough use data single species reference, e.g., humans. First data must reordered object: Every single base mutational event across MSA classified according IUPAC nomenclature: 1) According number hydrogen bonds (DNA/RNA double helix): strong S={C, G} (three hydrogen bonds) weak W={, U} (two hydrogen bonds). According chemical type: purines R={, G} pyrimidines Y={C, U}. 3). According presence amino keto groups base rings: amino M={C, } keto K={G, T}. Constant (hold) base positions labeled letter H. , codon positions labeled HKH means first third bases remains constant mutational events bases G T found MSA. Nominal variables transformed ","code":"h_autby_coef <- automorphism_bycoef(x = h_brca1_autm) h_autby_coef #> AutomorphismByCoef object with 1341 ranges and 5 metadata columns: #>                            seqnames    ranges strand |        seq1        seq2      autm    mut_type        cube #>                               <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <character> <character> #>      human_1.gelada_baboon        1         4      + |         TCT         CCT         9         YHH        ACGT #>      human_2.gelada_baboon        1         4      + |         TCT         CCT         9         YHH        ACGT #>   human_1.silvery_gibbon_1        1         6      + |         CTT         GTT        29         SHH        ACGT #>   human_1.silvery_gibbon_1        1         6      + |         CTT         GTT        29         SHH        ACGT #>   human_1.silvery_gibbon_3        1         6      + |         CTT         GTT        29         SHH        ACGT #>                        ...      ...       ...    ... .         ...         ...       ...         ...         ... #>          human_2.bonobos_2        1       753      + |         CCC         CCT        59         HHY        ACGT #>          human_2.bonobos_3        1       753      + |         CCC         CCT        59         HHY        ACGT #>          human_2.bonobos_4        1       753      + |         CCC         CCT        59         HHY        ACGT #>    human_1.bolivian_monkey        1       756      + |         CCC         CCT        59         HHY        ACGT #>    human_2.bolivian_monkey        1       756      + |         CCC         CCT        59         HHY        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths nams <- names(h_autby_coef) nams <- sub(\"human[_][1-2][.]\", \"\", nams) nams <- sub(\"[_][1-6]\", \"\", nams)  dt <- data.frame(h_autby_coef, species = nams) dt <- data.frame(dt, species = nams) dt <- dt[, c(\"start\", \"autm\", \"species\", \"mut_type\", \"cube\")] DataFrame(dt) #> DataFrame with 1341 rows and 5 columns #>          start      autm         species    mut_type        cube #>      <integer> <numeric>     <character> <character> <character> #> 1            4         9   gelada_baboon         YHH        ACGT #> 2            4         9   gelada_baboon         YHH        ACGT #> 3            6        29  silvery_gibbon         SHH        ACGT #> 4            6        29  silvery_gibbon         SHH        ACGT #> 5            6        29  silvery_gibbon         SHH        ACGT #> ...        ...       ...             ...         ...         ... #> 1337       753        59         bonobos         HHY        ACGT #> 1338       753        59         bonobos         HHY        ACGT #> 1339       753        59         bonobos         HHY        ACGT #> 1340       756        59 bolivian_monkey         HHY        ACGT #> 1341       756        59 bolivian_monkey         HHY        ACGT dt$start <- as.numeric(dt$start) dt$autm <- as.numeric(dt$autm) dt$cube <- as.factor(dt$cube) dt$species <- as.factor(dt$species) dt$mut_type <- as.factor(dt$mut_type) counts <- table(dt$cube)  par(family = \"serif\", cex = 0.6, font = 2, mar=c(4,6,4,4)) barplot(counts, #main=\"Automorphism distribution\",         xlab=\"Genetic-code cube representation\",         ylab=\"Fixed mutational events\",         col=c(\"darkblue\",\"red\", \"darkgreen\", \"magenta\", \"orange\"),          border = NA, axes = F, #ylim = c(0, 6000),         cex.lab = 2, cex.main = 1.5, cex.names = 2) axis(2, at = c(0, 200, 400, 600, 800, 1000), cex.axis = 1.5) mtext(side = 1,line = -2.8, at = c(0.7, 1.9, 3.1, 4.3),       text = paste0( counts ), cex = 1.4,       col = c(\"white\", \"red\",\"yellow\", \"black\"))"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_and_decision_tree.html","id":"classification-tree-chi-squared-automated-interaction-detection-chaid","dir":"Articles","previous_headings":"Automorphisms on \\(\\mathbb{Z}_{64}\\)","what":"Classification Tree Chi-squared Automated Interaction Detection (CHAID)","title":"A Short Introduction to Algebraic Taxonomy on Genes Regions","text":"current CHAID implementation accepts nominal ordinal categorical predictors. predictors continuous, transformed ordinal predictors using following algorithm. create ordinal variable autms variable autm. CHAID can download : <install.packages(“CHAID”, repos=“http://R-Forge.R-project.org”)> classification tree estimated CHAID algorithm:","code":"interval <- function(x, a, b) {     x >= a & x <= b }  datos = dt datos$autms <- case_when(datos$autm < 16 ~ 'A1',                   interval(datos$autm, 16, 31) ~ 'A2',                   interval(datos$autm, 32, 47) ~ 'A3',                   datos$autm > 47 ~ 'A4') datos$autms <- as.factor(datos$autms)  datos$mut_type <- as.character(datos$mut_type) datos$mut_type[ which(datos$cube == \"Trnl\") ] <- \"indel\" datos$mut_type[ which(datos$cube == \"Gaps\") ] <- \"---\" datos$mut_type <- as.factor(datos$mut_type)  datos$regions <- case_when(datos$start < 230 ~ 'R0',                   interval(datos$start, 230, 270) ~ 'R1',                   interval(datos$start, 271, 305) ~ 'R2',                   interval(datos$start, 306, 338) ~ 'R3',                   interval(datos$start, 339, 533) ~ 'R4',                   interval(datos$start, 534, 570) ~ 'R5',                   interval(datos$start, 571, 653) ~ 'R6',                   interval(datos$start, 654, 709) ~ 'R7',                   datos$start > 709 ~ 'R8')  datos$regions <- as.factor(datos$regions)  datos$autm <- as.factor(datos$autm) datos$species <- as.factor(datos$species) datos$start <- as.factor(datos$start) datos$cube <- as.factor(datos$cube) datos <- datos[, c( \"autms\", \"regions\", \"mut_type\", \"cube\", \"species\")] DataFrame(datos) #> DataFrame with 1341 rows and 5 columns #>         autms  regions mut_type     cube         species #>      <factor> <factor> <factor> <factor>        <factor> #> 1          A1       R0      YHH     ACGT  gelada_baboon  #> 2          A1       R0      YHH     ACGT  gelada_baboon  #> 3          A2       R0      SHH     ACGT  silvery_gibbon #> 4          A2       R0      SHH     ACGT  silvery_gibbon #> 5          A2       R0      SHH     ACGT  silvery_gibbon #> ...       ...      ...      ...      ...             ... #> 1337       A4       R8      HHY     ACGT bonobos         #> 1338       A4       R8      HHY     ACGT bonobos         #> 1339       A4       R8      HHY     ACGT bonobos         #> 1340       A4       R8      HHY     ACGT bolivian_monkey #> 1341       A4       R8      HHY     ACGT bolivian_monkey ctrl <- chaid_control(minsplit = 200, minprob = 0.8, alpha2 = 0.01, alpha4 = 0.01) chaid_res <- chaid(species ~ autms + regions + mut_type + cube , data = datos,                    control = ctrl)"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_and_decision_tree.html","id":"plotting-the-chaid-tree","dir":"Articles","previous_headings":"Automorphisms on \\(\\mathbb{Z}_{64}\\) > Classification Tree Chi-squared Automated Interaction Detection (CHAID)","what":"Plotting the CHAID tree","title":"A Short Introduction to Algebraic Taxonomy on Genes Regions","text":"Next, data must prepared plotting tree ggparty: Plotting tree ggparty (font size adjusted html output)","code":"##  Updating CHAID decision tree dp <- data_party(chaid_res) dat <- dp[, c(\"autms\", \"regions\", \"mut_type\", \"cube\")] dat$species <- dp[, \"(response)\"]           chaid_tree <- party(node = node_party(chaid_res),                      data = dat,                     fitted =  dp[, c(\"(fitted)\", \"(response)\")],                      names = names(chaid_res))  ## Extract p-values pvals <- unlist(nodeapply(chaid_tree, ids = nodeids(chaid_tree), function(n) {     pvals <- info_node(n)$adjpvals     pvals < pvals[ which.min(pvals) ]     return(pvals) })) pvals <- pvals[ pvals < 0.05 ]  ## Counts of event per spciees on each node node.freq <- sapply(seq_along(chaid_tree), function(id) {     y <- data_party(chaid_tree, id = id)     y <- y[[ \"(response)\" ]]     table(y) }) ## total counts on each node.size =  colSums(node.freq) ggparty(chaid_tree) +     geom_edge(aes(color = id, size = node.size[id]/300), show.legend = FALSE) +     geom_edge_label(size = 14, colour = \"red\",                     fontface = \"bold\",                      shift = 0.64,                      nudge_x = -0.01,                     max_length = 10,                     splitlevels = 1:4) +     geom_node_label(line_list = list(aes(label = paste0(\"Node \", id, \": \", splitvar)),                 aes(label = paste0(\"N=\", node.size[id], \", p\",                                   ifelse(pvals < .001, \"<.001\",                                         paste0(\"=\", round(pvals, 3)))),                      size = 30)),                     line_gpar = list(list(size = 30),                                       list(size = 30)),                 ids = \"inner\", fontface = \"bold\", size = 30) +     geom_node_info() +     geom_node_label(aes(label = paste0(\"N = \", node.size),                          fontface = \"bold\"),                     ids = \"terminal\", nudge_y = -0.0, nudge_x = 0.01, size = 12) +     geom_node_plot(gglist = list(         geom_bar(aes(x = \"\", fill = species), size = 0.2, width = 0.9,                  position = position_fill(), color = \"black\"),         theme_minimal(base_family = \"arial\", base_size = 46),         scale_fill_manual(values = c(\"gray50\",\"gray55\",\"gray60\",                                      \"gray70\",\"gray80\",\"gray85\",                                      \"blue\",\"gray95\")),         xlab(\"\"),          ylab(\"Probability\"),          geom_text(aes(x = \"\", group = species,                        label = stat(count)),                   stat = \"count\", position = position_fill(),                    vjust = 1., size = 12)),         shared_axis_labels = TRUE, size = 1.2)"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_and_decision_tree.html","id":"stochastic-deterministic-logical-rules","dir":"Articles","previous_headings":"Automorphisms on \\(\\mathbb{Z}_{64}\\) > Classification Tree Chi-squared Automated Interaction Detection (CHAID)","what":"Stochastic-deterministic logical rules","title":"A Short Introduction to Algebraic Taxonomy on Genes Regions","text":"Since one mutational event human--human region R1 class A3 reported right side tree, high probability non-humans hold following rule: humans--human mutations hold following rule: non-humans hold following rule printing version TIFF format :","code":"rule <- (dat$autms == \"A4\" | (dat$autms == \"A3\" & dat$mut_type != \"HRH\")) unique(as.character(dat[rule,]$species)) #> [1] \"bolivian_monkey\" \"golden_monkey\"   \"gelada_baboon\"   \"silvery_gibbon\"  \"chimpanzee\"      \"bonobos\"         #> [7] \"gorilla\" idx <- dat$autm == \"A1\" & dat$regions == \"R3\" & (dat$mut_type == \"HHY\" | dat$mut_type == \"YHH\") dat[ idx, ] #>     autms regions mut_type cube species #> 606    A1      R3      YHH ACGT   human #> 661    A1      R3      HHY ACGT   human rule <- (dat$autms == \"A4\" | (dat$autms == \"A3\" & dat$regions != \"R1\")) unique(as.character(dat[rule,]$species)) #> [1] \"bolivian_monkey\" \"golden_monkey\"   \"gelada_baboon\"   \"silvery_gibbon\"  \"gorilla\"         \"chimpanzee\"      #> [7] \"bonobos\" # tiff(filename = \"~/home/chaid_tree.tiff\", #      width = 3000, height = 1800, units = \"px\", pointsize = 1, #      compression = \"lzw\", bg = \"white\", res = 600) #  # ggparty(chaid_tree) + #     geom_edge(aes(color = id), show.legend = FALSE) + #     geom_edge_label(size = 1, colour = \"red\", fontface = \"bold\") + #     geom_node_label(line_list = list(aes(label = paste0(\"Node \", id,\": \", splitvar)), #                             aes(label = paste0(\"N=\", node.size[id], \", p\", #                                 ifelse(pvals < .001, \"<.001\", #                                      paste0(\"=\", round(pvals, 3)))))), #                     line_gpar = list(list(size = 4),  #                                      list(size = 4)), #                     ids = \"inner\", label.size = 0.1) + #     geom_node_info(size = 2) + #     geom_node_label(aes(label = paste0(\"N = \", nodesize)), #                     ids = \"terminal\", nudge_y = -0.0,  #                     nudge_x = 0.01, label.size = 0.1, #                     line_gpar = list(list(size = 3.5),  #                                      list(size = 3.5))) + #     geom_node_plot(gglist = list( #         geom_bar(aes(x = \"\", fill = species), size = 0.2, width = 10, #                  position = position_fill(), color = \"black\"), #         theme_minimal(base_family = \"arial\", base_size = 5), #         scale_fill_manual(values = c(\"gray50\",\"gray55\",\"gray60\", #                                      \"gray70\",\"gray80\",\"gray85\", #                                      \"blue\",\"gray95\")), #         xlab(\"\"),  #         ylab(\"Probability\"),  #         geom_text(aes(x = \"\", group = species,  #                       label = stat(count)), #                   stat = \"count\", position = position_fill(),  #                   vjust = 1., size = 1)), #         shared_axis_labels = TRUE, size = 1.) #  #  # dev.off()"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_and_decision_tree.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"A Short Introduction to Algebraic Taxonomy on Genes Regions","text":"1. Sanchez R, Morgado E, Grau R. Gene algebra genetic code algebraic structure. J Math Biol. 2005 Oct;51(4):431-57. doi: 10.1007/s00285-005-0332-8. Epub 2005 Jul 13. PMID: 16012800. ( PDF). 2. Robersy Sanchez, Jesús Barreto (2021) Genomic Abelian Finite Groups. doi: 10.1101/2021.06.01.446543. 3. M. V José, E.R. Morgado, R. Sánchez, T. Govezensky, 24 possible algebraic representations standard genetic code six three dimensions, Adv. Stud. Biol. 4 (2012) 119–152.PDF. 4. R. Sanchez. Symmetric Group Genetic–Code Cubes. Effect Genetic–Code Architecture Evolutionary Process MATCH Commun. Math. Comput. Chem. 79 (2018) 527-560. PDF.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Analysis of Automorphisms on a DNA Multiple Sequence Alignment","text":"R package compute autimorphisms pairwise aligned DNA sequences represented elements Genomic Abelian group described reference (1). general scenario, whole chromosomes genomic regions population (species close related species) can algebraically represented direct sum cyclic groups specifically Abelian p-groups. Basically, propose representation multiple sequence alignments (MSA) length N finite Abelian group created direct sum homocyclic Abelian groups prime-power order: \\[ \\qquad G = (\\mathbb{Z}_{p^{\\alpha_{1}}_1})^{n_1} \\oplus (\\mathbb{Z}_{p^{\\alpha_{2}}_1})^{n_2} \\oplus \\dots \\oplus (\\mathbb{Z}_{p^{\\alpha_{k}}_k})^{n_k} \\] , \\(p_i\\)’s prime numbers, \\(\\alpha_i \\\\mathbb{N}\\) \\(\\mathbb{Z}_{p^{\\alpha_{}}_i}\\) group integer modulo \\(p^{\\alpha_{}}_i\\). purpose estimating automorphism two aligned DNA sequences, \\(p^{\\alpha_{}}_i \\\\{5, 2^6, 5^3 \\}\\).","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa.html","id":"automorphisms","dir":"Articles","previous_headings":"Overview","what":"Automorphisms","title":"Analysis of Automorphisms on a DNA Multiple Sequence Alignment","text":"Herein, automorphisms considered algebraic descriptions mutational event observed codon sequences represented different Abelian groups. particular, described references (3-4), representation codon set defined Abelian group 24 possible isomorphic Abelian groups. Abelian groups can labeled based DNA base-order used generate . set 24 Abelian groups can described group isomorphic symmetric group degree four (\\(S_4\\), see reference (4)). support symmetric group 24 Abelian group genetic-code cubes, users can also see Symmetric Group Genetic-Code Cubes., specifically Mathematica notebook IntroductionToZ5GeneticCodeVectorSpace.nb interact using Wolfram Player, freely available (Windows Linux OS) , https://www.wolfram.com/player/.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa.html","id":"automorphisms-on-mathbbz_64","dir":"Articles","previous_headings":"","what":"Automorphisms on \\(\\mathbb{Z}_{64}\\)","title":"Analysis of Automorphisms on a DNA Multiple Sequence Alignment","text":"First, proceed load R package required analysis Next, proceed check DNA multiple sequence alignment (MSA) file. ia FASTA file carrying MSA mammals (somatic) Cystocrome c. Notice familiar FASTA file, better directly read function automorphisms. However, current example, step can bypassed, since MSA provided provided together GenomAutomorphism R package Load MSA available package sequence names corresponding aminoacid sequence : Next, function automorphisms applied represent codon sequence Abelian group \\(\\mathbb{Z}_{64}\\) (.e., set integers remainder modulo 64). codon coordinates requested cube ACGT. Following reference (4)), cubes labeled based order DNA bases used define sum operation. Z64, automorphisms described functions \\(f(x) = k\\,x \\quad mod\\,64\\), \\(k\\) \\(x\\) elements set integers modulo 64. , function automorphisms three important arguments given values: group = “Z64”, cube = c(“ACGT”, “TGCA”), cube_alt = c(“CATG”, “GTAC”). Setting group specifies group automorphisms computed. groups can : “Z5”, “Z64”, “Z125”, “Z5^3”. groups “Z64” “Z125” mutational events can described automorphisms given cube. , character string denoting pairs “dual” genetic-code cubes, given references (1-4)), given argument cube. , base pairs given cubes must complementary . cube pair call dual cubes , shown reference (4)), pair integrates group. automorphisms found first set dual cubes, algorithm search automorphism alternative set dual cubes. Object autm included package can load typing: AutomorphismList class object returned. codon sequences (seq1 seq2) corresponding coordinates (left) returned, well coordinated representation \\(\\mathbb{Z}_{64}\\) (coord1 coord2). Observe two new columns added, automorphism coefficient \\(k\\) (named autm) genetic-code cube automorphism found. convention DNA sequence given positive strand. Since dual cube “ACGT” corresponds complementary base order TGCA, automorphisms described cube TGCA represent mutational events affecting DNA negative strand (-).","code":"library(GenomAutomorphism) library(Biostrings) library(ggseqlogo) ## Do not run it. This is included with package URL <- paste0(\"https://github.com/genomaths/seqalignments/raw/master/CYCS/\",               \"primate_cytochrome_c_(CYCS)_18_sequences.fasta\")  cyc_aln <- readDNAMultipleAlignment(filepath = URL) data(\"cyc_aln\") cyc_aln #> DNAMultipleAlignment with 19 rows and 318 columns #>       aln                                                                                           names                #>  [1] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTAATAGCTTATCTCAAAAAAGCTACTAATGAGTAA NM_018947.6 Homo ... #>  [2] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTAATAGCTTATCTCAAAAAAGCTACTAATGAGTAA gb|BC021994.1|  [... #>  [3] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTAATAGCTTATCTCAAAAAAGCTACTAATGAGTAA ref|XM_019031021.... #>  [4] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTAATAGCTTATCTCAAAAAAGCTACTAATGAGTAA dbj|AK311836.1|  ... #>  [5] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTAATAGCTTATCTCAAAAAAGCTACTAATGAGTAA gb|BC067222.1|  [... #>  [6] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTAATAGCTTATCTCAAAAAAGCTACTAATGAGTAA gb|BC068464.1|  [... #>  [7] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTAATAGCTTATCTCAAAAAAGCTACTAATGAGTAA gb|BC015130.1|  [... #>  [8] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTGATAGCTTATCTCAAAAAAGCTACTAATGAGTAA ref|XM_032759077.... #>  [9] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTGATAGCTTATCTCAAAAAAGCTACTAATGAGTAA ref|XM_003270423.... #> [10] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTGATAGCTTATCTCAAAAAAGCTACTAATGAGTAA ref|XM_033192823.... #> [11] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTGATAGCTTATCTCAAAAAAGCTACTAATGAGTAA ref|XM_003896182.... #> [12] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTGATAGCTTATCTCAAAAAAGCTACTAATGAGTAA ref|XM_003895240.... #> [13] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTGATAGCTTATCTCAAAAAAGCTACTAATGAGTAA ref|XM_010375926.... #> [14] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTGATAGCTTATCTCAAAAAAGCTACTAATGAGTAA ref|XM_028845949.... #> [15] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTGATAGCTTATCTCAAAAAAGCTACTAATGAGTAA ref|XM_028845948.... #> [16] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTGATAGCTTATCTCAAAAAAGCTACTAATGAGTAA ref|XM_025380676.... #> [17] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTGATAGCTTATCTCAAAAAAGCTACTAATGAGTAA ref|XM_025380675.... #> [18] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTAATAGCTTATCTCAAAAAAGCTACTAATGAGTAA ref|NM_001131167.... #> [19] ATGGGTGATGTTGAGAAAGGCAAGAAGATTTTTATTATGAAGTGT...AGGGCAGACTTAATAGCTTATCTCAAAAAAGCTACTAATGAGTAA emb|CR857183.1|  ... strtrim(rownames(cyc_aln), 100) #>  [1] \"NM_018947.6 Homo sapiens cytochrome c, somatic (CYCS), mRNA\"                                          #>  [2] \"gb|BC021994.1|  [organism=Homo sapiens] [note=Vector: pDNR-LIB] [gcode=1] [clone=MGC:24510 IMAGE:409\" #>  [3] \"ref|XM_019031021.2|  [location=chromosome] [chromosome=7] [organism=Gorilla gorilla gorilla] [isolat\" #>  [4] \"dbj|AK311836.1|  [organism=Homo sapiens] [gcode=1] [clone=BRACE3022676] [tissue_type=cerebellum] [cl\" #>  [5] \"gb|BC067222.1|  [organism=Homo sapiens] [note=Vector: pDNR-LIB] [gcode=1] [clone=MGC:72005 IMAGE:368\" #>  [6] \"gb|BC068464.1|  [organism=Homo sapiens] [note=Vector: pBluescriptR] [gcode=1] [clone=MGC:87065 IMAGE\" #>  [7] \"gb|BC015130.1|  [organism=Homo sapiens] [note=Vector: pDNR-LIB] [gcode=1] [clone=MGC:24248 IMAGE:393\" #>  [8] \"ref|XM_032759077.1|  [chromosome=Unknown] [organism=Hylobates moloch] [isolate=HMO894] [note=Lionel]\" #>  [9] \"ref|XM_003270423.4|  [location=chromosome] [chromosome=17] [organism=Nomascus leucogenys] [isolate=A\" #> [10] \"ref|XM_033192823.1|  [chromosome=Unknown] [organism=Trachypithecus francoisi] [isolate=TF-2019V2] [g\" #> [11] \"ref|XM_003896182.3|  [location=chromosome] [chromosome=4] [organism=Papio anubis] [isolate=15944] [g\" #> [12] \"ref|XM_003895240.5|  [location=chromosome] [chromosome=2] [organism=Papio anubis] [isolate=15944] [g\" #> [13] \"ref|XM_010375926.2|  [location=chromosome] [chromosome=6] [organism=Rhinopithecus roxellana] [isolat\" #> [14] \"ref|XM_028845949.1|  [location=chromosome] [chromosome=3] [organism=Macaca mulatta] [isolate=AG07107\" #> [15] \"ref|XM_028845948.1|  [location=chromosome] [chromosome=3] [organism=Macaca mulatta] [isolate=AG07107\" #> [16] \"ref|XM_025380676.1|  [location=chromosome] [chromosome=3] [organism=Theropithecus gelada] [isolate=D\" #> [17] \"ref|XM_025380675.1|  [location=chromosome] [chromosome=3] [organism=Theropithecus gelada] [isolate=D\" #> [18] \"ref|NM_001131167.2|  [chromosome=7] [organism=Pongo abelii] [gcode=1] [chromosome=7] [map=7] Pongo a\" #> [19] \"emb|CR857183.1|  [organism=Pongo abelii] [gcode=1] [clone=DKFZp468F1016] [tissue_type=heart] [clone_\" translate(cyc_aln@unmasked) #> AAStringSet object of length 19: #>      width seq                                                                                      names                #>  [1]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* NM_018947.6 Homo ... #>  [2]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* gb|BC021994.1|  [... #>  [3]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* ref|XM_019031021.... #>  [4]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* dbj|AK311836.1|  ... #>  [5]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* gb|BC067222.1|  [... #>  ...   ... ... #> [15]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* ref|XM_028845948.... #> [16]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* ref|XM_025380676.... #> [17]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* ref|XM_025380675.... #> [18]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* ref|NM_001131167.... #> [19]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* emb|CR857183.1|  ... ## Do not run it. This is included with package  nams <- c(\"human_1\", \"human_2\", \"gorilla\", \"human_3\", \"human_4\",           \"human_5\", \"human_6\", \"silvery_gibbon\", \"white_cheeked_gibbon\",           \"françois_langur\", \"olive_baboon_1\", \"olive_baboon_2\",           \"golden_monkey\", \"rhesus_monkeys_1\", \"rhesus_monkeys_2\",           \"gelada_baboon_1\", \"gelada_baboon_2\", \"orangutan_1\", \"orangutan_2\")  cyc_autm <- automorphisms(filepath = URL,                        group = \"Z64\",                        cube = c(\"ACGT\", \"TGCA\"),                       cube_alt = c(\"CATG\", \"GTAC\"),                       nms = nams,                       verbose = FALSE) data(cyc_autm, package = \"GenomAutomorphism\") cyc_autm #> AutomorphismList object of length: 171 #> names(171): human_1.human_2 human_1.gorilla human_1.human_3 ... gelada_baboon_2.orangutan_1 gelada_baboon_2.orangutan_2 orangutan_1.orangutan_2  #> -------  #> Automorphism object with 106 ranges and 6 metadata columns: #>         seqnames    ranges strand |        seq1        seq2    coord1    coord2      autm        cube #>            <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> <numeric> <character> #>     [1]        1         1      + |         ATG         ATG        50        50         1        ACGT #>     [2]        1         2      + |         GGT         GGT        43        43         1        ACGT #>     [3]        1         3      + |         GAT         GAT        11        11         1        ACGT #>     [4]        1         4      + |         GTT         GTT        59        59         1        ACGT #>     [5]        1         5      + |         GAG         GAG        10        10         1        ACGT #>     ...      ...       ...    ... .         ...         ...       ...       ...       ...         ... #>   [102]        1       102      + |         GCT         GCT        27        27         1        ACGT #>   [103]        1       103      + |         ACT         ACT        19        19         1        ACGT #>   [104]        1       104      + |         AAT         AAT         3         3         1        ACGT #>   [105]        1       105      + |         GAG         GAG        10        10         1        ACGT #>   [106]        1       106      + |         TAA         TAA        12        12         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #> ... #> <170 more DFrame element(s)> #> Two slots: 'DataList' & 'SeqRanges' #> -------"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa.html","id":"bar-plot-automorphism-distribution-by-cubes","dir":"Articles","previous_headings":"Automorphisms on \\(\\mathbb{Z}_{64}\\)","what":"Bar plot automorphism distribution by cubes","title":"Analysis of Automorphisms on a DNA Multiple Sequence Alignment","text":"automorphism distribution cubes can summarized bar-plot graphic","code":"counts <- table(unlist(lapply(cyc_autm@DataList,              function(x) {               x = data.frame(x)               x =  x[ x$autm != 1 | is.na(x$autm), ]               return(x$cube)}             )         ))  par(family = \"serif\", cex = 0.8, font = 2, mar = c(4,6,4,4)) barplot(counts, #main=\"Automorphism distribution\",         xlab=\"Genetic-code cube representation\",         ylab=\"Fixed mutational events\", col=c(\"darkblue\",\"red\", \"darkgreen\", \"magenta\", \"orange\"),          border = NA, axes = FALSE, ylim = c(0,300),         cex.lab = 2, cex.main = 1.5, cex.names = 2) axis(2, at = c(0, 100, 200, 300), cex.axis = 1.5) mtext(side = 1,line = -1.5, at = c(0.7, 1.9),       text = paste0( counts ), cex = 1.4,       col = c(\"white\",\"yellow\"))"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa.html","id":"bar-plot-automorphism-distribution-by-regions","dir":"Articles","previous_headings":"Automorphisms on \\(\\mathbb{Z}_{64}\\)","what":"Bar plot automorphism distribution by regions","title":"Analysis of Automorphisms on a DNA Multiple Sequence Alignment","text":"last result can summarized gene regions follow: , function automorphismByRanges permits classification pairwise alignment protein-coding sub-regions based mutational events observed quantitatively represented automorphisms genetic-code cubes. Searching automorphisms \\(\\mathbb{Z}_{64}\\) permits us quantitative differentiation mutational events different codon positions given DNA protein-encoding region. shown reference (4)) set different cubes can applied describe best evolutionary aminoacid scale highly correlated aminoacid physicochemical properties describing observed evolutionary process given protein. information subject can found supporting material reference (4)) GitHub GenomeAlgebra_SymmetricGroup, particularly interacting Mathematica notebook Genetic-Code-Scales_of_Amino-Acids.nb. automorphism distribution cubes can summarized bar-plot graphic","code":"autm_range <- automorphismByRanges(cyc_autm,                                    min.len = 2,                                    verbose = FALSE) autm_range #> GRangesList object of length 108: #> $human_1.human_4 #> GRanges object with 3 ranges and 1 metadata column: #>       seqnames    ranges strand |        cube #>          <Rle> <IRanges>  <Rle> | <character> #>   [1]        1      1-60      + |        ACGT #>   [2]        1        61      + |        TGCA #>   [3]        1    62-106      + |        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #>  #> $human_1.silvery_gibbon #> GRanges object with 3 ranges and 1 metadata column: #>       seqnames    ranges strand |        cube #>          <Rle> <IRanges>  <Rle> | <character> #>   [1]        1      1-94      + |        ACGT #>   [2]        1        95      + |        TGCA #>   [3]        1    96-106      + |        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #>  #> $human_1.white_cheeked_gibbon #> GRanges object with 3 ranges and 1 metadata column: #>       seqnames    ranges strand |        cube #>          <Rle> <IRanges>  <Rle> | <character> #>   [1]        1      1-94      + |        ACGT #>   [2]        1        95      + |        TGCA #>   [3]        1    96-106      + |        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #>  #> ... #> <105 more elements> cts <- unlist(autm_range) counts <- table(cts$cube)  par(family = \"serif\", cex = 0.6, font = 2, las = 1) barplot(counts, main=\"Automorphism distribution\",         xlab=\"Genetic-code cube representation\",         col=c(\"darkblue\",\"red\", \"darkgreen\"),          border = NA, axes = T) mtext(side = 1,line = -6, at = c(0.7, 1.9, 3.1),       text = paste0( counts ), cex = 1.4,       col = c(\"white\",\"yellow\"))"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa.html","id":"grouping-automorphism-by-automorphisms-coefficients","dir":"Articles","previous_headings":"Automorphisms on \\(\\mathbb{Z}_{64}\\)","what":"Grouping automorphism by automorphism’s coefficients","title":"Analysis of Automorphisms on a DNA Multiple Sequence Alignment","text":"Automorphisms automorphism’s coefficients can grouped. Every single base mutational event across MSA classified according IUPAC nomenclature: 1) According number hydrogen bonds (DNA/RNA double helix): strong S={C, G} (three hydrogen bonds) weak W={, U} (two hydrogen bonds). According chemical type: purines R={, G} pyrimidines Y={C, U}. 3). According presence amino keto groups base rings: amino M={C, } keto K={G, T}. Constant (hold) base positions labeled letter H. , codon positions labeled HKH means first third bases remains constant mutational events bases G T found MSA.","code":"autby_coef <- automorphism_bycoef(cyc_autm,                                   verbose = FALSE) autby_coef #> AutomorphismByCoefList object of length 171: #> $human_1.human_2 #> AutomorphismByCoef object with 45 ranges and 5 metadata columns: #>        seqnames    ranges strand |        seq1        seq2      autm    mut_type        cube #>           <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <character> <character> #>    [1]        1     1-106      + |         ATG         ATG         1         HHH        ACGT #>    [2]        1     1-106      + |         GGT         GGT         1         HHH        ACGT #>    [3]        1     1-106      + |         GAT         GAT         1         HHH        ACGT #>    [4]        1     1-106      + |         GTT         GTT         1         HHH        ACGT #>    [5]        1     1-106      + |         GAG         GAG         1         HHH        ACGT #>    ...      ...       ...    ... .         ...         ...       ...         ...         ... #>   [41]        1     1-106      + |         GAC         GAC         1         HHH        ACGT #>   [42]        1     1-106      + |         TTA         TTA         1         HHH        ACGT #>   [43]        1     1-106      + |         ATA         ATA         1         HHH        ACGT #>   [44]        1     1-106      + |         GCT         GCT         1         HHH        ACGT #>   [45]        1     1-106      + |         TAA         TAA         1         HHH        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #>  #> ... #> <170 more elements> cts <- unlist(autby_coef) counts <- table(cts$mut_type[ cts$autm != 1 & cts$autm != -1 ]) counts <- sort(counts, decreasing = TRUE)  par(family = \"serif\", cex.axis = 1.4, font = 2, las = 1,      cex.main = 1.4, cex.lab = 2) barplot(counts, main=\"Automorphism distribution per Mutation type\",         col = c(\"red\", \"orange\", \"yellow\", \"green\", \"dodgerblue\"),          border = NA, axes = TRUE,las=2) mtext(side = 1,line = -2, at = c(0.7, 1.9, 3.1, 4.3, 5.5),       text = paste0( counts ), cex = 1.4,       col = c(\"white\", \"red\", \"blue\", \"black\", \"yellow\"))"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa.html","id":"bar-plot-automorphism-distribution-by-cubes-1","dir":"Articles","previous_headings":"Automorphisms on \\(\\mathbb{Z}_{64}\\)","what":"Bar plot automorphism distribution by cubes","title":"Analysis of Automorphisms on a DNA Multiple Sequence Alignment","text":"automorphism distribution cubes can summarized bar-plot graphic. Object autby_coef carried pairwise comparisons, enough use data single species reference, e.g., humans. First data must reordered object: Nominal variables transformed ","code":"hautby_coef <- autby_coef[ grep(\"human\", names(autby_coef)) ] h_autby_coef <- unlist(hautby_coef) h_autby_coef <- h_autby_coef[ which(h_autby_coef$autm != 1) ]  nams <- names(h_autby_coef) nams <- sub(\"human[_][1-6][.]\", \"\", nams) nams <- sub(\"[_][1-6]\", \"\", nams)  dt <- data.frame(h_autby_coef, species = nams) dt <- dt[, c(\"start\", \"autm\", \"species\", \"cube\")] dt$start <- as.numeric(dt$start) dt$autm <- as.numeric(dt$autm) dt$cube <- as.factor(dt$cube) dt$species <- as.factor(dt$species) DataFrame(dt) #> DataFrame with 282 rows and 4 columns #>         start      autm   species     cube #>     <numeric> <numeric>  <factor> <factor> #> 1          37         3   gorilla     ACGT #> 2          51        19   human       ACGT #> 3          61        51   human       TGCA #> 4          41         3   human       ACGT #> 5          18        33   human       ACGT #> ...       ...       ...       ...      ... #> 278        54        43 orangutan     TGCA #> 279        16        54 orangutan     ACGT #> 280        18        33 orangutan     ACGT #> 281        37         3 orangutan     ACGT #> 282        54        43 orangutan     TGCA counts <- table(dt$cube)  par(family = \"serif\", cex = 0.6, font = 2, mar=c(4,6,4,4)) barplot(counts, #main=\"Automorphism distribution\",         xlab=\"Genetic-code cube representation\",         ylab=\"Fixed mutational events\",         col=c(\"darkblue\",\"red\", \"darkgreen\", \"magenta\", \"orange\"),          border = NA, axes = F, #ylim = c(0, 6000),         cex.lab = 2, cex.main = 1.5, cex.names = 2) axis(2, at = c(0, 50, 100, 150, 200), cex.axis = 1.5) mtext(side = 1,line = -2.5, at = c(0.7, 1.9, 3.1, 4.3, 5.5),       text = paste0( counts ), cex = 1.4,       col = c(\"white\", \"yellow\"))"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa.html","id":"conserved-and-non-conserved-regions","dir":"Articles","previous_headings":"Automorphisms on \\(\\mathbb{Z}_{64}\\)","what":"Conserved and non-conserved regions","title":"Analysis of Automorphisms on a DNA Multiple Sequence Alignment","text":"specific function provided get coordinates conserved non-conserved regions, can used downstream analyses. conserved regions pairwise comparison retrieved typing: non-conserved regions pairwise comparison obtained function different settings:","code":"conserved_regions(x = autby_coef) #> AutomorphismByCoef object with 11023 ranges and 5 metadata columns: #>                           seqnames    ranges strand |        seq1        seq2      autm    mut_type        cube #>                              <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <character> <character> #>       human_1.orangutan_1        1      1-15      + |         ATG         ATG         1         HHH        ACGT #>       human_1.orangutan_1        1      1-15      + |         GGT         GGT         1         HHH        ACGT #>       human_1.orangutan_1        1      1-15      + |         GAT         GAT         1         HHH        ACGT #>       human_1.orangutan_1        1      1-15      + |         GTT         GTT         1         HHH        ACGT #>       human_1.orangutan_1        1      1-15      + |         GAG         GAG         1         HHH        ACGT #>                       ...      ...       ...    ... .         ...         ...       ...         ...         ... #>   orangutan_1.orangutan_2        1     1-106      + |         GAC         GAC         1         HHH        ACGT #>   orangutan_1.orangutan_2        1     1-106      + |         TTA         TTA         1         HHH        ACGT #>   orangutan_1.orangutan_2        1     1-106      + |         ATA         ATA         1         HHH        ACGT #>   orangutan_1.orangutan_2        1     1-106      + |         GCT         GCT         1         HHH        ACGT #>   orangutan_1.orangutan_2        1     1-106      + |         TAA         TAA         1         HHH        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths ncs <- conserved_regions(x = autby_coef, conserved = FALSE) ncs #> AutomorphismByCoef object with 396 ranges and 5 metadata columns: #>                                seqnames    ranges strand |        seq1        seq2      autm    mut_type        cube #>                                   <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <character> <character> #>            human_1.orangutan_1        1        16      + |         TCC         TCG        54         HHS        ACGT #>            human_1.orangutan_2        1        16      + |         TCC         TCG        54         HHS        ACGT #>            human_2.orangutan_1        1        16      + |         TCC         TCG        54         HHS        ACGT #>            human_2.orangutan_2        1        16      + |         TCC         TCG        54         HHS        ACGT #>            gorilla.orangutan_1        1        16      + |         TCC         TCG        54         HHS        ACGT #>                            ...      ...       ...    ... .         ...         ...       ...         ...         ... #>   rhesus_monkeys_2.orangutan_2        1        95      + |         TTG         TTA        34         HHR        ACGT #>    gelada_baboon_1.orangutan_1        1        95      + |         TTG         TTA        34         HHR        ACGT #>    gelada_baboon_1.orangutan_2        1        95      + |         TTG         TTA        34         HHR        ACGT #>    gelada_baboon_2.orangutan_1        1        95      + |         TTG         TTA        34         HHR        ACGT #>    gelada_baboon_2.orangutan_2        1        95      + |         TTG         TTA        34         HHR        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa.html","id":"subsetting-regions-of-interest","dir":"Articles","previous_headings":"","what":"Subsetting regions of interest","title":"Analysis of Automorphisms on a DNA Multiple Sequence Alignment","text":"application available bioinformatic tools straightforward. example, knowing positions conserved non-conserved regions, can subset alignment region potential interest. coordinates carrying mutational events : use function DNAStringSet Bioconductor R package Biostrings subset MSA primate cytochrome c.  Next, function ggseqlogo R package ggseqlogo applied get logo sequence selected MSA region.  corresponding aminoacid sequence corresponding aminoacid sequence logo  , first mutational event reported codon sequence correspond synonymous mutation. Alternatively, can start translating DNA MSA.","code":"sort(unique(start(ncs))) #> [1] 16 18 37 41 51 54 59 61 95 cyc_aln_region <- DNAStringSet(cyc_aln, start = 37*3 - 2, end = 42*3) cyc_aln_region #> DNAStringSet object of length 19: #>      width seq                                                                                      names                #>  [1]    18 TTTGGGCGGAAGACAGGT                                                                       NM_018947.6 Homo ... #>  [2]    18 TTTGGGCGGAAGACAGGT                                                                       gb|BC021994.1|  [... #>  [3]    18 TTCGGGCGGAAGACAGGT                                                                       ref|XM_019031021.... #>  [4]    18 TTTGGGCGGAAGACAGGT                                                                       dbj|AK311836.1|  ... #>  [5]    18 TTTGGGCGGAAGACAGGT                                                                       gb|BC067222.1|  [... #>  ...   ... ... #> [15]    18 TTCGGGCGGAAGACAGGT                                                                       ref|XM_028845948.... #> [16]    18 TTCGGGCGGAAGACAGGT                                                                       ref|XM_025380676.... #> [17]    18 TTCGGGCGGAAGACAGGT                                                                       ref|XM_025380675.... #> [18]    18 TTCGGGCGGAAGACAGGT                                                                       ref|NM_001131167.... #> [19]    18 TTCGGGCGGAAGACAGGT                                                                       emb|CR857183.1|  ... ggseqlogo( as.character(cyc_aln_region) ) #> Warning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> = \"none\")` instead. cyc_aln_region_aa = translate(cyc_aln_region) cyc_aln_region_aa #> AAStringSet object of length 19: #>      width seq                                                                                      names                #>  [1]     6 FGRKTG                                                                                   NM_018947.6 Homo ... #>  [2]     6 FGRKTG                                                                                   gb|BC021994.1|  [... #>  [3]     6 FGRKTG                                                                                   ref|XM_019031021.... #>  [4]     6 FGRKTG                                                                                   dbj|AK311836.1|  ... #>  [5]     6 FGRKTG                                                                                   gb|BC067222.1|  [... #>  ...   ... ... #> [15]     6 FGRKTG                                                                                   ref|XM_028845948.... #> [16]     6 FGRKTG                                                                                   ref|XM_025380676.... #> [17]     6 FGRKTG                                                                                   ref|XM_025380675.... #> [18]     6 FGRKTG                                                                                   ref|NM_001131167.... #> [19]     6 FGRKTG                                                                                   emb|CR857183.1|  ... ggseqlogo( as.character(cyc_aln_region_aa) ) cyc_aln_aa <- translate(cyc_aln@unmasked) cyc_aln_aa #> AAStringSet object of length 19: #>      width seq                                                                                      names                #>  [1]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* NM_018947.6 Homo ... #>  [2]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* gb|BC021994.1|  [... #>  [3]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* ref|XM_019031021.... #>  [4]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* dbj|AK311836.1|  ... #>  [5]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* gb|BC067222.1|  [... #>  ...   ... ... #> [15]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* ref|XM_028845948.... #> [16]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* ref|XM_025380676.... #> [17]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* ref|XM_025380675.... #> [18]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* ref|NM_001131167.... #> [19]   106 MGDVEKGKKIFIMKCSQCHTVEKGGKHKTGPNLHGLFGRKTGQ...LMEYLENPKKYIPGTKMIFVGIKKKEERADLIAYLKKATNE* emb|CR857183.1|  ... cyc_aln_aa_region <- AAStringSet(cyc_aln_aa, start = 37, end = 42) cyc_aln_aa_region #> AAStringSet object of length 19: #>      width seq                                                                                      names                #>  [1]     6 FGRKTG                                                                                   NM_018947.6 Homo ... #>  [2]     6 FGRKTG                                                                                   gb|BC021994.1|  [... #>  [3]     6 FGRKTG                                                                                   ref|XM_019031021.... #>  [4]     6 FGRKTG                                                                                   dbj|AK311836.1|  ... #>  [5]     6 FGRKTG                                                                                   gb|BC067222.1|  [... #>  ...   ... ... #> [15]     6 FGRKTG                                                                                   ref|XM_028845948.... #> [16]     6 FGRKTG                                                                                   ref|XM_025380676.... #> [17]     6 FGRKTG                                                                                   ref|XM_025380675.... #> [18]     6 FGRKTG                                                                                   ref|NM_001131167.... #> [19]     6 FGRKTG                                                                                   emb|CR857183.1|  ... ggseqlogo( as.character(cyc_aln_aa_region) )"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Analysis of Automorphisms on a DNA Multiple Sequence Alignment","text":"1. Sanchez R, Morgado E, Grau R. Gene algebra genetic code algebraic structure. J Math Biol. 2005 Oct;51(4):431-57. doi: 10.1007/s00285-005-0332-8. Epub 2005 Jul 13. PMID: 16012800. ( PDF). 2. Robersy Sanchez, Jesús Barreto (2021) Genomic Abelian Finite Groups. doi: 10.1101/2021.06.01.446543. 3. M. V José, E.R. Morgado, R. Sánchez, T. Govezensky, 24 possible algebraic representations standard genetic code six three dimensions, Adv. Stud. Biol. 4 (2012) 119–152.PDF. 4. R. Sanchez. Symmetric Group Genetic–Code Cubes. Effect Genetic–Code Architecture Evolutionary Process MATCH Commun. Math. Comput. Chem. 79 (2018) 527-560. PDF.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa_brca1.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Analysis of Automorphisms on a MSA of Primate BRCA1 Gene","text":"R package compute autimorphisms pairwise aligned DNA sequences represented elements Genomic Abelian group described reference (1). general scenario, whole chromosomes genomic regions population (species close related species) can algebraically represented direct sum cyclic groups specifically Abelian p-groups. Basically, propose representation multiple sequence alignments (MSA) length N finite Abelian group created direct sum homocyclic Abelian groups prime-power order: \\[ \\qquad G = (\\mathbb{Z}_{p^{\\alpha_{1}}_1})^{n_1} \\oplus (\\mathbb{Z}_{p^{\\alpha_{2}}_1})^{n_2} \\oplus \\dots \\oplus (\\mathbb{Z}_{p^{\\alpha_{k}}_k})^{n_k} \\] , \\(p_i\\)’s prime numbers, \\(\\alpha_i \\\\mathbb{N}\\) \\(\\mathbb{Z}_{p^{\\alpha_{}}_i}\\) group integer modulo \\(p^{\\alpha_{}}_i\\). purpose estimating automorphism two aligned DNA sequences, \\(p^{\\alpha_{}}_i \\\\{5, 2^6, 5^3 \\}\\).","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa_brca1.html","id":"automorphisms","dir":"Articles","previous_headings":"Overview","what":"Automorphisms","title":"Analysis of Automorphisms on a MSA of Primate BRCA1 Gene","text":"Herein, automorphisms considered algebraic descriptions mutational event observed codon sequences represented different Abelian groups. particular, described references (3-4), representation codon set defined Abelian group 24 possible isomorphic Abelian groups. Abelian groups can labeled based DNA base-order used generate . set 24 Abelian groups can described group isomorphic symmetric group degree four (\\(S_4\\), see reference (4)). support symmetric group 24 Abelian group genetic-code cubes, users can also see Symmetric Group Genetic-Code Cubes., specifically Mathematica notebook IntroductionToZ5GeneticCodeVectorSpace.nb interact using Wolfram Player, freely available (Windows Linux OS) , https://www.wolfram.com/player/.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa_brca1.html","id":"automorphisms-on-mathbbz_64","dir":"Articles","previous_headings":"","what":"Automorphisms on \\(\\mathbb{Z}_{64}\\)","title":"Analysis of Automorphisms on a MSA of Primate BRCA1 Gene","text":"First, proceed load R package required analysis Next, proceed check DNA multiple sequence alignment (MSA) file. ia FASTA file carrying MSA primates BRCA1 gene. Notice familiar FASTA file, better directly read function automorphisms. However, current example, step can bypassed, since MSA provided provided together GenomAutomorphism R package Load MSA available package sequence names Next, function automorphisms applied represent codon sequence Abelian group \\(\\mathbb{Z}_{64}\\) (.e., set integers remainder modulo 64). codon coordinates requested cube ACGT. Following reference (4)), cubes labeled based order DNA bases used define sum operation. Z64, automorphisms described functions \\(f(x) = k\\,x \\quad mod\\,64\\), \\(k\\) \\(x\\) elements set integers modulo 64. , function automorphisms three important arguments given values: group = “Z64”, cube = c(“ACGT”, “TGCA”), cube_alt = c(“CATG”, “GTAC”). Setting group specifies group automorphisms computed. groups can : “Z5”, “Z64”, “Z125”, “Z5^3”. groups “Z64” “Z125” mutational events can described automorphisms given cube. , character string denoting pairs “dual” genetic-code cubes, given references (1-4)), given argument cube. , base pairs given cubes must complementary . cube pair call dual cubes , shown reference (4)), pair integrates group. automorphisms found first set dual cubes, algorithm search automorphism alternative set dual cubes. Object brca1_autm included package can load typing: AutomorphismList class object returned. codon sequences (seq1 seq2) corresponding coordinates (left) returned, well coordinated representation \\(\\mathbb{Z}_{64}\\) (coord1 coord2). Observe two new columns added, automorphism coefficient \\(k\\) (named brca1_autm) genetic-code cube automorphism found. convention DNA sequence given positive strand. Since dual cube “ACGT” corresponds complementary base order TGCA, automorphisms described cube TGCA represent mutational events affecting DNA negative strand (-).","code":"library(GenomAutomorphism) library(Biostrings) library(ggseqlogo) library(usefr) library(latex2exp) ## Do not run it. This is included with package URL <- paste0(\"https://github.com/genomaths/seqalignments/raw/master/BRCA1/\",               \"brca1_primates_dna_repair_20_sequences.fasta\")  brca1_aln <- readDNAMultipleAlignment(filepath = URL) brca1_aln data(\"brca1_aln\") brca1_aln #> DNAMultipleAlignment with 20 rows and 2283 columns #>       aln                                                                                           names                #>  [1] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA NM_007298.3:20-22... #>  [2] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA U64805.1:1-2280_H... #>  [3] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA XM_031011560.1:23... #>  [4] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA XM_031011561.1:23... #>  [5] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA XM_031011562.1:16... #>  [6] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCTCAGATCCCCCACAGCCACTACTGA XM_009432101.3:27... #>  [7] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCTCAGATCCCCCACAGCCACTACTGA XM_009432104.3:37... #>  [8] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCTCAGATCCCCCACAGCCACTACTGA XM_016930487.2:37... #>  [9] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCTCAGATCCCCCACAGCCACTACTGA XM_009432099.3:37... #>  ... ... #> [12] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCTCAGATCCCCCACAGCCACTACTGA XM_034941185.1:24... #> [13] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCTCAGATCCCCCACAGCCACTACTGA XM_034941182.1:25... #> [14] ATGGATTTATCTGCTGTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGATACCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA XM_032163757.1:14... #> [15] ATGGATTTATCTGCTGTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGATACCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA XM_032163756.1:14... #> [16] ATGGATTTATCTGCTGTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGATACCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA XM_032163758.1:13... #> [17] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACGCCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA XM_030923119.1:18... #> [18] ATGGATTTATCTGCTCTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACGCCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA XM_030923118.1:18... #> [19] ATGGATTTACCTGCTGTTCGCGTTGAAGAAGTACAAAATGTCATT...CTGGACACCTACCTGATACCCCAGATCCCCCACAGCCACTACTGA XM_025363316.1:14... #> [20] ATGGATTTATCTGCTGTTCGTGTTGAAGAAGTGCAAAATGTCCTT...CTGGACACCTACCTGATACCCCAGATCCCTCACAGCCACTACTGA XM_039475995.1:49... strtrim(rownames(brca1_aln), 100) #>  [1] \"NM_007298.3:20-2299_Homo_sapiens_BRCA1_DNA_repair_associated_(BRCA1)_transcript_variant_4_mRNA\"       #>  [2] \"U64805.1:1-2280_Homo_sapiens_Brca1-delta11b_(Brca1)_mRNA_complete_cds\"                                #>  [3] \"XM_031011560.1:233-2515_PREDICTED:_Gorilla_gorilla_gorilla_BRCA1_DNA_repair_associated_(BRCA1)_trans\" #>  [4] \"XM_031011561.1:233-2512_PREDICTED:_Gorilla_gorilla_gorilla_BRCA1_DNA_repair_associated_(BRCA1)_trans\" #>  [5] \"XM_031011562.1:163-2442_PREDICTED:_Gorilla_gorilla_gorilla_BRCA1_DNA_repair_associated_(BRCA1)_trans\" #>  [6] \"XM_009432101.3:276-2555_PREDICTED:_Pan_troglodytes_BRCA1_DNA_repair_associated_(BRCA1)_transcript_va\" #>  [7] \"XM_009432104.3:371-2650_PREDICTED:_Pan_troglodytes_BRCA1_DNA_repair_associated_(BRCA1)_transcript_va\" #>  [8] \"XM_016930487.2:371-2650_PREDICTED:_Pan_troglodytes_BRCA1_DNA_repair_associated_(BRCA1)_transcript_va\" #>  [9] \"XM_009432099.3:371-2653_PREDICTED:_Pan_troglodytes_BRCA1_DNA_repair_associated_(BRCA1)_transcript_va\" #> [10] \"XM_034941183.1:254-2533_PREDICTED:_Pan_paniscus_BRCA1_DNA_repair_associated_(BRCA1)_transcript_varia\" #> [11] \"XM_034941184.1:254-2533_PREDICTED:_Pan_paniscus_BRCA1_DNA_repair_associated_(BRCA1)_transcript_varia\" #> [12] \"XM_034941185.1:248-2527_PREDICTED:_Pan_paniscus_BRCA1_DNA_repair_associated_(BRCA1)_transcript_varia\" #> [13] \"XM_034941182.1:254-2536_PREDICTED:_Pan_paniscus_BRCA1_DNA_repair_associated_(BRCA1)_transcript_varia\" #> [14] \"XM_032163757.1:145-2418_PREDICTED:_Hylobates_moloch_BRCA1_DNA_repair_associated_(BRCA1)_transcript_v\" #> [15] \"XM_032163756.1:145-2421_PREDICTED:_Hylobates_moloch_BRCA1_DNA_repair_associated_(BRCA1)_transcript_v\" #> [16] \"XM_032163758.1:139-2412_PREDICTED:_Hylobates_moloch_BRCA1_DNA_repair_associated_(BRCA1)_transcript_v\" #> [17] \"XM_030923119.1:184-2463_PREDICTED:_Rhinopithecus_roxellana_BRCA1_DNA_repair_associated_(BRCA1)_trans\" #> [18] \"XM_030923118.1:183-2465_PREDICTED:_Rhinopithecus_roxellana_BRCA1_DNA_repair_associated_(BRCA1)_trans\" #> [19] \"XM_025363316.1:147-2426_PREDICTED:_Theropithecus_gelada_BRCA1_DNA_repair_associated_(BRCA1)_transcri\" #> [20] \"XM_039475995.1:49-2328_PREDICTED:_Saimiri_boliviensis_boliviensis_BRCA1_DNA_repair_associated_(BRCA1\" ## Do not run it. This is included with package  nams <- c(\"human_1\",\"human_2\",\"gorilla_1\",\"gorilla_2\",\"gorilla_3\",         \"chimpanzee_1\",\"chimpanzee_2\",\"chimpanzee_3\",\"chimpanzee_4\",         \"bonobos_1\",\"bonobos_2\",\"bonobos_3\",\"bonobos_4\",\"silvery_gibbon_1\",         \"silvery_gibbon_1\",\"silvery_gibbon_3\",\"golden_monkey_1\",         \"golden_monkey_2\",\"gelada_baboon\",\"bolivian_monkey\")  brca1_autm <- automorphisms(                       seqs = brca1_aln,                        group = \"Z64\",                        cube = c(\"ACGT\", \"TGCA\"),                       cube_alt = c(\"CATG\", \"GTAC\"),                       nms = nams,                       verbose = FALSE) data(brca1_autm) brca1_autm #> AutomorphismList object of length: 190 #> names(190): human_1.human_2 human_1.gorilla_1 human_1.gorilla_2 ... golden_monkey_2.gelada_baboon golden_monkey_2.bolivian_monkey gelada_baboon.bolivian_monkey  #> -------  #> Automorphism object with 761 ranges and 6 metadata columns: #>         seqnames    ranges strand |        seq1        seq2    coord1    coord2      autm        cube #>            <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> <numeric> <character> #>     [1]        1         1      + |         ATG         ATG        50        50         1        ACGT #>     [2]        1         2      + |         GAT         GAT        11        11         1        ACGT #>     [3]        1         3      + |         TTA         TTA        60        60         1        ACGT #>     [4]        1         4      + |         TCT         TCT        31        31         1        ACGT #>     [5]        1         5      + |         GCT         GCT        27        27         1        ACGT #>     ...      ...       ...    ... .         ...         ...       ...       ...       ...         ... #>   [757]        1       757      + |         CAC         CAC         5         5         1        ACGT #>   [758]        1       758      + |         AGC         AGC        33        33         1        ACGT #>   [759]        1       759      + |         CAC         CAC         5         5         1        ACGT #>   [760]        1       760      + |         TAC         TAC        13        13         1        ACGT #>   [761]        1       761      + |         TGA         TGA        44        44         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #> ... #> <189 more DFrame element(s)> #> Two slots: 'DataList' & 'SeqRanges' #> -------"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa_brca1.html","id":"bar-plot-automorphism-distribution-by-cubes","dir":"Articles","previous_headings":"Automorphisms on \\(\\mathbb{Z}_{64}\\)","what":"Bar plot automorphism distribution by cubes","title":"Analysis of Automorphisms on a MSA of Primate BRCA1 Gene","text":"automorphism distribution cubes can summarized bar-plot graphic","code":"autms <- unlist(brca1_autm) counts <- table(autms$cube[ autms$autm != 1 | is.na(autms$autm) ])   par(family = \"serif\", cex = 0.8, font = 2, mar = c(4,6,4,4)) barplot(counts, #main=\"Automorphism distribution\",         xlab=\"Genetic-code cube representation\",         ylab=\"Fixed mutational events\", col=c(\"darkblue\",\"red\", \"darkgreen\", \"magenta\", \"orange\"),          border = NA, axes = FALSE, ylim = c(0,7000),         cex.lab = 2, cex.main = 1.5, cex.names = 2) axis(2, at = c(0, 2000, 4000, 6000), cex.axis = 1.5) mtext(side = 1,line = -2, at = c(0.7, 1.9, 3.1, 4.3, 5.5),       text = paste0( counts ), cex = 1.4,       col = c(\"white\", \"red\", \"yellow\", \"magenta\"))"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa_brca1.html","id":"bar-plot-automorphism-distribution-by-ranges-regions","dir":"Articles","previous_headings":"Automorphisms on \\(\\mathbb{Z}_{64}\\)","what":"Bar plot automorphism distribution by ranges (regions)","title":"Analysis of Automorphisms on a MSA of Primate BRCA1 Gene","text":"last result can summarized gene regions follow: , function automorphismByRanges permits classification pairwise alignment protein-coding sub-regions based mutational events observed quantitatively represented automorphisms genetic-code cubes. Searching automorphisms \\(\\mathbb{Z}_{64}\\) permits us quantitative differentiation mutational events different codon positions given DNA protein-encoding region. shown reference (4)) set different cubes can applied describe best evolutionary aminoacid scale highly correlated aminoacid physicochemical properties describing observed evolutionary process given protein. information subject can found supporting material reference (4)) GitHub GenomeAlgebra_SymmetricGroup, particularly interacting Mathematica notebook Genetic-Code-Scales_of_Amino-Acids.nb. automorphism distribution cubes can summarized bar-plot graphic","code":"brca1_autm_range <- automorphismByRanges(brca1_autm,                                    min.len = 2,                                   num.cores = 10L,                                   verbose = FALSE) brca1_autm_range #> GRangesList object of length 189: #> $human_1.human_2 #> GRanges object with 3 ranges and 1 metadata column: #>       seqnames    ranges strand |        cube #>          <Rle> <IRanges>  <Rle> | <character> #>   [1]        1     1-349      + |        ACGT #>   [2]        1       350      + |        Gaps #>   [3]        1   351-761      + |        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #>  #> $human_1.gorilla_1 #> GRanges object with 7 ranges and 1 metadata column: #>       seqnames    ranges strand |        cube #>          <Rle> <IRanges>  <Rle> | <character> #>   [1]        1     1-233      + |        ACGT #>   [2]        1       234      + |        TGCA #>   [3]        1   235-349      + |        ACGT #>   [4]        1       350      + |        Trnl #>   [5]        1   351-622      + |        ACGT #>   [6]        1       623      + |        TGCA #>   [7]        1   624-761      + |        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #>  #> $human_1.gorilla_2 #> GRanges object with 7 ranges and 1 metadata column: #>       seqnames    ranges strand |        cube #>          <Rle> <IRanges>  <Rle> | <character> #>   [1]        1     1-233      + |        ACGT #>   [2]        1       234      + |        TGCA #>   [3]        1   235-349      + |        ACGT #>   [4]        1       350      + |        Gaps #>   [5]        1   351-622      + |        ACGT #>   [6]        1       623      + |        TGCA #>   [7]        1   624-761      + |        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #>  #> ... #> <186 more elements> cts <- unlist(brca1_autm_range) counts <- table(cts$cube)  par(family = \"serif\", cex = 1, font = 2, las = 1) barplot(counts, main=\"Automorphism distribution\",         xlab=\"Genetic-code cube representation\",         col=c(\"darkblue\",\"red\", \"darkgreen\", \"magenta\"),          border = NA, axes = T) mtext(side = 1,line = -6, at = c(0.7, 1.9, 3.1, 4.3),       text = paste0( counts ),        col = c(\"white\", \"black\", \"yellow\", \"red\"))"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa_brca1.html","id":"grouping-automorphism-by-automorphisms-coefficients","dir":"Articles","previous_headings":"Automorphisms on \\(\\mathbb{Z}_{64}\\)","what":"Grouping automorphism by automorphism’s coefficients","title":"Analysis of Automorphisms on a MSA of Primate BRCA1 Gene","text":"Automorphisms automorphism’s coefficients can grouped. result provided package result evolutionary pressure DNA protein-coding regions (addressed preserve aminoacid physicochemical properties , consequently, biological functions encoded proteins) highest mutational rate found third base codon, followed first base, lowest rate found second one. DNA bases classified based physicochemical criteria used ordering set codons: number hydrogen bonds (strong-weak, S-W), chemical type (purine-pyrimidine, Y-R), chemical groups (amino versus keto, M-K) (see reference 4). Preserved codon positions labeled letter “H”. Preserved codon positions labeled letter “H” insertion-mutations identified multiple sequence alignment labeled “—”.","code":"autby_coef <- automorphism_bycoef(brca1_autm,                                   verbose = FALSE) data(autby_coef, package = \"GenomAutomorphism\") autby_coef #> AutomorphismByCoefList object of length 190: #> $human_1.human_2 #> AutomorphismByCoef object with 239 ranges and 5 metadata columns: #>         seqnames    ranges strand |        seq1        seq2      autm    mut_type        cube #>            <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <character> <character> #>     [1]        1     1-238      + |         ATG         ATG         1         HHH        ACGT #>     [2]        1     1-238      + |         GAT         GAT         1         HHH        ACGT #>     [3]        1     1-238      + |         TTA         TTA         1         HHH        ACGT #>     [4]        1     1-238      + |         TCT         TCT         1         HHH        ACGT #>     [5]        1     1-238      + |         GCT         GCT         1         HHH        ACGT #>     ...      ...       ...    ... .         ...         ...       ...         ...         ... #>   [235]        1   511-761      + |         CCC         CCC         1         HHH        ACGT #>   [236]        1   511-761      + |         CTT         CTT         1         HHH        ACGT #>   [237]        1   511-761      + |         CCT         CCT         1         HHH        ACGT #>   [238]        1   511-761      + |         ATA         ATA         1         HHH        ACGT #>   [239]        1   511-761      + |         TGA         TGA         1         HHH        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #>  #> ... #> <189 more elements> cts <- unlist(autby_coef) counts <- table(cts$mut_type[ cts$autm != 1 & cts$autm != -1 ]) counts <- sort(counts, decreasing = TRUE)  par(family = \"serif\", cex.axis = 1.4, font = 2, las = 1,      cex.main = 1.4, cex.lab = 2) barplot(counts, main=\"Automorphism distribution per Mutation type\",         col = colorRampPalette(c(\"red\", \"yellow\", \"blue\"))(36),          border = NA, axes = TRUE,las=2)"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa_brca1.html","id":"conserved-and-non-conserved-regions","dir":"Articles","previous_headings":"Automorphisms on \\(\\mathbb{Z}_{64}\\)","what":"Conserved and non-conserved regions","title":"Analysis of Automorphisms on a MSA of Primate BRCA1 Gene","text":"specific function provided get coordinates conserved non-conserved regions, can used downstream analyses. conserved regions pairwise comparison retrieved typing:   non-conserved regions pairwise comparison obtained function different settings:","code":"conserv <- conserved_regions(x = brca1_autm) widths <- width(conserv) dist <- fitCDF(widths, distNames = c(2, 3, 7, 10, 11, 19, 20), plot = TRUE,                 loss.fun = \"cauchy\") #>  #> *** Fitting Log-normal distribution ... #> .Fitting Done. #>  #> *** Fitting Half-Normal distribution ... #> .Fitting Done. #>  #> *** Fitting Gamma distribution ... #> . #>  #> Error in nls.lm(par = PARS, fn = optFun, probfun = funLIST[[i]], quantiles = X,  :  #>   Non-finite (or null) value for a parameter specified! #> Function model: Gamma #> Error! #>  #> *** Fitting Generalized 3P Gamma distribution ... #> . #>  #> Error in nls.lm(par = PARS, fn = optFun, probfun = funLIST[[i]], quantiles = X,  :  #>   evaluation of fn function returns non-sensible value! #> Function model: Generalized 3P Gamma #> Error! #>  #> *** Fitting Weibull distribution ... #> .Fitting Done. #>  #> *** Fitting Exponential distribution ... #> .Fitting Done. #>  #> *** Fitting 2P Exponential distribution ... #> .Fitting Done. #>  * Estimating Studentized residuals for Weibull distribution #> *** Internally studentized residuals cannot be estimated #> Trying the estimation of standardized residuals: residuals/s #>  * Plots for Weibull distribution... dist #> weibull CDF model #> ------ #> Parameters: #>           Estimate   Std. Error  t value   Pr(>|t|)     #> shape 9.603561e-01 3.700813e-04 2594.987 < 2.22e-16 *** #> scale 3.464730e+01 1.097444e-02 3157.089 < 2.22e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.000455399 on 78100 degrees of freedom #> Number of iterations to termination: 16  #> Reason for termination: Relative error in the sum of squares is at most `ftol'.  #>  #> Goodness of fit: #>     Adj.R.Square       rho R.Cross.val       AIC #> gof    0.9999975 0.9999975   0.9962602 -352083.1 par(lwd = 0.5, cex.axis = 2, cex.lab =1.4,     cex.main = 2, mar=c(5,6,4,4), family = \"serif\") hist(widths, 40, freq = FALSE, las = 1, family = \"serif\", col = \"cyan1\", cex.main = 1.2, main = \"Histogram and best fitted CDF model\", xlab = \"Conserved region size (bp)\", yaxt = \"n\", ylab=\"\", cex.axis = 1.4) axis(side = 2, cex.axis = 1.4, las = 2, line = -0.2) mtext(\"Density\", side = 2, cex = 1.4, line = 4)  x1 <- seq(1, 600, by = 1) txt <- TeX(r'($\\textit{f}(\\textit{x}) = \\frac{\\alpha}{\\beta}     {(\\frac{\\textit{x}}{\\beta})}^{\\alpha-1}     e^{(-\\frac{\\textit{x}}{\\beta})^\\alpha}$)')  lines(x1, dweibull(x1,                   shape = coef(dist$bestfit)[1],                   scale = coef(dist$bestfit)[2]                   ),       col = \"red\", lwd = 1) mtext(txt, side = 3, line = -4, cex = 1.8, adj = 0.4) ncs <- conserved_regions(x = autby_coef, conserved = FALSE) ncs #> AutomorphismByCoef object with 8956 ranges and 5 metadata columns: #>                                    seqnames    ranges strand |        seq1        seq2      autm    mut_type #>                                       <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <character> #>              human_1.gelada_baboon        1         4      + |         TCT         CCT         9         YHH #>              human_2.gelada_baboon        1         4      + |         TCT         CCT         9         YHH #>            gorilla_1.gelada_baboon        1         4      + |         TCT         CCT         9         YHH #>            gorilla_2.gelada_baboon        1         4      + |         TCT         CCT         9         YHH #>            gorilla_3.gelada_baboon        1         4      + |         TCT         CCT         9         YHH #>                                ...      ...       ...    ... .         ...         ...       ...         ... #>   silvery_gibbon_1.bolivian_monkey        1       756      + |         CCC         CCT        59         HHY #>   silvery_gibbon_3.bolivian_monkey        1       756      + |         CCC         CCT        59         HHY #>    golden_monkey_1.bolivian_monkey        1       756      + |         CCC         CCT        59         HHY #>    golden_monkey_2.bolivian_monkey        1       756      + |         CCC         CCT        59         HHY #>      gelada_baboon.bolivian_monkey        1       756      + |         CCC         CCT        59         HHY #>                                           cube #>                                    <character> #>              human_1.gelada_baboon        ACGT #>              human_2.gelada_baboon        ACGT #>            gorilla_1.gelada_baboon        ACGT #>            gorilla_2.gelada_baboon        ACGT #>            gorilla_3.gelada_baboon        ACGT #>                                ...         ... #>   silvery_gibbon_1.bolivian_monkey        ACGT #>   silvery_gibbon_3.bolivian_monkey        ACGT #>    golden_monkey_1.bolivian_monkey        ACGT #>    golden_monkey_2.bolivian_monkey        ACGT #>      gelada_baboon.bolivian_monkey        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa_brca1.html","id":"subsetting-regions-of-interest","dir":"Articles","previous_headings":"","what":"Subsetting regions of interest","title":"Analysis of Automorphisms on a MSA of Primate BRCA1 Gene","text":"application available bioinformatic tools straightforward. example, knowing positions conserved non-conserved regions, can subset alignment region potential interest. coordinates carrying mutational events : use function DNAStringSet Bioconductor R package Biostrings subset MSA primate cytochrome c.  Next, function ggseqlogo R package ggseqlogo applied get logo sequence selected MSA region.  corresponding aminoacid sequence corresponding aminoacid sequence logo  , first mutational event reported codon sequence correspond synonymous mutation.","code":"sort(unique(start(ncs))) #>   [1]   4   6   7  11  15  20  25  29  45  52  60  63  71  74  77  85  86  91  94 100 101 104 113 122 124 128 132 138 #>  [29] 139 142 143 146 148 151 152 155 159 161 164 167 170 172 175 176 181 182 190 191 193 194 196 205 214 216 225 227 #>  [57] 231 233 234 239 240 241 244 245 247 251 252 253 254 267 269 270 275 276 279 281 282 286 287 292 293 299 300 301 #>  [85] 310 318 319 323 324 326 328 329 330 331 333 339 340 350 357 359 360 361 363 369 370 374 375 376 378 394 396 399 #> [113] 402 406 407 410 417 418 421 425 428 431 433 435 438 442 443 444 445 447 453 458 461 466 472 476 477 478 480 482 #> [141] 483 485 486 487 489 499 501 502 503 505 507 509 510 511 516 518 521 522 523 525 526 532 535 536 537 545 549 550 #> [169] 552 554 560 564 568 569 572 576 578 584 585 590 597 601 602 605 623 647 653 654 659 660 665 669 678 681 683 685 #> [197] 693 701 702 703 704 716 726 728 730 731 748 749 753 756 brca1_aln_region <- DNAStringSet(brca1_aln, start = 37*3 - 2, end = 42*3) brca1_aln_region #> DNAStringSet object of length 20: #>      width seq                                                                                      names                #>  [1]    18 ACAAAGTGTGACCACATA                                                                       NM_007298.3:20-22... #>  [2]    18 ACAAAGTGTGACCACATA                                                                       U64805.1:1-2280_H... #>  [3]    18 ACAAAGTGTGACCACATA                                                                       XM_031011560.1:23... #>  [4]    18 ACAAAGTGTGACCACATA                                                                       XM_031011561.1:23... #>  [5]    18 ACAAAGTGTGACCACATA                                                                       XM_031011562.1:16... #>  ...   ... ... #> [16]    18 ACAAAGTGTGACCACATA                                                                       XM_032163758.1:13... #> [17]    18 ACAAAGTGTGACCACATA                                                                       XM_030923119.1:18... #> [18]    18 ACAAAGTGTGACCACATA                                                                       XM_030923118.1:18... #> [19]    18 ACAAAGTGTGACCACATA                                                                       XM_025363316.1:14... #> [20]    18 ACAAAGTGTGACCACATA                                                                       XM_039475995.1:49... ggseqlogo( as.character(brca1_aln_region) ) brca1_aln_region_aa = translate(brca1_aln_region) brca1_aln_region_aa #> AAStringSet object of length 20: #>      width seq                                                                                      names                #>  [1]     6 TKCDHI                                                                                   NM_007298.3:20-22... #>  [2]     6 TKCDHI                                                                                   U64805.1:1-2280_H... #>  [3]     6 TKCDHI                                                                                   XM_031011560.1:23... #>  [4]     6 TKCDHI                                                                                   XM_031011561.1:23... #>  [5]     6 TKCDHI                                                                                   XM_031011562.1:16... #>  ...   ... ... #> [16]     6 TKCDHI                                                                                   XM_032163758.1:13... #> [17]     6 TKCDHI                                                                                   XM_030923119.1:18... #> [18]     6 TKCDHI                                                                                   XM_030923118.1:18... #> [19]     6 TKCDHI                                                                                   XM_025363316.1:14... #> [20]     6 TKCDHI                                                                                   XM_039475995.1:49... ggseqlogo( as.character(brca1_aln_region_aa) )"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/automorphism_on_msa_brca1.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Analysis of Automorphisms on a MSA of Primate BRCA1 Gene","text":"1. Sanchez R, Morgado E, Grau R. Gene algebra genetic code algebraic structure. J Math Biol. 2005 Oct;51(4):431-57. doi: 10.1007/s00285-005-0332-8. Epub 2005 Jul 13. PMID: 16012800. ( PDF). 2. Robersy Sanchez, Jesús Barreto (2021) Genomic Abelian Finite Groups. doi: 10.1101/2021.06.01.446543. 3. M. V José, E.R. Morgado, R. Sánchez, T. Govezensky, 24 possible algebraic representations standard genetic code six three dimensions, Adv. Stud. Biol. 4 (2012) 119–152.PDF. 4. R. Sanchez. Symmetric Group Genetic–Code Cubes. Effect Genetic–Code Architecture Evolutionary Process MATCH Commun. Math. Comput. Chem. 79 (2018) 527-560. PDF.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/covid_19.html","id":"sars-coronavirus-gz02-vs-bat-sl-covzc45-data","dir":"Articles","previous_headings":"","what":"SARS coronavirus GZ02 vs bat-SL-CoVZC45 data","title":"Automorphism analysis on COVID-19 data","text":"DNA sequence alignment viruses can downloaded GitHub: automorphisms (representing mutational events) computed function automorphisms. sake saving time, results computation provided package. next call just load automorphism data pacakge","code":"URL <- paste0(\"https://github.com/genomaths/seqalignments/raw/master/\",          \"COVID-19/AY390556.1_265-13398_13398-21485_RNA-POL_SARS_COVI_GZ02.fas\")  covid_aln2 <- readDNAMultipleAlignment(filepath = URL) autm <- automorphisms(                     seq = covid_aln2,                     group = \"Z64\",                     cube = c(\"ACGT\", \"TGCA\"),                     cube_alt = c(\"CATG\", \"GTAC\"),                     verbose = FALSE) data(autm, package = \"GenomAutomorphism\") autm #> Automorphism object with 7100 ranges and 6 metadata columns: #>          seqnames    ranges strand |        seq1        seq2    coord1    coord2      autm        cube #>             <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> <numeric> <character> #>      [1]        1         1      + |         ACC         ATC        17        49        33        ACGT #>      [2]        1         2      + |         TAT         TAT        15        15         1        ACGT #>      [3]        1         3      + |         GTT         GTT        59        59         1        ACGT #>      [4]        1         4      + |         GGT         GGT        43        43         1        ACGT #>      [5]        1         5      + |         ATT         ATT        51        51         1        ACGT #>      ...      ...       ...    ... .         ...         ...       ...       ...       ...         ... #>   [7096]        1      7096      + |         TTA         TTA        60        60         1        ACGT #>   [7097]        1      7097      + |         GGC         GGC        41        41         1        ACGT #>   [7098]        1      7098      + |         GTT         GTT        59        59         1        ACGT #>   [7099]        1      7099      + |         CTA         CAA        52         4         5        ACGT #>   [7100]        1      7100      + |         TCA         TCA        28        28         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths counts <- table(autm$cube[ autm$autm != 1 | is.na(autm$autm) ])  par(family = \"serif\", cex = 0.9, font = 2, mar=c(4,6,4,4)) barplot(counts, main=\"Automorphism distribution\",         xlab=\"Genetic-code cube representation\",         ylab=\"Fixed mutational events\",         col=c(\"darkblue\",\"red\", \"darkgreen\"),          border = NA, axes = FALSE, #ylim = c(0, 2000),          cex.lab = 2, cex.main = 1.5, cex.names = 2) axis(2, at = c(0, 500, 1000, 1500, 2000), cex.axis = 1.5) mtext(side = 1,line = -1.8, at = c(0.7, 1.9, 3.1, 4.3, 5.5),       text = paste0( counts ), cex = 1.4,       col = c(\"white\",\"yellow\", \"black\"))"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/covid_19.html","id":"analysis-of-conserved-regions","dir":"Articles","previous_headings":"","what":"Analysis of conserved regions","title":"Automorphism analysis on COVID-19 data","text":"Next, function fitCDF applied find best fitted probability function sizes conserved regions.   apply Bootstrap test Goodness fit, tt seems reasons reject hypothesis sizes conserved regions follows Generalized Gamma distribution.","code":"conserv2 <- conserved_regions(x = autm) conserv2 #> AutomorphismByCoef object with 3536 ranges and 5 metadata columns: #>          seqnames    ranges strand |        seq1        seq2      autm    mut_type        cube #>             <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <character> <character> #>      [1]        1       2-9      + |         TAT         TAT         1         HHH        ACGT #>      [2]        1       2-9      + |         GTT         GTT         1         HHH        ACGT #>      [3]        1       2-9      + |         GGT         GGT         1         HHH        ACGT #>      [4]        1       2-9      + |         ATT         ATT         1         HHH        ACGT #>      [5]        1       2-9      + |         GGG         GGG         1         HHH        ACGT #>      ...      ...       ...    ... .         ...         ...       ...         ...         ... #>   [3532]        1 7095-7098      + |         TGA         TGA         1         HHH        ACGT #>   [3533]        1 7095-7098      + |         TTA         TTA         1         HHH        ACGT #>   [3534]        1 7095-7098      + |         GGC         GGC         1         HHH        ACGT #>   [3535]        1 7095-7098      + |         GTT         GTT         1         HHH        ACGT #>   [3536]        1      7100      + |         TCA         TCA         1         HHH        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths widths <- width(conserv2) dist2 <- fitCDF(widths, distNames = c(3, 7, 9, 10, 11, 12, 19, 20),                  plot = TRUE,                  loss.fun = \"cauchy\") #> .Fitting Done. #> .Fitting Done. #> .Fitting Done. #> .Fitting Done. #> .Fitting Done. #> .Fitting Done. #> .Fitting Done. #> .Fitting Done. #>  * Estimating Studentized residuals for Generalized 4P Gamma distribution #>  * Plots for Generalized 4P Gamma distribution... dist2 #> ggamma CDF model #> ------ #> Parameters: #>          Estimate  Std. Error   t value   Pr(>|t|)     #> alpha 1.556406250 0.008614145 180.68030 < 2.22e-16 *** #> scale 5.565549302 0.030501245 182.46958 < 2.22e-16 *** #> mu    0.459037959 0.004525327 101.43751 < 2.22e-16 *** #> psi   0.452989903 0.004815927  94.06079 < 2.22e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 1.633916e-05 on 3532 degrees of freedom #> Number of iterations to termination: 32  #> Reason for termination: Relative error in the sum of squares is at most `ftol'.  #>  #> Goodness of fit: #>     Adj.R.Square rho R.Cross.val      AIC #> gof            1   1    0.999797 -27337.9 par(lwd = 0.5, cex.axis = 2, cex.lab =1.4,     cex.main = 2, mar=c(5,6,4,4), family = \"serif\") hist(widths, 20, freq = FALSE, las = 1, family = \"serif\", col = \"cyan1\", cex.main = 0.9, main = \"Histogram and best fitted CDF model for conserved region sizes\", xlab = \"Conserved region size (bp)\", yaxt = \"n\", ylab=\"\", cex.axis = 1.4) axis(side = 2, cex.axis = 1.4, las = 2) mtext(\"Density\", side = 2, cex = 1.4, line = 3.5)  x1 <- seq(1, 150, by = 1) lines(x1, dggamma(x1,                   alpha = coef(dist2$bestfit)[1],                   scale = coef(dist2$bestfit)[2],                   psi = coef(dist2$bestfit)[3]                   ),       col = \"red\", lwd = 1) par(new = TRUE) plot(TeX(r'($\\textit{f}(\\textit{x}) = \\frac{\\alpha}{\\beta\\Gamma(\\gamma)}   {(\\frac{\\textit{x - \\mu}}{\\beta})}^{\\alpha\\delta-1}   e^{(-\\frac{\\textit{x - \\mu}}{\\beta})^\\alpha}$)')) # text(x = 10, y = 0.3, label = txt, adj = 0.5, cex = 1.4) mcgoftest(            varobj = widths,            model = dist2,           stat = \"ks\") #> *** Permutation GoF testing based on Kolmogorov-Smirnov statistic ( parametric approach )  ... #>       KS.stat.D      mc_p.value KS.stat.p.value     sample.size       num.sampl  #>       0.2239755       1.0000000       0.0000000    3536.0000000     999.0000000   mcgoftest(           varobj = widths,           model = dist2,           stat = \"ad\") #> *** Permutation GoF testing based on Anderson–Darling statistic ( parametric approach )  ... #>     AD.stat  mc_p.value sample.size   num.sampl  #>    190.1027      1.0000   3536.0000    999.0000"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/covid_19.html","id":"grouping-automorphism-by-automorphisms-coefficients--types-of-mutations","dir":"Articles","previous_headings":"Analysis of conserved regions","what":"Grouping automorphism by automorphism’s coefficients. Types of mutations","title":"Automorphism analysis on COVID-19 data","text":"Alignment gaps denoting indel mutations labeled “—”.","code":"autby_coef2 <- automorphism_bycoef(autm) autby_coef2 <- autby_coef2[ autby_coef2$autm != 1 & autby_coef2$autm != -1  ] counts2 <- table(autby_coef2$mut_type) counts2 <- sort(counts2, decreasing = TRUE) count. <- counts2[ counts2 > 9 ]  par(family = \"serif\", cex.axis = 2, font = 2, las = 1,      cex.main = 1.4, mar = c(6,3,4,4)) barplot(count., main=\"Automorphism distribution per Mutation type\",         col = colorRampPalette(c(\"red\", \"yellow\", \"blue\"))(36),          border = NA, axes = FALSE,las=2) axis(side = 2,  cex.axis = 2, line = -1.8 ) counts2 #>  #> YHH WHH RHH HYH HHY MHH HWH HRH KHH HHR SHH HHW HKH HMH YYH HHK HHM RWH RYH YHY HSH SYH YRH MYH RRH WYH KYH MRH RHY KRH  #> 412 403 335 318 230 189 180 178 156 144 100  85  67  65  27  25  23  23  22  16  15  14  13  12  12  11  10  10  10   9  #> YHR HHS MHY WWH YWH HRY MHR RHR WRH HWY HYR KHW KWH RKH WHY YKH HYY SRH WHW YSH HKY MHW WHR WMH YHW YMH HMY HWR MHK MWH  #>   9   8   8   8   8   7   7   7   7   6   6   6   6   6   6   6   5   5   5   5   4   4   4   4   4   4   3   3   3   3  #> SHR SHY WSH YHK YHM HRW KHR KHY KKH KSH MKH RHM RHW RMH SHW SMH SSH SWH WHK WHM WKH YYR HKK HKR HMR HMW HRM HRR HSW HWS  #>   3   3   3   3   3   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   1   1   1   1   1   1   1   1  #> HYM KHK KHS MHM MHS MKM MSW MWR MWY RHK RYR SKH SSY WWS YHS YRY YYS  #>   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/covid_19.html","id":"sars-coronavirus-gz02-vs-bat-sl-covzc45-and-bat-sars-like-coronavirus-isolate-rs7327","dir":"Articles","previous_headings":"","what":"SARS coronavirus GZ02 vs bat-SL-CoVZC45 and Bat SARS-like coronavirus isolate Rs7327","title":"Automorphism analysis on COVID-19 data","text":"analysis, , applied considering bat coronaviruses Next, conserved regions identified best fitted probability distribution estemated regions widths:  Joining datasets increases sample size improved predictions respect comparison SARS coronavirus GZ02 vs Bat SARS-like coronavirus alone.  permutation goodness--fit test suggests enough reason reject null hypothesis region widths follow generalized gamma distribution.","code":"data(covid_autm, package = \"GenomAutomorphism\") covid_autm #> Automorphism object with 9722 ranges and 6 metadata columns: #>          seqnames    ranges strand |        seq1        seq2    coord1    coord2      autm        cube #>             <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> <numeric> <character> #>      [1]        1         1      + |         ATG         ATG        50        50         1        ACGT #>      [2]        1         2      + |         GAG         GAG        10        10         1        ACGT #>      [3]        1         3      + |         AGC         AGC        33        33         1        ACGT #>      [4]        1         4      + |         CTT         CTT        55        55         1        ACGT #>      [5]        1         5      + |         GTT         GTT        59        59         1        ACGT #>      ...      ...       ...    ... .         ...         ...       ...       ...       ...         ... #>   [9718]        1      9718      + |         TCA         TCA        28        28         1        ACGT #>   [9719]        1      9719      + |         ACT         ACT        19        19         1        ACGT #>   [9720]        1      9720      + |         CAG         CAG         6         6         1        ACGT #>   [9721]        1      9721      + |         GCA         GCA        24        24         1        ACGT #>   [9722]        1      9722      + |         TAA         TAA        12        12         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths conserv <- conserved_regions(covid_autm) conserv #> AutomorphismByCoef object with 6348 ranges and 5 metadata columns: #>          seqnames    ranges strand |        seq1        seq2      autm    mut_type        cube #>             <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <character> <character> #>      [1]        1      1-19      + |         ATG         ATG         1         HHH        ACGT #>      [2]        1      1-19      + |         GAG         GAG         1         HHH        ACGT #>      [3]        1      1-19      + |         AGC         AGC         1         HHH        ACGT #>      [4]        1      1-19      + |         CTT         CTT         1         HHH        ACGT #>      [5]        1      1-19      + |         GTT         GTT         1         HHH        ACGT #>      ...      ...       ...    ... .         ...         ...       ...         ...         ... #>   [6344]        1 9683-9722      + |         GGA         GGA         1         HHH        ACGT #>   [6345]        1 9683-9722      + |         TCT         TCT         1         HHH        ACGT #>   [6346]        1 9683-9722      + |         TCA         TCA         1         HHH        ACGT #>   [6347]        1 9683-9722      + |         GCA         GCA         1         HHH        ACGT #>   [6348]        1 9683-9722      + |         TAA         TAA         1         HHH        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths consvr <- c(conserv, conserv2) widths <- width(consvr) dist <- fitCDF(widths, distNames = c(2, 3, 7, 9, 10, 11, 19, 20), plot = TRUE,                 loss.fun = \"cauchy\") #>  #> *** Fitting Log-normal distribution ... #> .Fitting Done. #>  #> *** Fitting Half-Normal distribution ... #> .Fitting Done. #>  #> *** Fitting Gamma distribution ... #> .Fitting Done. #>  #> *** Fitting Generalized 4P Gamma distribution ... #> .Fitting Done. #>  #> *** Fitting Generalized 3P Gamma distribution ... #> .Fitting Done. #>  #> *** Fitting Weibull distribution ... #> .Fitting Done. #>  #> *** Fitting Exponential distribution ... #> .Fitting Done. #>  #> *** Fitting 2P Exponential distribution ... #> .Fitting Done. #>  * Estimating Studentized residuals for Generalized 4P Gamma distribution #>  * Plots for Generalized 4P Gamma distribution... dist #> ggamma CDF model #> ------ #> Parameters: #>           Estimate   Std. Error  t value   Pr(>|t|)     #> alpha  0.764301273  0.003181955 240.1987 < 2.22e-16 *** #> scale 24.332374324  0.242116603 100.4986 < 2.22e-16 *** #> mu     0.755933883  0.002821771 267.8934 < 2.22e-16 *** #> psi    0.729861365  0.005149631 141.7308 < 2.22e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 6.662038e-05 on 9880 degrees of freedom #> Number of iterations to termination: 24  #> Reason for termination: Relative error in the sum of squares is at most `ftol'.  #>  #> Goodness of fit: #>     Adj.R.Square       rho R.Cross.val      AIC #> gof    0.9999999 0.9999999   0.9993681 -63545.1 par(lwd = 0.5, cex.axis = 2, cex.lab =1.4,     cex.main = 2, mar=c(5,6,4,4), family = \"serif\") hist(widths, 14, freq = FALSE, las = 1, family = \"serif\", col = \"cyan1\", cex.main = 0.9, main = \"Histogram and best fitted CDF model for conserved region sizes\", xlab = \"Conserved region size (bp)\", yaxt = \"n\", ylab=\"\", cex.axis = 1.4) axis(side = 2, cex.axis = 1.4, las = 2) mtext(\"Density\", side = 2, cex = 1.4, line = 3.5)  x1 <- seq(1, 150, by = 1) txt <- TeX(r'($\\textit{f}(\\textit{x}) = \\frac{\\alpha}{\\beta\\Gamma(\\gamma)}   {(\\frac{\\textit{x - \\mu}}{\\beta})}^{\\alpha\\delta-1}   e^{(-\\frac{\\textit{x - \\mu}}{\\beta})^\\alpha}$)')  lines(x1, dggamma(x1,                   alpha = coef(dist$bestfit)[1],                   scale = coef(dist$bestfit)[2],                   psi = coef(dist$bestfit)[3]                   ),       col = \"red\", lwd = 1) text(x = 70, y = 0.03, label = txt, adj = 0.5, cex = 1.4) mcgoftest(            varobj = widths,            model = dist,           stat = \"ks\") #> *** Permutation GoF testing based on Kolmogorov-Smirnov statistic ( parametric approach )  ... #>       KS.stat.D      mc_p.value KS.stat.p.value     sample.size       num.sampl  #>       0.1093538       1.0000000       0.0000000    9884.0000000     999.0000000  cat(\"\\n===========================\\n\") #>  #> =========================== mcgoftest(           varobj = widths,           model = dist,           stat = \"ad\") #> *** Permutation GoF testing based on Anderson–Darling statistic ( parametric approach )  ... #>     AD.stat  mc_p.value sample.size   num.sampl  #>    91.65261     1.00000  9884.00000   999.00000"},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/covid_19.html","id":"grouping-automorphism-by-automorphisms-coefficients","dir":"Articles","previous_headings":"SARS coronavirus GZ02 vs bat-SL-CoVZC45 and Bat SARS-like coronavirus isolate Rs7327","what":"Grouping automorphism by automorphism’s coefficients","title":"Automorphism analysis on COVID-19 data","text":"said tutorial Get started-GenomAutomorphism, \\(\\mathbb{Z}_{64}\\) automorphisms described functions \\(f(x) = k\\,x\\quad mod\\,64\\), \\(k\\) \\(x\\) elements set integers modulo 64. grouping automorphisms based coefficient \\(k\\) useful downstream statistical analysis. Alignment gaps denoting indel mutations labeled “—”.","code":"autby_coef <- automorphism_bycoef(covid_autm) autby_coef <- c(autby_coef, autby_coef2) autby_coef <- autby_coef[ autby_coef$autm != 1 & autby_coef$autm != -1  ] counts <- table(autby_coef$mut_type) counts <- sort(counts, decreasing = TRUE) count. <- counts[ counts > 9 ]  par(family = \"serif\", cex.axis = 2, font = 2, las = 1,      cex.main = 1.4, cex.lab = 2, mar = c(6,4,4,1)) barplot(count., main=\"Automorphism distribution per Mutation type\",         col = colorRampPalette(c(\"red\", \"yellow\", \"blue\"))(36),          border = NA, axes = FALSE,las=2) axis(side = 2,  cex.axis = 2, line = -1.8 ) counts},{"path":"https://genomaths.github.io/GenomAutomorphism/articles/covid_19.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Automorphism analysis on COVID-19 data","text":"output sessionInfo() system document compiled:","code":"#> R version 4.2.1 (2022-06-23) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 20.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #>  [1] latex2exp_0.9.4          usefr_0.1.0              GenomAutomorphism_0.99.3 Biostrings_2.64.0        #>  [5] GenomeInfoDb_1.32.2      XVector_0.36.0           IRanges_2.30.0           S4Vectors_0.34.0         #>  [9] BiocGenerics_0.42.0      BiocStyle_2.24.0         #>  #> loaded via a namespace (and not attached): #>  [1] sass_0.4.1             jsonlite_1.8.0         foreach_1.5.2          bslib_0.3.1            assertthat_0.2.1       #>  [6] highr_0.9              BiocManager_1.30.17    nls2_0.3-3             GenomeInfoDbData_1.2.8 yaml_2.3.5             #> [11] numDeriv_2016.8-1.1    pillar_1.8.0           lattice_0.20-45        glue_1.6.2             digest_0.6.29          #> [16] GenomicRanges_1.48.0   htmltools_0.5.2        Matrix_1.4-1           pcaPP_2.0-2            pkgconfig_2.0.3        #> [21] bookdown_0.26          zlibbioc_1.42.0        purrr_0.3.4            mvtnorm_1.1-3          copula_1.1-0           #> [26] cubature_2.0.4.4       BiocParallel_1.30.3    tibble_3.1.7           ADGofTest_0.3          generics_0.1.3         #> [31] ellipsis_0.3.2         cachem_1.0.6           proto_1.0.0            cli_3.3.0              mclust_5.4.10          #> [36] magrittr_2.0.3         crayon_1.5.1           memoise_2.0.1          evaluate_0.15          mixdist_0.5-5          #> [41] fs_1.5.2               fansi_1.0.3            doParallel_1.0.17      gsl_2.1-7.1            textshaping_0.3.6      #> [46] tools_4.2.1            data.table_1.14.2      minpack.lm_1.2-2       lifecycle_1.0.1        pspline_1.0-19         #> [51] stringr_1.4.0          stabledist_0.7-1       compiler_4.2.1         pkgdown_2.0.6          jquerylib_0.1.4        #> [56] numbers_0.8-2          systemfonts_1.0.4      rlang_1.0.4            grid_4.2.1             RCurl_1.98-1.7         #> [61] iterators_1.0.14       rstudioapi_0.13        bitops_1.0-7           rmarkdown_2.14         codetools_0.2-18       #> [66] DBI_1.1.2              R6_2.5.1               knitr_1.39             dplyr_1.0.9            fastmap_1.1.0          #> [71] utf8_1.2.2             rprojroot_2.0.3        ragg_1.2.2             desc_1.4.1             stringi_1.7.6          #> [76] Rcpp_1.0.9             parallel_4.2.1         vctrs_0.4.1            tidyselect_1.1.2       xfun_0.30"},{"path":"https://genomaths.github.io/GenomAutomorphism/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Robersy Sanchez. Author, maintainer.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sanchez R (2022). GenomAutomorphism: Compute automorphisms DNA's Abelian group representations. R package version 0.99.3, https://github.com/genomaths/GenomAutomorphism.","code":"@Manual{,   title = {GenomAutomorphism: Compute the automorphisms between DNA's Abelian group representations},   author = {Robersy Sanchez},   year = {2022},   note = {R package version 0.99.3},   url = {https://github.com/genomaths/GenomAutomorphism}, }"},{"path":"https://genomaths.github.io/GenomAutomorphism/index.html","id":"genomautomorphism-","dir":"","previous_headings":"","what":"Compute the automorphisms between DNA's Abelian group representations ","title":"Compute the automorphisms between DNA's Abelian group representations ","text":"Robersy Sanchez Department Biology. Eberly College Science. Pennsylvania State University, University Park, PA 16802rus547@psu.eduORCID: orcid.org/0000-0002-5246-1453","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Compute the automorphisms between DNA's Abelian group representations ","text":"R package compute autimorphisms pairwise aligned DNA sequences represented elements Genomic Abelian group described paper Genomic Abelian Finite Groups. general scenario, whole chromosomes genomic regions population (species close related species) can algebraically represented direct sum cyclic groups specifically Abelian p-groups. Basically, propose representation multiple sequence alignments (MSA) length N finite Abelian group created direct sum homocyclic Abelian group prime-power order:    G = (ℤp1α1)n1 ⊕ (ℤp1α2)n2 ⊕ … ⊕ (ℤpkαk)nk , pi’s prime numbers, αi ∈ ℕ ℤpiαi group integer modulo piαi. purpose automorphism two aligned DNA sequences, piαi ∈ {5, 26, 53}.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/index.html","id":"status","dir":"","previous_headings":"","what":"Status","title":"Compute the automorphisms between DNA's Abelian group representations ","text":"application development. Watch repo check updates.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/index.html","id":"tutotials","dir":"","previous_headings":"","what":"Tutotials","title":"Compute the automorphisms between DNA's Abelian group representations ","text":"several tutorials use package GenomAutomorphism website Get started-GenomAutomorphism Analysis Automorphisms DNA Multiple Sequence Alignment Analysis Automorphisms MSA Primate BRCA1 Gene Short Introduction Algebraic Taxonomy Genes Regions Automorphism analysis COVID-19 data","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/index.html","id":"dependences","dir":"","previous_headings":"","what":"Dependences","title":"Compute the automorphisms between DNA's Abelian group representations ","text":"package depends, far, : Biostrings, GenomicRanges, numbers, S4Vectors.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/index.html","id":"installation-of-r-dependencies","dir":"","previous_headings":"","what":"Installation of R dependencies:","title":"Compute the automorphisms between DNA's Abelian group representations ","text":"","code":"if (!requireNamespace(\"BiocManager\")) install.packages(\"BiocManager\")      BiocManager::install(c(\"Biostrings\", \"GenomicRanges\", \"S4Vectors\",     \"BiocParallel\", \"GenomeInfoDb\", \"BiocGenerics\", \"numbers\", \"devtools\",     \"doParallel\", \"data.table\", \"foreach\",\"parallel\"), dependencies = TRUE)"},{"path":"https://genomaths.github.io/GenomAutomorphism/index.html","id":"you-can-install-genomautomorphism-package-from-github","dir":"","previous_headings":"","what":"You can install GenomAutomorphism package from GitHub","title":"Compute the automorphisms between DNA's Abelian group representations ","text":"","code":"BiocManager::install('genomaths/GenomAutomorphism')"},{"path":"https://genomaths.github.io/GenomAutomorphism/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Compute the automorphisms between DNA's Abelian group representations ","text":"Sanchez R, Morgado E, Grau R. Gene algebra genetic code algebraic structure. J Math Biol. 2005 Oct;51(4):431-57. doi: 10.1007/s00285-005-0332-8. Epub 2005 Jul 13. PMID: 16012800. ( PDF). Sanchez R, Grau R, Morgado E. novel Lie algebra genetic code Galois field four DNA bases. Math Biosci. 2006;202: 156–174. doi:10.1016/j.mbs.2006.03.017 Sanchez R, Grau R. algebraic hypothesis primeval genetic code architecture. Math Biosci. 2009/07/18. 2009;221: 60–76. doi:S0025-5564(09)00114-X [pii] 10.1016/j.mbs.2009.07.001 Robersy Sanchez, Jesús Barreto (2021) Genomic Abelian Finite Groups. doi: 10.1101/2021.06.01.446543. M. V José, E.R. Morgado, R. Sánchez, T. Govezensky, 24 possible algebraic representations standard genetic code six three dimensions, Adv. Stud. Biol. 4 (2012) 119–152.PDF. R. Sanchez. Symmetric Group Genetic–Code Cubes. Effect Genetic–Code Architecture Evolutionary Process MATCH Commun. Math. Comput. Chem. 79 (2018) 527-560. PDF.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/index.html","id":"see-also","dir":"","previous_headings":"","what":"See also","title":"Compute the automorphisms between DNA's Abelian group representations ","text":"Symmetric Group Genetic-Code Cubes","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/Automorphism-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for Automorphism-class and AutomorphismList-class Objects — as.AutomorphismList","title":"Methods for Automorphism-class and AutomorphismList-class Objects — as.AutomorphismList","text":"Several methods available applied Automorphism-class AutomorphismList-class objects.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/Automorphism-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for Automorphism-class and AutomorphismList-class Objects — as.AutomorphismList","text":"","code":"as.AutomorphismList(x, grs = GRanges(), ...)  # S4 method for GRangesList,GRanges_OR_NULL as.AutomorphismList(x, grs = GRanges(), ...)  # S4 method for list,GRanges_OR_NULL as.AutomorphismList(x, grs = GRanges(), ...)  # S4 method for AutomorphismList names(x)  # S4 method for AutomorphismList names(x) <- value  # S4 method for AutomorphismList as.list(x)  # S4 method for AutomorphismList show(object)"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/Automorphism-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for Automorphism-class and AutomorphismList-class Objects — as.AutomorphismList","text":"x DataFrame automorphisms class object. object object AutomorphismList-class. gr GRanges-class object.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/Automorphism-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Methods for Automorphism-class and AutomorphismList-class Objects — as.AutomorphismList","text":"returned value depends (understood) method called.","code":""},{"path":[]},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/Automorphism-methods.html","id":"as-from-automorphism-","dir":"Reference","previous_headings":"","what":"as(from, \"Automorphism\"):","title":"Methods for Automorphism-class and AutomorphismList-class Objects — as.AutomorphismList","text":"Permits transformation data.frame DataFrame-class object Automorphism-class object proper columns provided. Methods GRanges-class can also applied","code":""},{"path":[]},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/Automorphism-methods.html","id":"as-automorphismlist-x-","dir":"Reference","previous_headings":"","what":"as.AutomorphismList(x):","title":"Methods for Automorphism-class and AutomorphismList-class Objects — as.AutomorphismList","text":".AutomorphismList function transform list GRanges-class, GRangesList-class, list data.frame DataFrame-class objects AutomorphismList-class object.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/Automorphism-methods.html","id":"unlist-x-","dir":"Reference","previous_headings":"","what":"unlist(x)","title":"Methods for Automorphism-class and AutomorphismList-class Objects — as.AutomorphismList","text":"transforms AutomorphismList-class object Automorphism-class object.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/Automorphism-methods.html","id":"as-list-x-","dir":"Reference","previous_headings":"","what":"as.list(x)","title":"Methods for Automorphism-class and AutomorphismList-class Objects — as.AutomorphismList","text":"transforms list Automorphism-class objects AutomorphismList-class object.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/Automorphism-methods.html","id":"as-x-grangeslist-","dir":"Reference","previous_headings":"","what":"as(x, \"GRangesList\")","title":"Methods for Automorphism-class and AutomorphismList-class Objects — as.AutomorphismList","text":"transforms 'GRangesList' Automorphism-class objects AutomorphismList-class object.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/Automorphism-methods.html","id":"names-x-","dir":"Reference","previous_headings":"","what":"names(x)","title":"Methods for Automorphism-class and AutomorphismList-class Objects — as.AutomorphismList","text":"get element's names AutomorphismList-class object.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/Automorphism-methods.html","id":"names-x-lt-value","dir":"Reference","previous_headings":"","what":"names(x) <- value","title":"Methods for Automorphism-class and AutomorphismList-class Objects — as.AutomorphismList","text":"assign names element AutomorphismList-class object.","code":""},{"path":[]},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/Automorphism-methods.html","id":"unlist-x--1","dir":"Reference","previous_headings":"","what":"unlist(x):","title":"Methods for Automorphism-class and AutomorphismList-class Objects — as.AutomorphismList","text":"transforms AutomorphismByCoefList-class object AutomorphismByCoef-class object.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/Automorphism-methods.html","id":"as-x-automorphismbycoeflist-","dir":"Reference","previous_headings":"","what":"as(x, \"AutomorphismByCoefList\")","title":"Methods for Automorphism-class and AutomorphismList-class Objects — as.AutomorphismList","text":"transforms 'list' AutomorphismByCoef-class object AutomorphismByCoefList-class object.","code":""},{"path":[]},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/Automorphism-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Methods for Automorphism-class and AutomorphismList-class Objects — as.AutomorphismList","text":"","code":"## Load datasets data(autm, brca1_autm)  ## Transforming a list of Automorphisms into an AutomorphismList object lista <- list(human = brca1_autm[[1]], gorilla = brca1_autm[[2]]) as.AutomorphismList(lista) #> AutomorphismList object of length: 2 #> names(2): human gorilla  #> -------  #> Automorphism object with 761 ranges and 6 metadata columns: #>         seqnames    ranges strand |        seq1        seq2    coord1    coord2 #>            <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> #>     [1]        1         1      + |         ATG         ATG        50        50 #>     [2]        1         2      + |         GAT         GAT        11        11 #>     [3]        1         3      + |         TTA         TTA        60        60 #>     [4]        1         4      + |         TCT         TCT        31        31 #>     [5]        1         5      + |         GCT         GCT        27        27 #>     ...      ...       ...    ... .         ...         ...       ...       ... #>   [757]        1       757      + |         CAC         CAC         5         5 #>   [758]        1       758      + |         AGC         AGC        33        33 #>   [759]        1       759      + |         CAC         CAC         5         5 #>   [760]        1       760      + |         TAC         TAC        13        13 #>   [761]        1       761      + |         TGA         TGA        44        44 #>              autm        cube #>         <numeric> <character> #>     [1]         1        ACGT #>     [2]         1        ACGT #>     [3]         1        ACGT #>     [4]         1        ACGT #>     [5]         1        ACGT #>     ...       ...         ... #>   [757]         1        ACGT #>   [758]         1        ACGT #>   [759]         1        ACGT #>   [760]         1        ACGT #>   [761]         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #> ... #> <1 more DFrame element(s)> #> Two slots: 'DataList' & 'SeqRanges' #> -------   ## Alternatively we can set aut <- as.list(brca1_autm[1:2]) class(aut) #> [1] \"list\"  ## And reverse it aut <- as.AutomorphismList(aut) aut #> AutomorphismList object of length: 2 #> names(2): human_1.human_2 human_1.gorilla_1  #> -------  #> Automorphism object with 761 ranges and 6 metadata columns: #>         seqnames    ranges strand |        seq1        seq2    coord1    coord2 #>            <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> #>     [1]        1         1      + |         ATG         ATG        50        50 #>     [2]        1         2      + |         GAT         GAT        11        11 #>     [3]        1         3      + |         TTA         TTA        60        60 #>     [4]        1         4      + |         TCT         TCT        31        31 #>     [5]        1         5      + |         GCT         GCT        27        27 #>     ...      ...       ...    ... .         ...         ...       ...       ... #>   [757]        1       757      + |         CAC         CAC         5         5 #>   [758]        1       758      + |         AGC         AGC        33        33 #>   [759]        1       759      + |         CAC         CAC         5         5 #>   [760]        1       760      + |         TAC         TAC        13        13 #>   [761]        1       761      + |         TGA         TGA        44        44 #>              autm        cube #>         <numeric> <character> #>     [1]         1        ACGT #>     [2]         1        ACGT #>     [3]         1        ACGT #>     [4]         1        ACGT #>     [5]         1        ACGT #>     ...       ...         ... #>   [757]         1        ACGT #>   [758]         1        ACGT #>   [759]         1        ACGT #>   [760]         1        ACGT #>   [761]         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #> ... #> <1 more DFrame element(s)> #> Two slots: 'DataList' & 'SeqRanges' #> -------   ## Let's get the element names from object 'aut' names(aut) #> [1] \"human_1.human_2\"   \"human_1.gorilla_1\"  ## Let's assign new names names(aut) <- c(\"human_1\", \"gorilla_1\") names(aut) #> [1] \"human_1\"   \"gorilla_1\"  ## Transforming a GRangesList of Automorphisms into an AutomorphismList ## object lista <- as(lista, \"GRangesList\") as.AutomorphismList(lista) #> AutomorphismList object of length: 2 #> names(2): human gorilla  #> -------  #> Automorphism object with 761 ranges and 6 metadata columns: #>         seqnames    ranges strand |        seq1        seq2    coord1    coord2 #>            <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> #>     [1]        1         1      + |         ATG         ATG        50        50 #>     [2]        1         2      + |         GAT         GAT        11        11 #>     [3]        1         3      + |         TTA         TTA        60        60 #>     [4]        1         4      + |         TCT         TCT        31        31 #>     [5]        1         5      + |         GCT         GCT        27        27 #>     ...      ...       ...    ... .         ...         ...       ...       ... #>   [757]        1       757      + |         CAC         CAC         5         5 #>   [758]        1       758      + |         AGC         AGC        33        33 #>   [759]        1       759      + |         CAC         CAC         5         5 #>   [760]        1       760      + |         TAC         TAC        13        13 #>   [761]        1       761      + |         TGA         TGA        44        44 #>              autm        cube #>         <numeric> <character> #>     [1]         1        ACGT #>     [2]         1        ACGT #>     [3]         1        ACGT #>     [4]         1        ACGT #>     [5]         1        ACGT #>     ...       ...         ... #>   [757]         1        ACGT #>   [758]         1        ACGT #>   [759]         1        ACGT #>   [760]         1        ACGT #>   [761]         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #> ... #> <1 more DFrame element(s)> #> Two slots: 'DataList' & 'SeqRanges' #> -------   ## Transform a AutomorphismList-class object into an Automorphism-class ## object  unlist(brca1_autm[1:2]) #> Automorphism object with 1522 ranges and 6 metadata columns: #>                     seqnames    ranges strand |        seq1        seq2 #>                        <Rle> <IRanges>  <Rle> | <character> <character> #>     human_1.human_2        1         1      + |         ATG         ATG #>     human_1.human_2        1         2      + |         GAT         GAT #>     human_1.human_2        1         3      + |         TTA         TTA #>     human_1.human_2        1         4      + |         TCT         TCT #>     human_1.human_2        1         5      + |         GCT         GCT #>                 ...      ...       ...    ... .         ...         ... #>   human_1.gorilla_1        1       757      + |         CAC         CAC #>   human_1.gorilla_1        1       758      + |         AGC         AGC #>   human_1.gorilla_1        1       759      + |         CAC         CAC #>   human_1.gorilla_1        1       760      + |         TAC         TAC #>   human_1.gorilla_1        1       761      + |         TGA         TGA #>                        coord1    coord2      autm        cube #>                     <numeric> <numeric> <numeric> <character> #>     human_1.human_2        50        50         1        ACGT #>     human_1.human_2        11        11         1        ACGT #>     human_1.human_2        60        60         1        ACGT #>     human_1.human_2        31        31         1        ACGT #>     human_1.human_2        27        27         1        ACGT #>                 ...       ...       ...       ...         ... #>   human_1.gorilla_1         5         5         1        ACGT #>   human_1.gorilla_1        33        33         1        ACGT #>   human_1.gorilla_1         5         5         1        ACGT #>   human_1.gorilla_1        13        13         1        ACGT #>   human_1.gorilla_1        44        44         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths  ## Let's transform a AutomorphismByCoefList-class object into an  ## AutomorphismByCoef-class object data(\"autby_coef\") unlist(autby_coef[1:2]) #> AutomorphismByCoef object with 683 ranges and 5 metadata columns: #>                     seqnames    ranges strand |        seq1        seq2 #>                        <Rle> <IRanges>  <Rle> | <character> <character> #>     human_1.human_2        1     1-238      + |         ATG         ATG #>     human_1.human_2        1     1-238      + |         GAT         GAT #>     human_1.human_2        1     1-238      + |         TTA         TTA #>     human_1.human_2        1     1-238      + |         TCT         TCT #>     human_1.human_2        1     1-238      + |         GCT         GCT #>                 ...      ...       ...    ... .         ...         ... #>   human_1.gorilla_1        1   729-761      + |         CCC         CCC #>   human_1.gorilla_1        1   729-761      + |         ATC         ATC #>   human_1.gorilla_1        1   729-761      + |         CAC         CAC #>   human_1.gorilla_1        1   729-761      + |         AGC         AGC #>   human_1.gorilla_1        1   729-761      + |         TGA         TGA #>                          autm    mut_type        cube #>                     <numeric> <character> <character> #>     human_1.human_2         1         HHH        ACGT #>     human_1.human_2         1         HHH        ACGT #>     human_1.human_2         1         HHH        ACGT #>     human_1.human_2         1         HHH        ACGT #>     human_1.human_2         1         HHH        ACGT #>                 ...       ...         ...         ... #>   human_1.gorilla_1         1         HHH        ACGT #>   human_1.gorilla_1         1         HHH        ACGT #>   human_1.gorilla_1         1         HHH        ACGT #>   human_1.gorilla_1         1         HHH        ACGT #>   human_1.gorilla_1         1         HHH        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths  ## Herein a 'list' object of AutomorphismByCoef-class objects lista <- list(human = autby_coef[[1]], gorilla = autby_coef[[2]])  ## Let's transform the the last list 'lista' into an ## AutomorphismByCoefList-class object aut <- as(lista, \"AutomorphismByCoefList\") aut #> AutomorphismByCoefList object of length 2: #> $human #> AutomorphismByCoef object with 239 ranges and 5 metadata columns: #>         seqnames    ranges strand |        seq1        seq2      autm #>            <Rle> <IRanges>  <Rle> | <character> <character> <numeric> #>     [1]        1     1-238      + |         ATG         ATG         1 #>     [2]        1     1-238      + |         GAT         GAT         1 #>     [3]        1     1-238      + |         TTA         TTA         1 #>     [4]        1     1-238      + |         TCT         TCT         1 #>     [5]        1     1-238      + |         GCT         GCT         1 #>     ...      ...       ...    ... .         ...         ...       ... #>   [235]        1   511-761      + |         CCC         CCC         1 #>   [236]        1   511-761      + |         CTT         CTT         1 #>   [237]        1   511-761      + |         CCT         CCT         1 #>   [238]        1   511-761      + |         ATA         ATA         1 #>   [239]        1   511-761      + |         TGA         TGA         1 #>            mut_type        cube #>         <character> <character> #>     [1]         HHH        ACGT #>     [2]         HHH        ACGT #>     [3]         HHH        ACGT #>     [4]         HHH        ACGT #>     [5]         HHH        ACGT #>     ...         ...         ... #>   [235]         HHH        ACGT #>   [236]         HHH        ACGT #>   [237]         HHH        ACGT #>   [238]         HHH        ACGT #>   [239]         HHH        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #>  #> $gorilla #> AutomorphismByCoef object with 444 ranges and 5 metadata columns: #>         seqnames    ranges strand |        seq1        seq2      autm #>            <Rle> <IRanges>  <Rle> | <character> <character> <numeric> #>     [1]        1      1-59      + |         ATG         ATG         1 #>     [2]        1      1-59      + |         GAT         GAT         1 #>     [3]        1      1-59      + |         TTA         TTA         1 #>     [4]        1      1-59      + |         TCT         TCT         1 #>     [5]        1      1-59      + |         GCT         GCT         1 #>     ...      ...       ...    ... .         ...         ...       ... #>   [440]        1   729-761      + |         CCC         CCC         1 #>   [441]        1   729-761      + |         ATC         ATC         1 #>   [442]        1   729-761      + |         CAC         CAC         1 #>   [443]        1   729-761      + |         AGC         AGC         1 #>   [444]        1   729-761      + |         TGA         TGA         1 #>            mut_type        cube #>         <character> <character> #>     [1]         HHH        ACGT #>     [2]         HHH        ACGT #>     [3]         HHH        ACGT #>     [4]         HHH        ACGT #>     [5]         HHH        ACGT #>     ...         ...         ... #>   [440]         HHH        ACGT #>   [441]         HHH        ACGT #>   [442]         HHH        ACGT #>   [443]         HHH        ACGT #>   [444]         HHH        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #>   ## Let's get the element names from object 'aut' names(aut) #> [1] \"human\"   \"gorilla\"  ## Let's assign new names names(aut) <- c(\"human_1\", \"gorilla_1\") names(aut) #> [1] \"human_1\"   \"gorilla_1\" ## Load a DNA sequence alignment data(\"brca1_autm\", package = \"GenomAutomorphism\")  ## The list of the first three elements autm_list <- as.list(brca1_autm[1:3]) autm_list #> $human_1.human_2 #> Automorphism object with 761 ranges and 6 metadata columns: #>         seqnames    ranges strand |        seq1        seq2    coord1    coord2 #>            <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> #>     [1]        1         1      + |         ATG         ATG        50        50 #>     [2]        1         2      + |         GAT         GAT        11        11 #>     [3]        1         3      + |         TTA         TTA        60        60 #>     [4]        1         4      + |         TCT         TCT        31        31 #>     [5]        1         5      + |         GCT         GCT        27        27 #>     ...      ...       ...    ... .         ...         ...       ...       ... #>   [757]        1       757      + |         CAC         CAC         5         5 #>   [758]        1       758      + |         AGC         AGC        33        33 #>   [759]        1       759      + |         CAC         CAC         5         5 #>   [760]        1       760      + |         TAC         TAC        13        13 #>   [761]        1       761      + |         TGA         TGA        44        44 #>              autm        cube #>         <numeric> <character> #>     [1]         1        ACGT #>     [2]         1        ACGT #>     [3]         1        ACGT #>     [4]         1        ACGT #>     [5]         1        ACGT #>     ...       ...         ... #>   [757]         1        ACGT #>   [758]         1        ACGT #>   [759]         1        ACGT #>   [760]         1        ACGT #>   [761]         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #>  #> $human_1.gorilla_1 #> Automorphism object with 761 ranges and 6 metadata columns: #>         seqnames    ranges strand |        seq1        seq2    coord1    coord2 #>            <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> #>     [1]        1         1      + |         ATG         ATG        50        50 #>     [2]        1         2      + |         GAT         GAT        11        11 #>     [3]        1         3      + |         TTA         TTA        60        60 #>     [4]        1         4      + |         TCT         TCT        31        31 #>     [5]        1         5      + |         GCT         GCT        27        27 #>     ...      ...       ...    ... .         ...         ...       ...       ... #>   [757]        1       757      + |         CAC         CAC         5         5 #>   [758]        1       758      + |         AGC         AGC        33        33 #>   [759]        1       759      + |         CAC         CAC         5         5 #>   [760]        1       760      + |         TAC         TAC        13        13 #>   [761]        1       761      + |         TGA         TGA        44        44 #>              autm        cube #>         <numeric> <character> #>     [1]         1        ACGT #>     [2]         1        ACGT #>     [3]         1        ACGT #>     [4]         1        ACGT #>     [5]         1        ACGT #>     ...       ...         ... #>   [757]         1        ACGT #>   [758]         1        ACGT #>   [759]         1        ACGT #>   [760]         1        ACGT #>   [761]         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #>  #> $human_1.gorilla_2 #> Automorphism object with 761 ranges and 6 metadata columns: #>         seqnames    ranges strand |        seq1        seq2    coord1    coord2 #>            <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> #>     [1]        1         1      + |         ATG         ATG        50        50 #>     [2]        1         2      + |         GAT         GAT        11        11 #>     [3]        1         3      + |         TTA         TTA        60        60 #>     [4]        1         4      + |         TCT         TCT        31        31 #>     [5]        1         5      + |         GCT         GCT        27        27 #>     ...      ...       ...    ... .         ...         ...       ...       ... #>   [757]        1       757      + |         CAC         CAC         5         5 #>   [758]        1       758      + |         AGC         AGC        33        33 #>   [759]        1       759      + |         CAC         CAC         5         5 #>   [760]        1       760      + |         TAC         TAC        13        13 #>   [761]        1       761      + |         TGA         TGA        44        44 #>              autm        cube #>         <numeric> <character> #>     [1]         1        ACGT #>     [2]         1        ACGT #>     [3]         1        ACGT #>     [4]         1        ACGT #>     [5]         1        ACGT #>     ...       ...         ... #>   [757]         1        ACGT #>   [758]         1        ACGT #>   [759]         1        ACGT #>   [760]         1        ACGT #>   [761]         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #>"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/Automorphism.html","id":null,"dir":"Reference","previous_headings":"","what":"A class definition to store codon automorphisms in given as an\nAbelian group representation. — Automorphism-class","title":"A class definition to store codon automorphisms in given as an\nAbelian group representation. — Automorphism-class","text":"Two classes involved storing codon automorphisms: Automorphism-class AutomorphismList-class. class definition store list Automorphism class objects derived pairwise automorphism estimation pairwise alignments.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/Automorphism.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A class definition to store codon automorphisms in given as an\nAbelian group representation. — Automorphism-class","text":"","code":"valid.AutomorphismList(x)"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/Automorphism.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A class definition to store codon automorphisms in given as an\nAbelian group representation. — Automorphism-class","text":"x 'AutomorphismList object'","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/Automorphism.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A class definition to store codon automorphisms in given as an\nAbelian group representation. — Automorphism-class","text":"Given slot values, defines Automorphism-class object. AutomorphismByCoefList-class definition.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/Automorphism.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A class definition to store codon automorphisms in given as an\nAbelian group representation. — Automorphism-class","text":"Automorphism-class object six columns: \"seq1\", \"seq2\",\"coord1\", \"coord2\", \"autm\", \"cube\". See examples function automorphisms. Observe Automorphism-class inherits GRanges-class transformation starting GRanges-class object Automorphism-class straightforward. However, transformation starting data.frame DataFrame-class object \\(\"x\"\\) requires creation additional GRanges-class object, default argument seqnames = \"1\", strand = \"+\", start/end = 1:nrow(x), length = nrow(x). details must keep mind prevent fundamental errors downstream analyses. AutomorphismByCoefList-class following methods:","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/Automorphism.html","id":"as-from-automorphismbycoeflist-","dir":"Reference","previous_headings":"","what":"as('from', \"AutomorphismByCoefList\")","title":"A class definition to store codon automorphisms in given as an\nAbelian group representation. — Automorphism-class","text":"'' list AutomorphismByCoef-class.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/Automorphism.html","id":"unlist-x-","dir":"Reference","previous_headings":"","what":"unlist(x)","title":"A class definition to store codon automorphisms in given as an\nAbelian group representation. — Automorphism-class","text":"'x' AutomorphismByCoefList-class object.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/AutomorphismByCoef.html","id":null,"dir":"Reference","previous_headings":"","what":"A class definition to store conserved gene/genomic regions found\nin a MSA. — AutomorphismByCoef-class","title":"A class definition to store conserved gene/genomic regions found\nin a MSA. — AutomorphismByCoef-class","text":"class definition store conserved gene/genomic regions found MSA. Valid AutomorphismByCoef mcols Valid AutomorphismByCoefList mcols","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/AutomorphismByCoef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A class definition to store conserved gene/genomic regions found\nin a MSA. — AutomorphismByCoef-class","text":"","code":"valid.AutomorphismByCoef(x)  valid.AutomorphismByCoefList(x)"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/AutomorphismByCoef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A class definition to store conserved gene/genomic regions found\nin a MSA. — AutomorphismByCoef-class","text":"x 'AutomorphismByCoefList object'","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/AutomorphismByCoef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A class definition to store conserved gene/genomic regions found\nin a MSA. — AutomorphismByCoef-class","text":"AutomorphismByCoef-class definition.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/BaseGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"A class definition to store codon automorphisms in given in the\nAbelian group representation. — BaseGroup-class","title":"A class definition to store codon automorphisms in given in the\nAbelian group representation. — BaseGroup-class","text":"class definition store codon automorphisms given Abelian group representation.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/BaseGroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A class definition to store codon automorphisms in given in the\nAbelian group representation. — BaseGroup-class","text":"Given slot values define BaseGroup-class.","code":""},{"path":[]},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/BaseGroup_OR_CodonGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"A definition for the union of classes 'BaseGroup' and  'CodonGroup' — BaseGroup_OR_CodonGroup-class","title":"A definition for the union of classes 'BaseGroup' and  'CodonGroup' — BaseGroup_OR_CodonGroup-class","text":"definition union classes 'BaseGroup'  'CodonGroup'","code":""},{"path":[]},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/CodonGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"A class definition to store codon automorphisms in given in the\nAbelian group representation. — CodonGroup-class","title":"A class definition to store codon automorphisms in given in the\nAbelian group representation. — CodonGroup-class","text":"class definition store codon automorphisms given Abelian group representation.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/CodonGroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A class definition to store codon automorphisms in given in the\nAbelian group representation. — CodonGroup-class","text":"Given slot values define CodonGroup-class.","code":""},{"path":[]},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/CodonSeq.html","id":null,"dir":"Reference","previous_headings":"","what":"A class definition to store codon coordinates given in the Abelian\ngroup and the codon sequence. — CodonSeq-class","title":"A class definition to store codon coordinates given in the Abelian\ngroup and the codon sequence. — CodonSeq-class","text":"objects 'CodonSeq' 'MatrixList' class returned function get_coord. object store coordinate sequence list 3D-vectors list vectors located slot named 'CoordList'. original codon sequence (provided) stored slot named 'SeqRanges'.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/CodonSeq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A class definition to store codon coordinates given in the Abelian\ngroup and the codon sequence. — CodonSeq-class","text":"","code":"coordList(x)  # S4 method for CodonSeq coordList(x)  seqRanges(x)  # S4 method for CodonSeq seqRanges(x)  # S4 method for CodonSeq show(object)"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/CodonSeq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A class definition to store codon coordinates given in the Abelian\ngroup and the codon sequence. — CodonSeq-class","text":"x object CodonSeq-class. object object 'CodonSeq'.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/CodonSeq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A class definition to store codon coordinates given in the Abelian\ngroup and the codon sequence. — CodonSeq-class","text":"Given slot values define CodonSeq-class.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/CodonSeq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A class definition to store codon coordinates given in the Abelian\ngroup and the codon sequence. — CodonSeq-class","text":"","code":"## Load a DNA sequence alignment  data(aln, package = \"GenomAutomorphism\")  ## Get base coordinates on 'Z5' coord <- get_coord(     x = aln,     cube = \"ACGT\",     group = \"Z5\" ) coordList(coord) #> $coord1 #>  [1] 1 2 2 4 1 4 3 4 4 3 3 4 1 4 4 0 0 0 3 2 3 2 4 2 2 1 1 2 4 2 2 4 4 3 3 2 4 2 #> [39] 4 1 3 2 4 2 1 2 4 1 2 1 4 #>  #> $coord2 #>  [1] 1 4 2 4 1 4 3 4 4 3 3 4 1 4 4 1 2 3 1 2 3 2 4 2 2 1 1 4 4 2 2 4 4 3 3 3 4 2 #> [39] 2 0 0 0 0 0 0 2 4 2 2 4 4 #>  ## Load a DNA sequence alignment data(aln, package = \"GenomAutomorphism\")  ## Get base coordinates on 'Z5' coord <- get_coord(     x = aln,     cube = \"ACGT\",     group = \"Z5\" )  seqRanges(coord) #> GRanges object with 51 ranges and 2 metadata columns: #>        seqnames    ranges strand |        seq1        seq2 #>           <Rle> <IRanges>  <Rle> | <character> <character> #>    [1]        1         1      + |           A           A #>    [2]        1         2      + |           C           T #>    [3]        1         3      + |           C           C #>    [4]        1         4      + |           T           T #>    [5]        1         5      + |           A           A #>    ...      ...       ...    ... .         ...         ... #>   [47]        1        47      + |           T           T #>   [48]        1        48      + |           A           C #>   [49]        1        49      + |           C           C #>   [50]        1        50      + |           A           T #>   [51]        1        51      + |           T           T #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/ConservedRegion.html","id":null,"dir":"Reference","previous_headings":"","what":"A class definition to store conserved gene/genomic regions found\nin a MSA. — ConservedRegion-class","title":"A class definition to store conserved gene/genomic regions found\nin a MSA. — ConservedRegion-class","text":"class definition store conserved gene/genomic regions found MSA. Valid ConservedRegion mcols class definition list ConservedRegion class objects. Valid ConservedRegionList mcols","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/ConservedRegion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A class definition to store conserved gene/genomic regions found\nin a MSA. — ConservedRegion-class","text":"","code":"valid.ConservedRegion(x)  valid.ConservedRegionList(x)"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/ConservedRegion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A class definition to store conserved gene/genomic regions found\nin a MSA. — ConservedRegion-class","text":"x 'ConservedRegionList object'","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/ConservedRegion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A class definition to store conserved gene/genomic regions found\nin a MSA. — ConservedRegion-class","text":"Definition ConservedRegion-class.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/ConservedRegion.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A class definition to store conserved gene/genomic regions found\nin a MSA. — ConservedRegion-class","text":"ConservedRegionList-class following method:","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/ConservedRegion.html","id":"as-from-conservedregionlist-","dir":"Reference","previous_headings":"","what":"as('from', \"ConservedRegionList\")","title":"A class definition to store conserved gene/genomic regions found\nin a MSA. — ConservedRegion-class","text":"'' list ConservedRegion-class.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/GRanges_OR_NULL.html","id":null,"dir":"Reference","previous_headings":"","what":"A definition for the union of 'GRanges' and 'NULL' class. — GRanges_OR_NULL-class","title":"A definition for the union of 'GRanges' and 'NULL' class. — GRanges_OR_NULL-class","text":"definition union 'GRanges' 'NULL' class.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/GenomAutomorphism.html","id":null,"dir":"Reference","previous_headings":"","what":"GenomAutomorphism: An R package to compute the automorphisms between\nDNA sequences represented as elements from an Abelian group. — GenomAutomorphism","title":"GenomAutomorphism: An R package to compute the automorphisms between\nDNA sequences represented as elements from an Abelian group. — GenomAutomorphism","text":"R package compute automorphisms pairwise aligned DNA sequences represented elements Genomic Abelian group described reference (1). general scenario, whole chromosomes genomic regions population (species close related species) can algebraically represented direct sum cyclic groups specifically Abelian \\(p\\)-groups. Basically, propose representation multiple sequence alignments (MSA) length \\(N\\) finite Abelian group created direct sum homocyclic Abelian group prime-power order.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/GenomAutomorphism.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"GenomAutomorphism: An R package to compute the automorphisms between\nDNA sequences represented as elements from an Abelian group. — GenomAutomorphism","text":"Robersy Sanchez, Jesus Barreto (2021) Genomic Abelian Finite Groups. https://doi.org/10.1101/2021.06.01.446543. Sanchez R, Morgado E, Grau R. Gene algebra genetic code algebraic structure. J Math Biol. 2005 Oct;51(4):431-57. doi: 10.1007/s00285-005-0332-8. Epub 2005 Jul 13. PMID: 16012800. ( PDF. Sanchez R, Grau R, Morgado E. novel Lie algebra genetic code Galois field four DNA bases. Math Biosci. 2006;202: 156-174. doi:10.1016/j.mbs.2006.03.017 Sanchez R, Grau R. algebraic hypothesis primeval genetic code architecture. Math Biosci. 2009/07/18. 2009;221: 60-76. https://doi.org/10.1016/j.mbs.2009.07.001. 5. M. V Jose, E.R. Morgado, R. Sanchez, T. Govezensky, 24 possible algebraic representations standard genetic code six three dimensions, Adv. Stud. Biol. 4 (2012) 119-152. PDF. . R. Sanchez. Symmetric Group Genetic-Code Cubes. Effect Genetic-Code Architecture Evolutionary Process MATCH Commun. Math. Comput. Chem. 79 (2018) 527-560. PDF.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/MatrixList.html","id":null,"dir":"Reference","previous_headings":"","what":"Definition of MatrixList-class — MatrixList-class","title":"Definition of MatrixList-class — MatrixList-class","text":"class denoting list matrices.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/MatrixList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Definition of MatrixList-class — MatrixList-class","text":"","code":"# S4 method for MatrixList show(object)"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/MatrixList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Definition of MatrixList-class — MatrixList-class","text":"object object 'MatrixList' class","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/MatrixList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Definition of MatrixList-class — MatrixList-class","text":"Given slot values, defines MatrixList-class. Print/show MatrixList-class object.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/aln.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated DNAStringSet class object — aln","title":"Simulated DNAStringSet class object — aln","text":"DNAStringSet carrying small pairwise DNA sequence alignment used examples provided package functions.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/aln.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated DNAStringSet class object — aln","text":"","code":"aln"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/aln.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated DNAStringSet class object — aln","text":"DNAStringSet class object.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/aut3D.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z5^3. — aut3D","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z5^3. — aut3D","text":"Given two codon sequences represented Z5^3 Abelian group, function computes automorphisms describing codon mutational events.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/aut3D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z5^3. — aut3D","text":"","code":"aut3D(   seq = NULL,   filepath = NULL,   cube = c(\"ACGT\", \"TGCA\"),   cube_alt = c(\"CATG\", \"GTAC\"),   field = \"GF5\",   start = NA,   end = NA,   chr = 1L,   strand = \"+\",   num.cores = detectCores() - 1,   tasks = 0L,   verbose = TRUE )"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/aut3D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z5^3. — aut3D","text":"seq object DNAStringSet DNAMultipleAlignment class carrying DNA pairwise alignment two sequences. pairwise alignment provided argument seq 'fasta' file filepath must correspond codon sequences. filepath character vector containing path file fasta format read. argument must given codon & base arguments provided. cube, cube_alt character string denoting pairs 24 Genetic-code cubes, given references (2-3). , base pairs given cubes must complementary . cube pair call dual cubes , shown reference (3), pair integrates group. field character string denoting Galois field 3D automorphisms estimated. can 'GF(4)' 'GF(5)', 'GF(5)' implemented far. start, end, chr, strand Optional parameters required build GRanges-class. provided default values given function definition used. num.cores, tasks Parameters parallel computation using package BiocParallel-package: number cores use, .e. many child processes run simultaneously (see bplapply number tasks per job (Linux OS). verbose TRUE, prints progress bar.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/aut3D.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z5^3. — aut3D","text":"object Automorphism-class four columns metacolumn named: seq1, seq2, autm, cube.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/aut3D.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z5^3. — aut3D","text":"Automorphisms Z5^3' described functions \\(f(x) = x mod Z5\\), diagonal matrix, noticed reference (4).","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/aut3D.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z5^3. — aut3D","text":"Sanchez R, Morgado E, Grau R. Gene algebra genetic code algebraic structure. J Math Biol. 2005 Oct;51(4):431-57. doi: 10.1007/s00285-005-0332-8. Epub 2005 Jul 13. PMID: 16012800. ( PDF). Robersy Sanchez, Jesus Barreto (2021) Genomic Abelian Finite Groups. https://doi.org/10.1101/2021.06.01.446543. M. V Jose, E.R. Morgado, R. Sanchez, T. Govezensky, 24 possible algebraic representations standard genetic code six three dimensions, Adv. Stud. Biol. 4 (2012) 119-152.PDF. R. Sanchez. Symmetric Group Genetic-Code Cubes. Effect Genetic-Code Architecture Evolutionary Process MATCH Commun. Math. Comput. Chem. 79 (2018) 527-560. PDF.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/aut3D.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z5^3. — aut3D","text":"Robersy Sanchez (https://genomaths.com).","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/aut3D.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z5^3. — aut3D","text":"","code":"## Load a pairwise alignment data(aln, package = \"GenomAutomorphism\") aln #> DNAStringSet object of length 2: #>     width seq #> [1]    51 ACCTATGTTGGTATT---GCGCTCCAACTCCTTGGCTCTAGCTCACTACAT #> [2]    51 ATCTATGTTGGTATTACGACGCTCCAATTCCTTGGGTCC------CTCCTT  ## Automorphism on Z5^3 autms <- aut3D(seq = aln) #>    |                                                                               |                                                                      |   0%   |                                                                               |============                                                          |  17%   |                                                                               |=======================                                               |  33%   |                                                                               |===================================                                   |  50%   |                                                                               |===============================================                       |  67%   |                                                                               |==========================================================            |  83%   |                                                                               |======================================================================| 100% #>  autms #> Automorphism object with 17 ranges and 6 metadata columns: #>        seqnames    ranges strand |        seq1        seq2   coord1   coord2 #>           <Rle> <IRanges>  <Rle> | <character> <character> <matrix> <matrix> #>    [1]        1         1      + |         A-G         AGG    1:0:3    1:3:3 #>    [2]        1         2      + |         CGC         TAG    2:3:2    4:1:3 #>    [3]        1         3      + |         CCT         CCT    2:2:4    2:2:4 #>    [4]        1         4      + |         TGC         TGC    4:3:2    4:3:2 #>    [5]        1         5      + |         ACT         ACC    1:2:4    1:2:2 #>    ...      ...       ...    ... .         ...         ...      ...      ... #>   [13]        1        13      + |         ACT         ACT    1:2:4    1:2:4 #>   [14]        1        14      + |         TCA         TCC    4:2:1    4:2:2 #>   [15]        1        15      + |         TTC         TTC    4:4:2    4:4:2 #>   [16]        1        16      + |         -TA         ATT    0:4:1    1:4:4 #>   [17]        1        17      + |         -GT         CGT    0:3:4    2:3:4 #>               autm        cube #>        <character> <character> #>    [1]           0        Trnl #>    [2]       2,2,4        ACGT #>    [3]       1,1,1        ACGT #>    [4]       1,1,1        ACGT #>    [5]       1,1,3        ACGT #>    ...         ...         ... #>   [13]       1,1,1        ACGT #>   [14]       1,1,2        ACGT #>   [15]       1,1,1        ACGT #>   [16]           0        Trnl #>   [17]           0        Trnl #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ125.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z125. — autZ125","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z125. — autZ125","text":"Given two codon sequences represented Z125 Abelian group, function computes automorphisms describing codon mutational events.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ125.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z125. — autZ125","text":"","code":"autZ125(   seq = NULL,   filepath = NULL,   cube = c(\"ACGT\", \"TGCA\"),   cube_alt = c(\"CATG\", \"GTAC\"),   start = NA,   end = NA,   chr = 1L,   strand = \"+\",   num.cores = detectCores() - 1,   tasks = 0L,   verbose = TRUE )"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ125.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z125. — autZ125","text":"seq object DNAStringSet DNAMultipleAlignment class carrying DNA pairwise alignment two sequences. pairwise alignment provided argument seq 'fasta' file filepath must correspond codon sequences. filepath character vector containing path file fasta format read. argument must given codon & base arguments provided. cube, cube_alt character string denoting pairs 24 Genetic-code cubes, given references (2-3). , base pairs given cubes must complementary . cube pair call dual cubes , shown reference (3), pair integrates group. start, end, chr, strand Optional parameters required build GRanges-class. provided default values given function definition used. num.cores, tasks Parameters parallel computation using package BiocParallel-package: number cores use, .e. many child processes run simultaneously (see bplapply number tasks per job (Linux OS). verbose TRUE, prints progress bar.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ125.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z125. — autZ125","text":"object Automorphism-class four columns metacolumn named: seq1, seq2, autm, cube.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ125.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z125. — autZ125","text":"Automorphisms Z125 described functions \\(f(x) = k x mod 64\\), k x elements set integers modulo 64. noticed reference (1)","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ125.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z125. — autZ125","text":"Sanchez R, Morgado E, Grau R. Gene algebra genetic code algebraic structure. J Math Biol. 2005 Oct;51(4):431-57. doi: 10.1007/s00285-005-0332-8. Epub 2005 Jul 13. PMID: 16012800. ( PDF). Robersy Sanchez, Jesus Barreto (2021) Genomic Abelian Finite Groups. doi:10.1101/2021.06.01.446543 M. V Jose, E.R. Morgado, R. Sanchez, T. Govezensky, 24 possible algebraic representations standard genetic code six three dimensions, Adv. Stud. Biol. 4 (2012) 110-152.PDF. R. Sanchez. Symmetric Group Genetic-Code Cubes. Effect Genetic-Code Architecture Evolutionary Process MATCH Commun. Math. Comput. Chem. 79 (2018) 527-560. PDF","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ125.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z125. — autZ125","text":"","code":"## Load a pairwise alignment data(aln, package = \"GenomAutomorphism\") aln #> DNAStringSet object of length 2: #>     width seq #> [1]    51 ACCTATGTTGGTATT---GCGCTCCAACTCCTTGGCTCTAGCTCACTACAT #> [2]    51 ATCTATGTTGGTATTACGACGCTCCAATTCCTTGGGTCC------CTCCTT  ## Automorphism on Z125 autms <- autZ125(seq = aln) #>    |                                                                               |                                                                      |   0%   |                                                                               |============                                                          |  17%   |                                                                               |=======================                                               |  33%   |                                                                               |===================================                                   |  50%   |                                                                               |===============================================                       |  67%   |                                                                               |==========================================================            |  83%   |                                                                               |======================================================================| 100% #>  autms #> Automorphism object with 17 ranges and 6 metadata columns: #>        seqnames    ranges strand |        seq1        seq2    coord1    coord2 #>           <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> #>    [1]        1         1      + |         A-G         AGG         8        83 #>    [2]        1         2      + |         CGC         TAG        87        48 #>    [3]        1         3      + |         CCT         CCT        64        64 #>    [4]        1         4      + |         TGC         TGC        97        97 #>    [5]        1         5      + |         ACT         ACC        59        57 #>    ...      ...       ...    ... .         ...         ...       ...       ... #>   [13]        1        13      + |         ACT         ACT        59        59 #>   [14]        1        14      + |         TCA         TCC        71        72 #>   [15]        1        15      + |         TTC         TTC       122       122 #>   [16]        1        16      + |         -TA         ATT       101       109 #>   [17]        1        17      + |         -GT         CGT        79        89 #>             autm        cube #>        <numeric> <character> #>    [1]        26        ACGT #>    [2]       104        ACGT #>    [3]         1        ACGT #>    [4]         1        ACGT #>    [5]        73        ACGT #>    ...       ...         ... #>   [13]         1        ACGT #>   [14]        82        ACGT #>   [15]         1        ACGT #>   [16]        84        ACGT #>   [17]        66        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ5.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z5. — autZ5","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z5. — autZ5","text":"Given two codon sequences represented Z5 Abelian group, function computes automorphisms describing codon mutational events.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z5. — autZ5","text":"","code":"autZ5(   seq = NULL,   filepath = NULL,   cube = c(\"ACGT\", \"TGCA\"),   cube_alt = c(\"CATG\", \"GTAC\"),   start = NA,   end = NA,   chr = 1L,   strand = \"+\",   num.cores = detectCores() - 1,   tasks = 0L,   verbose = TRUE )"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ5.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z5. — autZ5","text":"seq object DNAStringSet DNAMultipleAlignment class carrying DNA pairwise alignment two sequences. filepath character vector containing path file fasta format read. argument must given codon & base arguments provided. cube, cube_alt character string denoting pairs 24 Genetic-code cubes, given references (2-3). , base pairs given cubes must complementary . cube pair call dual cubes , shown reference (3), pair integrates group. start, end, chr, strand Optional parameters required build GRanges-class. provided default values given function definition used. num.cores, tasks Parameters parallel computation using package BiocParallel-package: number cores use, .e. many child processes run simultaneously (see bplapply number tasks per job (Linux OS). verbose TRUE, prints progress bar.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ5.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z5. — autZ5","text":"object Automorphism-class four columns metacolumn named: seq1, seq2, autm, cube.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ5.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z5. — autZ5","text":"Automorphisms Z5 described functions \\(f(x) = k x mod 64\\), k x elements set integers modulo 64. noticed reference (1). pairwise alignment provided argument seq 'fasta' file filepath must correspond DNA base sequences.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ5.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z5. — autZ5","text":"Sanchez R, Morgado E, Grau R. Gene algebra genetic code algebraic structure. J Math Biol. 2005 Oct;51(4):431-57. doi: 10.1007/s00285-005-0332-8. Epub 2005 Jul 13. PMID: 16012800. ( PDF). Robersy Sanchez, Jesus Barreto (2021) Genomic Abelian Finite Groups. doi:10.1101/2021.06.01.446543 M. V Jose, E.R. Morgado, R. Sanchez, T. Govezensky, 24 possible algebraic representations standard genetic code six three dimensions, Adv. Stud. Biol. 4 (2012) 110-152.PDF. R. Sanchez. Symmetric Group Genetic-Code Cubes. Effect Genetic-Code Architecture Evolutionary Process MATCH Commun. Math. Comput. Chem. 79 (2018) 527-560. PDF","code":""},{"path":[]},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ5.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z5. — autZ5","text":"","code":"## Load a pairwise alignment data(aln, package = \"GenomAutomorphism\") aln #> DNAStringSet object of length 2: #>     width seq #> [1]    51 ACCTATGTTGGTATT---GCGCTCCAACTCCTTGGCTCTAGCTCACTACAT #> [2]    51 ATCTATGTTGGTATTACGACGCTCCAATTCCTTGGGTCC------CTCCTT  ## Automorphism on Z5 autms <- autZ5(seq = aln) #>    |                                                                               |                                                                      |   0%   |                                                                               |=============                                                         |  19%   |                                                                               |==========================                                            |  38%   |                                                                               |=======================================                               |  56%   |                                                                               |====================================================                  |  75%   |                                                                               |=========================================================             |  81%   |                                                                               |======================================================================| 100% #>  autms #> Automorphism object with 51 ranges and 6 metadata columns: #>        seqnames    ranges strand |        seq1        seq2    coord1    coord2 #>           <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> #>    [1]        1         1      + |           A           A         1         1 #>    [2]        1         2      + |           C           T         2         4 #>    [3]        1         3      + |           C           C         2         2 #>    [4]        1         4      + |           T           T         4         4 #>    [5]        1         5      + |           A           A         1         1 #>    ...      ...       ...    ... .         ...         ...       ...       ... #>   [47]        1        47      + |           T           T         4         4 #>   [48]        1        48      + |           A           C         1         2 #>   [49]        1        49      + |           C           C         2         2 #>   [50]        1        50      + |           A           T         1         4 #>   [51]        1        51      + |           T           T         4         4 #>             autm        cube #>        <numeric> <character> #>    [1]         1        ACGT #>    [2]         2        ACGT #>    [3]         1        ACGT #>    [4]         1        ACGT #>    [5]         1        ACGT #>    ...       ...         ... #>   [47]         1        ACGT #>   [48]         2        ACGT #>   [49]         1        ACGT #>   [50]         4        ACGT #>   [51]         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ64.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z64. — autZ64","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z64. — autZ64","text":"Given two codon sequences represented Z64 Abelian group, function computes automorphisms describing codon mutational events.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ64.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z64. — autZ64","text":"","code":"autZ64(   seq = NULL,   filepath = NULL,   cube = c(\"ACGT\", \"TGCA\"),   cube_alt = c(\"CATG\", \"GTAC\"),   start = NA,   end = NA,   chr = 1L,   strand = \"+\",   num.cores = detectCores() - 1,   tasks = 0L,   verbose = TRUE )"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ64.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z64. — autZ64","text":"seq object DNAStringSet DNAMultipleAlignment class carrying DNA pairwise alignment two sequences. pairwise alignment provided argument seq 'fasta' file filepath must correspond codon sequences. filepath character vector containing path file fasta format read. argument must given codon & base arguments provided. cube, cube_alt character string denoting pairs 24 Genetic-code cubes, given references (2-3). , base pairs given cubes must complementary . cube pair call dual cubes , shown reference (3), pair integrates group. start, end, chr, strand Optional parameters required build GRanges-class. provided default values given function definition used. num.cores, tasks Parameters parallel computation using package BiocParallel-package: number cores use, .e. many child processes run simultaneously (see bplapply number tasks per job (Linux OS). verbose TRUE, prints progress bar.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ64.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z64. — autZ64","text":"object Automorphism-class four columns metacolumn named: seq1, seq2, autm, cube.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ64.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z64. — autZ64","text":"Automorphisms Z64 described functions \\(f(x) = k x mod 64\\), k x elements set integers modulo 64.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ64.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z64. — autZ64","text":"Sanchez R, Morgado E, Grau R. Gene algebra genetic code algebraic structure. J Math Biol. 2005 Oct;51(4):431-57. doi: 10.1007/s00285-005-0332-8. Epub 2005 Jul 13. PMID: 16012800. ( PDF). Robersy Sanchez, Jesus Barreto (2021) Genomic Abelian Finite Groups. doi:10.1101/2021.06.01.446543 M. V Jose, E.R. Morgado, R. Sanchez, T. Govezensky, 24 possible algebraic representations standard genetic code six three dimensions, Adv. Stud. Biol. 4 (2012) 110-152.PDF. R. Sanchez. Symmetric Group Genetic-Code Cubes. Effect Genetic-Code Architecture Evolutionary Process MATCH Commun. Math. Comput. Chem. 79 (2018) 527-560. PDF","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ64.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z64. — autZ64","text":"Robersy Sanchez (https://genomaths.com).","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autZ64.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in Z64. — autZ64","text":"","code":"## Load a pairwise alignment data(aln, package = \"GenomAutomorphism\") aln #> DNAStringSet object of length 2: #>     width seq #> [1]    51 ACCTATGTTGGTATT---GCGCTCCAACTCCTTGGCTCTAGCTCACTACAT #> [2]    51 ATCTATGTTGGTATTACGACGCTCCAATTCCTTGGGTCC------CTCCTT  ## Automorphism on Z64 autms <- autZ64(seq = aln) #>    |                                                                               |                                                                      |   0%   |                                                                               |============                                                          |  17%   |                                                                               |=======================                                               |  33%   |                                                                               |===================================                                   |  50%   |                                                                               |===============================================                       |  67%   |                                                                               |==========================================================            |  83%   |                                                                               |======================================================================| 100% #>  autms #> Automorphism object with 17 ranges and 6 metadata columns: #>        seqnames    ranges strand |        seq1        seq2    coord1    coord2 #>           <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> #>    [1]        1         1      + |         A-G         AGG        NA        34 #>    [2]        1         2      + |         CGC         TAG        37        14 #>    [3]        1         3      + |         CCT         CCT        23        23 #>    [4]        1         4      + |         TGC         TGC        45        45 #>    [5]        1         5      + |         ACT         ACC        19        17 #>    ...      ...       ...    ... .         ...         ...       ...       ... #>   [13]        1        13      + |         ACT         ACT        19        19 #>   [14]        1        14      - |         TCA         TCC        28        29 #>   [15]        1        15      + |         TTC         TTC        61        61 #>   [16]        1        16      + |         -TA         ATT        NA        51 #>   [17]        1        17      + |         -GT         CGT        NA        39 #>             autm        cube #>        <numeric> <character> #>    [1]         0        Trnl #>    [2]        54        ACGT #>    [3]         1        ACGT #>    [4]         1        ACGT #>    [5]        11        ACGT #>    ...       ...         ... #>   [13]         1        ACGT #>   [14]        54        TGCA #>   [15]         1        ACGT #>   [16]         0        Trnl #>   [17]         0        Trnl #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autby_coef.html","id":null,"dir":"Reference","previous_headings":"","what":"Automorphisms between DNA Primate BRCA1 Genes Grouped by Coefficients — autby_coef","title":"Automorphisms between DNA Primate BRCA1 Genes Grouped by Coefficients — autby_coef","text":"AutomorphismList object carrying list pairwise automorphisms DNA sequences MSA primate somatic cytochrome C grouped automorphism's coefficients. grouping derives dataset brca1_autm applying function automorphism_bycoef.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autby_coef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automorphisms between DNA Primate BRCA1 Genes Grouped by Coefficients — autby_coef","text":"","code":"autby_coef"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autby_coef.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Automorphisms between DNA Primate BRCA1 Genes Grouped by Coefficients — autby_coef","text":"AutomorphismByCoefList class object.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autm.html","id":null,"dir":"Reference","previous_headings":"","what":"Automorphisms between DNA Sequences from two COVID-19 genomes — autm","title":"Automorphisms between DNA Sequences from two COVID-19 genomes — autm","text":"AutomorphismList object carrying list pairwise automorphisms SARS coronavirus GZ02 (GenBank: AY390556.1: 265-13398_13398-21485) Bat SARS-like coronavirus isolate bat-SL-CoVZC45 (GenBank: MG772933.1:265-1345513455-21542), nonstructural_polyprotein. pairwise DNA sequence alignment available dataset named covid_aln automorphisms estimated function autZ64.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automorphisms between DNA Sequences from two COVID-19 genomes — autm","text":"","code":"autm"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autm.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Automorphisms between DNA Sequences from two COVID-19 genomes — autm","text":"AutomorphismList class object.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automorphisms between DNA Sequences from two COVID-19 genomes — autm","text":"","code":"if (FALSE) {  ## The alignment of these DNA sequences is available at:  URL <- paste0(\"https://github.com/genomaths/seqalignments/raw/master/\",   \"COVID-19/AY390556.1_265-13398_13398-21485_RNA-POL_SARS_COVI_GZ02.fas\")    ## Automorphisms can be directly computed with function 'automorphism'  autm <- automorphism(  filepath = URL,  group = \"Z64\",  cube = c(\"ACGT\", \"TGCA\"),  cube_alt = c(\"CATG\", \"GTAC\")) }"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autm_3d.html","id":null,"dir":"Reference","previous_headings":"","what":"Automorphisms between DNA Sequences from two COVID-19 genomes — autm_3d","title":"Automorphisms between DNA Sequences from two COVID-19 genomes — autm_3d","text":"AutomorphismList object carrying list pairwise automorphisms SARS coronavirus GZ02 (GenBank: AY390556.1: 265-13398_13398-21485) Bat SARS-like coronavirus isolate bat-SL-CoVZC45 (GenBank: MG772933.1:265-1345513455-21542), nonstructural_polyprotein. pairwise DNA sequence alignment available dataset named covid_aln automorphisms estimated function aut3D.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autm_3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automorphisms between DNA Sequences from two COVID-19 genomes — autm_3d","text":"","code":"autm_3d"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autm_3d.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Automorphisms between DNA Sequences from two COVID-19 genomes — autm_3d","text":"AutomorphismList class object.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autm_z125.html","id":null,"dir":"Reference","previous_headings":"","what":"Automorphisms between DNA Sequences from two COVID-19 genomes — autm_z125","title":"Automorphisms between DNA Sequences from two COVID-19 genomes — autm_z125","text":"AutomorphismList object carrying list pairwise automorphisms SARS coronavirus GZ02 (GenBank: AY390556.1: 265-13398_13398-21485) Bat SARS-like coronavirus isolate bat-SL-CoVZC45 (GenBank: MG772933.1:265-1345513455-21542), nonstructural_polyprotein. pairwise DNA sequence alignment available dataset named covid_aln automorphisms estimated function autZ125.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autm_z125.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automorphisms between DNA Sequences from two COVID-19 genomes — autm_z125","text":"","code":"autm_z125"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/autm_z125.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Automorphisms between DNA Sequences from two COVID-19 genomes — autm_z125","text":"AutomorphismList class object.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphismByRanges.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the automorphisms by ranges. — automorphismByRanges","title":"Get the automorphisms by ranges. — automorphismByRanges","text":"Automorphisms estimated pairwise MSA alignment can grouped ranges inherits GRanges-class GRanges-class.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphismByRanges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the automorphisms by ranges. — automorphismByRanges","text":"","code":"automorphismByRanges(x, ...)  # S4 method for Automorphism automorphismByRanges(x)  # S4 method for AutomorphismList automorphismByRanges(   x,   min.len = 0L,   num.cores = detectCores() - 1,   tasks = 0L,   verbose = TRUE )"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphismByRanges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the automorphisms by ranges. — automorphismByRanges","text":"x AutomorphismList-class object returned function automorphisms. ... use. min.len Minimum length range reported. num.cores, tasks Integers. Argument num.cores denotes number cores use, .e. many child processes run simultaneously (see bplapply function BiocParallel package). Argument tasks denotes number tasks per job. value must scalar integer >= 0L. documentation job defined single call function, bplapply. task division \\(X\\) argument chunks. tasks == 0 (default), \\(X\\) divided evenly possible number workers (see MulticoreParam BiocParallel package). verbose logic(1). TRUE, enable progress bar.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphismByRanges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the automorphisms by ranges. — automorphismByRanges","text":" GRanges-class GRangesList-class. GRanges-class object column named cube, carries type cube automorphims.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphismByRanges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the automorphisms by ranges. — automorphismByRanges","text":"","code":"## Load dataset data(autm, package = \"GenomAutomorphism\")  automorphismByRanges(x = autm[c(1, 4)]) #> GRanges object with 1 range and 1 metadata column: #>       seqnames    ranges strand |        cube #>          <Rle> <IRanges>  <Rle> | <character> #>   [1]        1       1-4      + |        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphism_bycoef.html","id":null,"dir":"Reference","previous_headings":"","what":"Autmorphism Grouping by Coefficient — automorphism_bycoef","title":"Autmorphism Grouping by Coefficient — automorphism_bycoef","text":"Automorphisms automorphism's coefficients grouped.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphism_bycoef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Autmorphism Grouping by Coefficient — automorphism_bycoef","text":"","code":"automorphism_bycoef(x, ...)  # S4 method for Automorphism automorphism_bycoef(x, mut.type = TRUE)  # S4 method for AutomorphismList automorphism_bycoef(   x,   min.len = 1L,   mut.type = TRUE,   num.cores = detectCores() - 1,   tasks = 0L,   verbose = TRUE )"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphism_bycoef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Autmorphism Grouping by Coefficient — automorphism_bycoef","text":"x automorphism-class object returned function automorphisms. ... use. mut.type Logical. Whether include mutation type given function mut_type. min.len Minimum length range reported. num.cores, tasks Integers. Argument num.cores denotes number cores use, .e. many child processes run simultaneously (see bplapply function BiocParallel package). Argument tasks denotes number tasks per job. value must scalar integer >= 0L. documentation job defined single call function, bplapply. task division \\(X\\) argument chunks. tasks == 0 (default), \\(X\\) divided evenly possible number workers (see MulticoreParam BiocParallel package). verbose logic(1). TRUE, enable progress bar.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphism_bycoef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Autmorphism Grouping by Coefficient — automorphism_bycoef","text":"AutomorphismByCoef class object. coefficient 0 value assigned mutational events automorphisms, e.g., indel mutations.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphism_bycoef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Autmorphism Grouping by Coefficient — automorphism_bycoef","text":"","code":"## Load dataset data(autm, package = \"GenomAutomorphism\")  automorphism_bycoef(x = autm[1:2]) #> AutomorphismByCoef object with 2 ranges and 5 metadata columns: #>       seqnames    ranges strand |        seq1        seq2      autm    mut_type #>          <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <character> #>   [1]        1         1      + |         ACC         ATC        33         HYH #>   [2]        1         2      + |         TAT         TAT         1         HHH #>              cube #>       <character> #>   [1]        ACGT #>   [2]        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphisms.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in a Given Abelian group. — automorphisms","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in a Given Abelian group. — automorphisms","text":"Given two codon sequences represented given Abelian group, function computes automorphisms describing codon mutational events. Basically, function wrapping call corresponding function specified Abelian group.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphisms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in a Given Abelian group. — automorphisms","text":"","code":"automorphisms(seqs = NULL, filepath = NULL, group = \"Z4\", ...)  # S4 method for DNAStringSet_OR_NULL automorphisms(   seqs = NULL,   filepath = NULL,   group = c(\"Z5\", \"Z64\", \"Z125\", \"Z5^3\"),   cube = c(\"ACGT\", \"TGCA\"),   cube_alt = c(\"CATG\", \"GTAC\"),   nms = NULL,   start = NA,   end = NA,   chr = 1L,   strand = \"+\",   num.cores = detectCores() - 1,   tasks = 0L,   verbose = TRUE )"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphisms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in a Given Abelian group. — automorphisms","text":"seqs object DNAStringSet DNAMultipleAlignment class carrying DNA pairwise alignment two sequences. pairwise alignment provided argument seq 'fasta' file filepath must correspond codon sequences. filepath character vector containing path file fasta format read. argument must given codon & base arguments provided. group character string denoting group representation given base codon shown reference (1). ... use. cube, cube_alt character string denoting pairs 24 Genetic-code cubes, given references (2-3). , base pairs given cubes must complementary . cube pair call \\(dual cubes\\) , shown reference (3), pair integrates group. nms Optional. used DNA sequence alignment provided carries two sequences. character string giving short names alignments compared. given automorphisms pairwise alignment named : 'aln_1', 'aln_2', . start, end, chr, strand Optional parameters required build GRanges-class. provided default values given function definition used. num.cores, tasks Parameters parallel computation using package BiocParallel-package: number cores use, .e. many child processes run simultaneously (see bplapply number tasks per job (Linux OS). verbose TRUE, prints progress bar.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphisms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in a Given Abelian group. — automorphisms","text":"function returns Automorphism-class object four columns metacolumn named: seq1, seq2, autm, cube.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphisms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in a Given Abelian group. — automorphisms","text":"Herein, automorphisms algebraic descriptions mutational event observed codon sequences represented different Abelian groups. particular, described references (3-4), representation codon set defined Abelian group 24 possible isomorphic Abelian groups. Abelian groups can labeled based DNA base-order used generate . set 24 Abelian groups can described group isomorphic symmetric group degree four (\\(S_4\\), see reference (4)). Function automorphismByRanges permits classification pairwise alignment protein-coding sub-regions based mutational events observed genetic-code cubes describe . Automorphisms Z5, Z64 Z125 described functions \\(f(x) = k x mod 64\\) \\(f(x) = k x mod 125\\), k x elements set integers modulo 64 modulo 125, respectively. automorphisms found cubes provided argument \\(cube\\), function automorphisms search automorphisms cubes provided argument \\(cube_alt\\). Automorphisms Z5^3' described functions \\(f(x) = Ax mod Z5\\), diagonal matrix. Arguments cube cube_alt must pairs ' dual cubes (see section 2.4 reference 4).","code":""},{"path":[]},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphisms.html","id":"automorphismbyranges-","dir":"Reference","previous_headings":"","what":"automorphismByRanges:","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in a Given Abelian group. — automorphisms","text":"function returns GRanges-class object. Consecutive mutational events (codon sequence) described automorphisms cube grouped range.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphisms.html","id":"automorphism-bycoef","dir":"Reference","previous_headings":"","what":"automorphism_bycoef","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in a Given Abelian group. — automorphisms","text":"function returns GRanges-class object. Consecutive mutational events (codon sequence) described automorphisms coefficients grouped range.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphisms.html","id":"getautomorphisms","dir":"Reference","previous_headings":"","what":"getAutomorphisms","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in a Given Abelian group. — automorphisms","text":"function returns AutomorphismList-class object list Automorphism-class objects, inherits GRanges-class objects.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphisms.html","id":"conserved-regions","dir":"Reference","previous_headings":"","what":"conserved_regions","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in a Given Abelian group. — automorphisms","text":"Returns AutomorphismByCoef class object containing requested regions.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphisms.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in a Given Abelian group. — automorphisms","text":"Sanchez R, Morgado E, Grau R. Gene algebra genetic code algebraic structure. J Math Biol. 2005 Oct;51(4):431-57. doi: 10.1007/s00285-005-0332-8. Epub 2005 Jul 13. PMID: 16012800. ( PDF). Robersy Sanchez, Jesus Barreto (2021) Genomic Abelian Finite Groups. doi:10.1101/2021.06.01.446543 M. V Jose, E.R. Morgado, R. Sanchez, T. Govezensky, 24 possible algebraic representations standard genetic code six three dimensions, Adv. Stud. Biol. 4 (2012) 110-152.PDF. R. Sanchez. Symmetric Group Genetic-Code Cubes. Effect Genetic-Code Architecture Evolutionary Process MATCH Commun. Math. Comput. Chem. 79 (2018) 527-560. PDF","code":""},{"path":[]},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphisms.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in a Given Abelian group. — automorphisms","text":"Robersy Sanchez (https://genomaths.com).","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/automorphisms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Automorphisms of Mutational Events Between two Codon\nSequences Represented in a Given Abelian group. — automorphisms","text":"","code":"## Load a pairwise alignment data(aln, package = \"GenomAutomorphism\") aln #> DNAStringSet object of length 2: #>     width seq #> [1]    51 ACCTATGTTGGTATT---GCGCTCCAACTCCTTGGCTCTAGCTCACTACAT #> [2]    51 ATCTATGTTGGTATTACGACGCTCCAATTCCTTGGGTCC------CTCCTT  ## Automorphism on \"Z5^3\" autms <- automorphisms(seqs = aln, group = \"Z5^3\", verbose = FALSE) autms #> Automorphism object with 17 ranges and 6 metadata columns: #>        seqnames    ranges strand |        seq1        seq2   coord1   coord2 #>           <Rle> <IRanges>  <Rle> | <character> <character> <matrix> <matrix> #>    [1]        1         1      + |         A-G         AGG    1:0:3    1:3:3 #>    [2]        1         2      + |         CGC         TAG    2:3:2    4:1:3 #>    [3]        1         3      + |         CCT         CCT    2:2:4    2:2:4 #>    [4]        1         4      + |         TGC         TGC    4:3:2    4:3:2 #>    [5]        1         5      + |         ACT         ACC    1:2:4    1:2:2 #>    ...      ...       ...    ... .         ...         ...      ...      ... #>   [13]        1        13      + |         ACT         ACT    1:2:4    1:2:4 #>   [14]        1        14      + |         TCA         TCC    4:2:1    4:2:2 #>   [15]        1        15      + |         TTC         TTC    4:4:2    4:4:2 #>   [16]        1        16      + |         -TA         ATT    0:4:1    1:4:4 #>   [17]        1        17      + |         -GT         CGT    0:3:4    2:3:4 #>               autm        cube #>        <character> <character> #>    [1]           0        Trnl #>    [2]       2,2,4        ACGT #>    [3]       1,1,1        ACGT #>    [4]       1,1,1        ACGT #>    [5]       1,1,3        ACGT #>    ...         ...         ... #>   [13]       1,1,1        ACGT #>   [14]       1,1,2        ACGT #>   [15]       1,1,1        ACGT #>   [16]           0        Trnl #>   [17]           0        Trnl #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths  ## Automorphism on \"Z64\" autms <- automorphisms(seqs = aln, group = \"Z64\", verbose = FALSE) autms #> Automorphism object with 17 ranges and 6 metadata columns: #>        seqnames    ranges strand |        seq1        seq2    coord1    coord2 #>           <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> #>    [1]        1         1      + |         A-G         AGG        NA        34 #>    [2]        1         2      + |         CGC         TAG        37        14 #>    [3]        1         3      + |         CCT         CCT        23        23 #>    [4]        1         4      + |         TGC         TGC        45        45 #>    [5]        1         5      + |         ACT         ACC        19        17 #>    ...      ...       ...    ... .         ...         ...       ...       ... #>   [13]        1        13      + |         ACT         ACT        19        19 #>   [14]        1        14      - |         TCA         TCC        28        29 #>   [15]        1        15      + |         TTC         TTC        61        61 #>   [16]        1        16      + |         -TA         ATT        NA        51 #>   [17]        1        17      + |         -GT         CGT        NA        39 #>             autm        cube #>        <numeric> <character> #>    [1]         0        Trnl #>    [2]        54        ACGT #>    [3]         1        ACGT #>    [4]         1        ACGT #>    [5]        11        ACGT #>    ...       ...         ... #>   [13]         1        ACGT #>   [14]        54        TGCA #>   [15]         1        ACGT #>   [16]         0        Trnl #>   [17]         0        Trnl #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths  ## Automorphism on \"Z64\" from position 1 to 33 autms <- automorphisms(     seqs = aln,     group = \"Z64\",     start = 1,     end = 33,     verbose = FALSE ) autms #> Automorphism object with 11 ranges and 6 metadata columns: #>        seqnames    ranges strand |        seq1        seq2    coord1    coord2 #>           <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> #>    [1]        1         1      + |         ATT         ATT        51        51 #>    [2]        1         2      + |         CAC         TAC         5        13 #>    [3]        1         3      + |         CTC         CTC        53        53 #>    [4]        1         4      + |         TTA         TTA        60        60 #>    [5]        1         5      + |         A-A         AAA        NA         0 #>    [6]        1         6      + |         T-C         TCT        NA        31 #>    [7]        1         7      + |         G-T         GGT        NA        43 #>    [8]        1         8      + |         TGC         TAC        45        13 #>    [9]        1         9      + |         TCC         TCC        29        29 #>   [10]        1        10      + |         GGT         GGT        43        43 #>   [11]        1        11      + |         GCT         GCT        27        27 #>             autm        cube #>        <numeric> <character> #>    [1]         1        ACGT #>    [2]        41        ACGT #>    [3]         1        ACGT #>    [4]         1        ACGT #>    [5]         0        Trnl #>    [6]         0        Trnl #>    [7]         0        Trnl #>    [8]        33        ACGT #>    [9]         1        ACGT #>   [10]         1        ACGT #>   [11]         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/base2codon.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a DNA sequence into codons — base2codon","title":"Split a DNA sequence into codons — base2codon","text":"function split DNA sequence codon sequence.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/base2codon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a DNA sequence into codons — base2codon","text":"","code":"base2codon(x, ...)  # S4 method for character base2codon(x)  # S4 method for DNAStringSet base2codon(x)  # S4 method for DNAMultipleAlignment base2codon(x)"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/base2codon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a DNA sequence into codons — base2codon","text":"x character string, DNAStringSet-class DNAMultipleAlignment-class object carrying DNA sequence. ... use.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/base2codon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a DNA sequence into codons — base2codon","text":"argument 'x' character string, character vector codons returned. argument 'x' DNAStringSet-class DNAMultipleAlignment-class object, matrix codons returned.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/base2codon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Split a DNA sequence into codons — base2codon","text":"expected provided DNA sequence multiple 3, otherwise gaps added end sequence.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/base2codon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Split a DNA sequence into codons — base2codon","text":"Robersy Sanchez https://genomaths.com. 01/15/2022","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/base2codon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a DNA sequence into codons — base2codon","text":"","code":"## Gaps are added at the sequence end. seq <- c(\"ACCT\") base2codon(x = seq) #> Warning: *** Base sequence of 'x' is not multiple of 3. Gaps '-' have been added at the end of the sequence. #> [1] \"ACC\" \"T--\"  ## This DNA sequence is multiple of 3 seq <- c(\"ACCTCA\") base2codon(x = seq) #> [1] \"ACC\" \"TCA\"  ## Load a DNAStringSet. A matrix of codons is returned data(aln, package = \"GenomAutomorphism\") base2codon(x = aln) #>       [,1]  [,2]  #>  [1,] \"ACC\" \"ATC\" #>  [2,] \"TAT\" \"TAT\" #>  [3,] \"GTT\" \"GTT\" #>  [4,] \"GGT\" \"GGT\" #>  [5,] \"ATT\" \"ATT\" #>  [6,] \"---\" \"ACG\" #>  [7,] \"GCG\" \"ACG\" #>  [8,] \"CTC\" \"CTC\" #>  [9,] \"CAA\" \"CAA\" #> [10,] \"CTC\" \"TTC\" #> [11,] \"CTT\" \"CTT\" #> [12,] \"GGC\" \"GGG\" #> [13,] \"TCT\" \"TCC\" #> [14,] \"AGC\" \"---\" #> [15,] \"TCA\" \"---\" #> [16,] \"CTA\" \"CTC\" #> [17,] \"CAT\" \"CTT\""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/base_coord.html","id":null,"dir":"Reference","previous_headings":"","what":"Base coordinates on a given a given Abelian group representation. — base_coord","title":"Base coordinates on a given a given Abelian group representation. — base_coord","text":"Given string denoting codon base DNA (RNA) alphabet genetic-code Abelian group given reference (1).","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/base_coord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base coordinates on a given a given Abelian group representation. — base_coord","text":"","code":"base_coord(base = NULL, filepath = NULL, cube = \"ACGT\", group = \"Z4\", ...)  # S4 method for DNAStringSet_OR_NULL base_coord(   base = NULL,   filepath = NULL,   cube = c(\"ACGT\", \"AGCT\", \"TCGA\", \"TGCA\", \"CATG\", \"GTAC\", \"CTAG\", \"GATC\", \"ACTG\",     \"ATCG\", \"GTCA\", \"GCTA\", \"CAGT\", \"TAGC\", \"TGAC\", \"CGAT\", \"AGTC\", \"ATGC\", \"CGTA\",     \"CTGA\", \"GACT\", \"GCAT\", \"TACG\", \"TCAG\"),   group = c(\"Z4\", \"Z5\"),   start = NA,   end = NA,   chr = 1L,   strand = \"+\" )"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/base_coord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base coordinates on a given a given Abelian group representation. — base_coord","text":"base object DNAStringSet DNAMultipleAlignment class carrying DNA pairwise alignment two sequences. filepath character vector containing path file fasta format read. argument must given codon & base arguments provided. cube character string denoting one 24 Genetic-code cubes, given references (2 2 3). group character string denoting group representation given base codon shown reference (1). ... use. start, end, chr, strand Optional parameters required build GRanges-class. provided default values given function definition used.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/base_coord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Base coordinates on a given a given Abelian group representation. — base_coord","text":"BaseGroup-class object.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/base_coord.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Base coordinates on a given a given Abelian group representation. — base_coord","text":"Symbols \"-\" \"N\" usually found DNA sequence alignments denote gaps missing/unknown bases represented number: '-1' Z4 '0' Z5. Z64 symbol 'NA' returned codons including symbols \"-\" \"N\". function returns BaseGroup object carrying DNA sequence(s) respective coordinates requested Abelian group base representation (one-dimension, \"Z4\" \"Z5\"). Observe get coordinates set integer numbers (\"Z\") also possible defined integrate Abelian group. just used insertion codon set 3D space (R^3).","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/base_coord.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Base coordinates on a given a given Abelian group representation. — base_coord","text":"Robersy Sanchez, Jesus Barreto (2021) Genomic Abelian Finite Groups. doi:10.1101/2021.06.01.446543 M. V Jose, E.R. Morgado, R. Sanchez, T. Govezensky, 24 possible algebraic representations standard genetic code six three dimensions, Adv. Stud. Biol. 4 (2012) 119-152.PDF. R. Sanchez. Symmetric Group Genetic-Code Cubes. Effect Genetic-Code Architecture Evolutionary Process MATCH Commun. Math. Comput. Chem. 79 (2018) 527-560.","code":""},{"path":[]},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/base_coord.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Base coordinates on a given a given Abelian group representation. — base_coord","text":"Robersy Sanchez https://genomaths.com","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/base_coord.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Base coordinates on a given a given Abelian group representation. — base_coord","text":"","code":"## Example 1. Let's get the base coordinates for codons \"ACG\" ## and \"TGC\": x0 <- c(\"ACG\", \"TGC\") x1 <- DNAStringSet(x0) x1 #> DNAStringSet object of length 2: #>     width seq #> [1]     3 ACG #> [2]     3 TGC  ## Get the base coordinates on cube = \"ACGT\" on the Abelian group = \"Z4\" base_coord(x1, cube = \"ACGT\", group = \"Z4\") #> BaseGroup object with 3 ranges and 4 metadata columns: #>       seqnames    ranges strand |        seq1        seq2    coord1    coord2 #>          <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> #>   [1]        1         1      + |           A           T         0         3 #>   [2]        1         2      + |           C           G         1         2 #>   [3]        1         3      + |           G           C         2         1 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths  ## Example 2. Load a pairwise alignment data(aln, package = \"GenomAutomorphism\") aln #> DNAStringSet object of length 2: #>     width seq #> [1]    51 ACCTATGTTGGTATT---GCGCTCCAACTCCTTGGCTCTAGCTCACTACAT #> [2]    51 ATCTATGTTGGTATTACGACGCTCCAATTCCTTGGGTCC------CTCCTT  ## DNA base representation in the Abelian group Z4 bs_cor <- base_coord(     base = aln,     cube = \"ACGT\" ) bs_cor #> BaseGroup object with 51 ranges and 4 metadata columns: #>        seqnames    ranges strand |        seq1        seq2    coord1    coord2 #>           <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> #>    [1]        1         1      + |           A           A         0         0 #>    [2]        1         2      + |           C           T         1         3 #>    [3]        1         3      + |           C           C         1         1 #>    [4]        1         4      + |           T           T         3         3 #>    [5]        1         5      + |           A           A         0         0 #>    ...      ...       ...    ... .         ...         ...       ...       ... #>   [47]        1        47      + |           T           T         3         3 #>   [48]        1        48      + |           A           C         0         1 #>   [49]        1        49      + |           C           C         1         1 #>   [50]        1        50      + |           A           T         0         3 #>   [51]        1        51      + |           T           T         3         3 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths  ## Example 3. DNA base representation in the Abelian group Z5 bs_cor <- base_coord(     base = aln,     cube = \"ACGT\",     group = \"Z5\" ) bs_cor #> BaseGroup object with 51 ranges and 4 metadata columns: #>        seqnames    ranges strand |        seq1        seq2    coord1    coord2 #>           <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> #>    [1]        1         1      + |           A           A         1         1 #>    [2]        1         2      + |           C           T         2         4 #>    [3]        1         3      + |           C           C         2         2 #>    [4]        1         4      + |           T           T         4         4 #>    [5]        1         5      + |           A           A         1         1 #>    ...      ...       ...    ... .         ...         ...       ...       ... #>   [47]        1        47      + |           T           T         4         4 #>   [48]        1        48      + |           A           C         1         2 #>   [49]        1        49      + |           C           C         2         2 #>   [50]        1        50      + |           A           T         1         4 #>   [51]        1        51      + |           T           T         4         4 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/base_repl.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace bases with integers — base_repl","title":"Replace bases with integers — base_repl","text":"Replace bases integers","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/base_repl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace bases with integers — base_repl","text":"","code":"base_repl(base, cube, group)"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/base_repl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace bases with integers — base_repl","text":"numerical vector.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/base_repl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Replace bases with integers — base_repl","text":"Internal use .","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/brca1_aln.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiple Sequence Alignment (MSA) of Primate BRCA1 DNA repair genes. — brca1_aln","title":"Multiple Sequence Alignment (MSA) of Primate BRCA1 DNA repair genes. — brca1_aln","text":"DNAMultipleAlignment carrying MSA BRCA1 DNA repair genes used examples provided package functions. original file can downloaded GitHub : https://bit.ly/3DimROD","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/brca1_aln.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiple Sequence Alignment (MSA) of Primate BRCA1 DNA repair genes. — brca1_aln","text":"","code":"brca1_aln"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/brca1_aln.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Multiple Sequence Alignment (MSA) of Primate BRCA1 DNA repair genes. — brca1_aln","text":"DNAMultipleAlignment class object.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/brca1_autm.html","id":null,"dir":"Reference","previous_headings":"","what":"Automorphisms between DNA Sequences from Primate BRCA1 Genes — brca1_autm","title":"Automorphisms between DNA Sequences from Primate BRCA1 Genes — brca1_autm","text":"AutomorphismList object carrying list pairwise automorphisms DNA sequences MSA primate BRCA1 DNA repair gene. automorphisms estimated brca1_aln MSA function autZ64.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/brca1_autm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automorphisms between DNA Sequences from Primate BRCA1 Genes — brca1_autm","text":"","code":"brca1_autm"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/brca1_autm.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Automorphisms between DNA Sequences from Primate BRCA1 Genes — brca1_autm","text":"AutomorphismList class object.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/codon_coord.html","id":null,"dir":"Reference","previous_headings":"","what":"Codon coordinates on a given a given Abelian group representation. — codon_coord","title":"Codon coordinates on a given a given Abelian group representation. — codon_coord","text":"Given string denoting codon base DNA (RNA) alphabet genetic-code Abelian group given reference (1).","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/codon_coord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Codon coordinates on a given a given Abelian group representation. — codon_coord","text":"","code":"codon_coord(codon = NULL, ...)  # S4 method for BaseGroup codon_coord(codon, group = NULL)  # S4 method for DNAStringSet_OR_NULL codon_coord(   codon = NULL,   filepath = NULL,   cube = c(\"ACGT\", \"AGCT\", \"TCGA\", \"TGCA\", \"CATG\", \"GTAC\", \"CTAG\", \"GATC\", \"ACTG\",     \"ATCG\", \"GTCA\", \"GCTA\", \"CAGT\", \"TAGC\", \"TGAC\", \"CGAT\", \"AGTC\", \"ATGC\", \"CGTA\",     \"CTGA\", \"GACT\", \"GCAT\", \"TACG\", \"TCAG\"),   group = c(\"Z4\", \"Z5\", \"Z64\", \"Z125\", \"Z4^3\", \"Z5^3\"),   start = NA,   end = NA,   chr = 1L,   strand = \"+\" )  # S4 method for matrix_OR_data_frame codon_coord(   codon,   cube = c(\"ACGT\", \"AGCT\", \"TCGA\", \"TGCA\", \"CATG\", \"GTAC\", \"CTAG\", \"GATC\", \"ACTG\",     \"ATCG\", \"GTCA\", \"GCTA\", \"CAGT\", \"TAGC\", \"TGAC\", \"CGAT\", \"AGTC\", \"ATGC\", \"CGTA\",     \"CTGA\", \"GACT\", \"GCAT\", \"TACG\", \"TCAG\"),   group = c(\"Z64\", \"Z125\", \"Z4^3\", \"Z5^3\") )"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/codon_coord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Codon coordinates on a given a given Abelian group representation. — codon_coord","text":"codon object BaseGroup-class (generated function base_coord), DNAStringSet DNAMultipleAlignment class carrying DNA pairwise alignment two sequences. ... use. group character string denoting group representation given base codon shown reference (2-3). filepath character vector containing path file fasta format read. argument must given codon & base arguments provided. cube character string denoting one 24 Genetic-code cubes, given references (2-3). start, end, chr, strand Optional parameters required build GRanges-class. provided default values given function definition used.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/codon_coord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Codon coordinates on a given a given Abelian group representation. — codon_coord","text":"CodonGroup-class object.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/codon_coord.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Codon coordinates on a given a given Abelian group representation. — codon_coord","text":"Symbols \"-\" \"N\" usually found DNA sequence alignments denote gaps missing/unknown bases represented number: '-1' Z4 '0' Z5. Z64 symbol 'NA' returned codons including symbols \"-\" \"N\". function returns GRanges-class object carrying codon sequence(s) respective coordinates requested Abelian group simply, group =  'Z5^3' 3D-coordinates, derive Z5 indicated reference (3). Notice coordinates can 3D just one-dimension (\"Z64\" \"Z125\"). Hence, pairwise alignment provided argument codon must correspond codon sequences.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/codon_coord.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Codon coordinates on a given a given Abelian group representation. — codon_coord","text":"Robersy Sanchez, Jesus Barreto (2021) Genomic Abelian Finite Groups. doi: 10.1101/2021.06.01.446543 M. V Jose, E.R. Morgado, R. Sanchez, T. Govezensky, 24 possible algebraic representations standard genetic code six three dimensions, Adv. Stud. Biol. 4 (2012) 119-152.PDF. R. Sanchez. Symmetric Group Genetic-Code Cubes. Effect Genetic-Code Architecture Evolutionary Process MATCH Commun. Math. Comput. Chem. 79 (2018) 527-560.","code":""},{"path":[]},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/codon_coord.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Codon coordinates on a given a given Abelian group representation. — codon_coord","text":"Robersy Sanchez https://genomaths.com","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/codon_coord.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Codon coordinates on a given a given Abelian group representation. — codon_coord","text":"","code":"## Load a pairwise alignment data(aln, package = \"GenomAutomorphism\") aln #> DNAStringSet object of length 2: #>     width seq #> [1]    51 ACCTATGTTGGTATT---GCGCTCCAACTCCTTGGCTCTAGCTCACTACAT #> [2]    51 ATCTATGTTGGTATTACGACGCTCCAATTCCTTGGGTCC------CTCCTT  ## DNA base representation in the Abelian group Z5 bs_cor <- codon_coord(     codon = aln,     cube = \"ACGT\",     group = \"Z5\" ) bs_cor ## 3-D coordinates #> CodonGroup object with 17 ranges and 4 metadata columns: #>        seqnames    ranges strand |        seq1        seq2      coord1 #>           <Rle> <IRanges>  <Rle> | <character> <character> <character> #>    [1]        1         1      + |         A-G         AGG       1,0,3 #>    [2]        1         2      + |         CGC         TAG       2,3,2 #>    [3]        1         3      + |         CCT         CCT       2,2,4 #>    [4]        1         4      + |         TGC         TGC       4,3,2 #>    [5]        1         5      + |         ACT         ACC       1,2,4 #>    ...      ...       ...    ... .         ...         ...         ... #>   [13]        1        13      + |         ACT         ACT       1,2,4 #>   [14]        1        14      + |         TCA         TCC       4,2,1 #>   [15]        1        15      + |         TTC         TTC       4,4,2 #>   [16]        1        16      + |         -TA         ATT       0,4,1 #>   [17]        1        17      + |         -GT         CGT       0,3,4 #>             coord2 #>        <character> #>    [1]       1,3,3 #>    [2]       4,1,3 #>    [3]       2,2,4 #>    [4]       4,3,2 #>    [5]       1,2,2 #>    ...         ... #>   [13]       1,2,4 #>   [14]       4,2,2 #>   [15]       4,4,2 #>   [16]       1,4,4 #>   [17]       2,3,4 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths   ## DNA base representation in the Abelian group Z64 bs_cor <- codon_coord(     codon = aln,     cube = \"ACGT\",     group = \"Z64\" ) bs_cor #> CodonGroup object with 17 ranges and 4 metadata columns: #>        seqnames    ranges strand |        seq1        seq2      coord1 #>           <Rle> <IRanges>  <Rle> | <character> <character> <character> #>    [1]        1         1      + |         A-G         AGG        <NA> #>    [2]        1         2      + |         CGC         TAG          37 #>    [3]        1         3      + |         CCT         CCT          23 #>    [4]        1         4      + |         TGC         TGC          45 #>    [5]        1         5      + |         ACT         ACC          19 #>    ...      ...       ...    ... .         ...         ...         ... #>   [13]        1        13      + |         ACT         ACT          19 #>   [14]        1        14      + |         TCA         TCC          28 #>   [15]        1        15      + |         TTC         TTC          61 #>   [16]        1        16      + |         -TA         ATT        <NA> #>   [17]        1        17      + |         -GT         CGT        <NA> #>             coord2 #>        <character> #>    [1]          34 #>    [2]          14 #>    [3]          23 #>    [4]          45 #>    [5]          17 #>    ...         ... #>   [13]          19 #>   [14]          29 #>   [15]          61 #>   [16]          51 #>   [17]          39 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths  ## Giving a matrix of codons codon_coord(base2codon(x = aln)) #>    seq1 seq2 coord1 coord2 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA #> 1   ACC  ATC     17     49 15 15 59 59 43 43 51 51 NA 18 26 18 53 53  4  4 53 #> 2   TAT  TAT     17     49 15 15 59 59 43 43 51 51 NA 18 26 18 53 53  4  4 53 #> 3   GTT  GTT     17     49 15 15 59 59 43 43 51 51 NA 18 26 18 53 53  4  4 53 #> 4   GGT  GGT     17     49 15 15 59 59 43 43 51 51 NA 18 26 18 53 53  4  4 53 #> 5   ATT  ATT     17     49 15 15 59 59 43 43 51 51 NA 18 26 18 53 53  4  4 53 #> 6   ---  ACG     17     49 15 15 59 59 43 43 51 51 NA 18 26 18 53 53  4  4 53 #> 7   GCG  ACG     17     49 15 15 59 59 43 43 51 51 NA 18 26 18 53 53  4  4 53 #> 8   CTC  CTC     17     49 15 15 59 59 43 43 51 51 NA 18 26 18 53 53  4  4 53 #> 9   CAA  CAA     17     49 15 15 59 59 43 43 51 51 NA 18 26 18 53 53  4  4 53 #> 10  CTC  TTC     17     49 15 15 59 59 43 43 51 51 NA 18 26 18 53 53  4  4 53 #> 11  CTT  CTT     17     49 15 15 59 59 43 43 51 51 NA 18 26 18 53 53  4  4 53 #> 12  GGC  GGG     17     49 15 15 59 59 43 43 51 51 NA 18 26 18 53 53  4  4 53 #> 13  TCT  TCC     17     49 15 15 59 59 43 43 51 51 NA 18 26 18 53 53  4  4 53 #> 14  AGC  ---     17     49 15 15 59 59 43 43 51 51 NA 18 26 18 53 53  4  4 53 #> 15  TCA  ---     17     49 15 15 59 59 43 43 51 51 NA 18 26 18 53 53  4  4 53 #> 16  CTA  CTC     17     49 15 15 59 59 43 43 51 51 NA 18 26 18 53 53  4  4 53 #> 17  CAT  CTT     17     49 15 15 59 59 43 43 51 51 NA 18 26 18 53 53  4  4 53 #>    NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA #> 1  61 55 55 41 42 31 29 33 NA 28 NA 52 53  7 55 #> 2  61 55 55 41 42 31 29 33 NA 28 NA 52 53  7 55 #> 3  61 55 55 41 42 31 29 33 NA 28 NA 52 53  7 55 #> 4  61 55 55 41 42 31 29 33 NA 28 NA 52 53  7 55 #> 5  61 55 55 41 42 31 29 33 NA 28 NA 52 53  7 55 #> 6  61 55 55 41 42 31 29 33 NA 28 NA 52 53  7 55 #> 7  61 55 55 41 42 31 29 33 NA 28 NA 52 53  7 55 #> 8  61 55 55 41 42 31 29 33 NA 28 NA 52 53  7 55 #> 9  61 55 55 41 42 31 29 33 NA 28 NA 52 53  7 55 #> 10 61 55 55 41 42 31 29 33 NA 28 NA 52 53  7 55 #> 11 61 55 55 41 42 31 29 33 NA 28 NA 52 53  7 55 #> 12 61 55 55 41 42 31 29 33 NA 28 NA 52 53  7 55 #> 13 61 55 55 41 42 31 29 33 NA 28 NA 52 53  7 55 #> 14 61 55 55 41 42 31 29 33 NA 28 NA 52 53  7 55 #> 15 61 55 55 41 42 31 29 33 NA 28 NA 52 53  7 55 #> 16 61 55 55 41 42 31 29 33 NA 28 NA 52 53  7 55 #> 17 61 55 55 41 42 31 29 33 NA 28 NA 52 53  7 55"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/conserved_regions.html","id":null,"dir":"Reference","previous_headings":"","what":"Conserved and Non-conserved Regions from a MSA — conserved_regions","title":"Conserved and Non-conserved Regions from a MSA — conserved_regions","text":"Returns Conserved Non-conserved Regions MSA.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/conserved_regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conserved and Non-conserved Regions from a MSA — conserved_regions","text":"","code":"conserved_regions(x, ...)  # S4 method for Automorphism conserved_regions(   x,   conserved = TRUE,   output = c(\"all_pairs\", \"unique_pairs\", \"unique\") )  # S4 method for AutomorphismList conserved_regions(   x,   conserved = TRUE,   output = c(\"all_pairs\", \"unique_pairs\", \"unique\"),   num.cores = detectCores() - 1,   tasks = 0L,   verbose = FALSE )  # S4 method for AutomorphismByCoef conserved_regions(   x,   conserved = TRUE,   output = c(\"all_pairs\", \"unique_pairs\", \"unique\") )  # S4 method for AutomorphismByCoefList conserved_regions(   x,   conserved = TRUE,   output = c(\"all_pairs\", \"unique_pairs\", \"unique\") )"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/conserved_regions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conserved and Non-conserved Regions from a MSA — conserved_regions","text":"x Automorphism-class, AutomorphismList-class, AutomorphismByCoef AutomorphismByCoefList class object. ... use. conserved Logical, Whether return conserved non-conserved regions. output character string. Type output. num.cores, tasks Integers. Argument num.cores denotes number cores use, .e. many child processes run simultaneously (see bplapply function BiocParallel package). Argument tasks denotes number tasks per job. value must scalar integer >= 0L. documentation job defined single call function, bplapply. task division \\(X\\) argument chunks. tasks == 0 (default), \\(X\\) divided evenly possible number workers (see MulticoreParam BiocParallel package). verbose logic(1). TRUE, enable progress bar.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/conserved_regions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conserved and Non-conserved Regions from a MSA — conserved_regions","text":"AutomorphismByCoef class object containing requested regions.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/conserved_regions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conserved and Non-conserved Regions from a MSA — conserved_regions","text":"","code":"## Load dataset data(autm, package = \"GenomAutomorphism\") conserved_regions(autm[1:3]) #> AutomorphismByCoef object with 2 ranges and 5 metadata columns: #>       seqnames    ranges strand |        seq1        seq2      autm    mut_type #>          <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <character> #>   [1]        1       2-3      + |         TAT         TAT         1         HHH #>   [2]        1       2-3      + |         GTT         GTT         1         HHH #>              cube #>       <character> #>   [1]        ACGT #>   [2]        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths ## Load automorphism found COVID datatset data(covid_autm, package = \"GenomAutomorphism\")  ## Conserved regions in the first 100 codons conserv <- conserved_regions(covid_autm[1:100], output = \"unique\") conserv #> GRanges object with 7 ranges and 2 metadata columns: #>       seqnames    ranges strand |      autm        cube #>          <Rle> <IRanges>  <Rle> | <numeric> <character> #>   [1]        1      1-19      + |         1        ACGT #>   [2]        1     21-44      + |         1        ACGT #>   [3]        1     47-52      + |         1        ACGT #>   [4]        1     54-60      + |         1        ACGT #>   [5]        1     62-80      + |         1        ACGT #>   [6]        1     83-91      + |         1        ACGT #>   [7]        1    93-100      + |         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/covid_aln.html","id":null,"dir":"Reference","previous_headings":"","what":"Pairwise Sequence Alignment (MSA) of COVID-19 genomes. — covid_aln","title":"Pairwise Sequence Alignment (MSA) of COVID-19 genomes. — covid_aln","text":"DNAMultipleAlignment carrying pairwise sequence alignment SARS coronavirus GZ02 (GenBank: AY390556.1: 265-13398_13398-21485) Bat SARS-like coronavirus isolate bat-SL-CoVZC45 (GenBank: MG772933.1:265-1345513455-21542), complete genomes. alignment available GitHub: https://github.com/genomaths/seqalignments/tree/master/COVID-19","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/covid_aln.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pairwise Sequence Alignment (MSA) of COVID-19 genomes. — covid_aln","text":"","code":"covid_aln"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/covid_aln.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pairwise Sequence Alignment (MSA) of COVID-19 genomes. — covid_aln","text":"DNAMultipleAlignment class object.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/covid_autm.html","id":null,"dir":"Reference","previous_headings":"","what":"Automorphisms between DNA Sequences from two COVID-19 genomes — covid_autm","title":"Automorphisms between DNA Sequences from two COVID-19 genomes — covid_autm","text":"AutomorphismList object carrying list pairwise automorphisms SARS coronavirus GZ02 (GenBank: AY390556.1: 265-13398_13398-21485) Bat SARS-like coronavirus isolate bat-SL-CoVZC45 (GenBank: KY417151.1: protein-coding regions). pairwise DNA sequence alignment available dataset named covid_aln automorphisms estimated function autZ64.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/covid_autm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automorphisms between DNA Sequences from two COVID-19 genomes — covid_autm","text":"","code":"covid_autm"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/covid_autm.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Automorphisms between DNA Sequences from two COVID-19 genomes — covid_autm","text":"AutomorphismList class object.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/cyc_aln.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiple Sequence Alignment (MSA) of Primate Somatic Cytochrome C — cyc_aln","title":"Multiple Sequence Alignment (MSA) of Primate Somatic Cytochrome C — cyc_aln","text":"DNAMultipleAlignment carrying MSA Primate Somatic Cytochrome C used examples provided package functions. original file can downloaded GitHub : https://bit.ly/3kdEAzs","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/cyc_aln.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiple Sequence Alignment (MSA) of Primate Somatic Cytochrome C — cyc_aln","text":"","code":"cyc_aln"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/cyc_aln.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Multiple Sequence Alignment (MSA) of Primate Somatic Cytochrome C — cyc_aln","text":"DNAMultipleAlignment class object.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/cyc_autm.html","id":null,"dir":"Reference","previous_headings":"","what":"Automorphisms between DNA Sequences from Primate Cytochrome C Genes — cyc_autm","title":"Automorphisms between DNA Sequences from Primate Cytochrome C Genes — cyc_autm","text":"AutomorphismList object carrying list pairwise automorphisms DNA sequences MSA Primate Somatic Cytochrome C used examples provided package functions. automorphisms estimated cyc_aln MSA function autZ64.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/cyc_autm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automorphisms between DNA Sequences from Primate Cytochrome C Genes — cyc_autm","text":"","code":"cyc_autm"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/cyc_autm.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Automorphisms between DNA Sequences from Primate Cytochrome C Genes — cyc_autm","text":"AutomorphismList class object.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/extract-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to extract elements from AutomorphismList-class object. — [,AutomorphismList,ANY-method","title":"An S4 class to extract elements from AutomorphismList-class object. — [,AutomorphismList,ANY-method","text":"First second level subsetting 'x'. Extraction using names can done x$name. Second level subsetting 'x'. Subsetting 'x' element name.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/extract-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An S4 class to extract elements from AutomorphismList-class object. — [,AutomorphismList,ANY-method","text":"","code":"# S4 method for AutomorphismList,ANY [(x, i, j, ..., drop = TRUE)  # S4 method for AutomorphismList [[(x, i, j, ...)  # S4 method for AutomorphismList $(x, name)"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/extract-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An S4 class to extract elements from AutomorphismList-class object. — [,AutomorphismList,ANY-method","text":"x AutomorphismList-class object , j, ..., drop Extract. name literal character string naming element 'x'.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/extract-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An S4 class to extract elements from AutomorphismList-class object. — [,AutomorphismList,ANY-method","text":"element x, AutomorphismList-class object. element x, Automorphism-class object. element x, Automorphism-class object.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/extract-methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"An S4 class to extract elements from AutomorphismList-class object. — [,AutomorphismList,ANY-method","text":"Robersy Sanchez https://genomaths.com Robersy Sanchez (https://genomaths.com).","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/extract-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An S4 class to extract elements from AutomorphismList-class object. — [,AutomorphismList,ANY-method","text":"","code":"## Load automorphisms found BRCA1 primate genes data(brca1_autm, package = \"GenomAutomorphism\")  ## Extract AutomorphismList object with only one element brca1_autm[1] #> AutomorphismList object of length: 1 #> names(1): human_1.human_2  #> -------  #> Automorphism object with 761 ranges and 6 metadata columns: #>         seqnames    ranges strand |        seq1        seq2    coord1    coord2 #>            <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> #>     [1]        1         1      + |         ATG         ATG        50        50 #>     [2]        1         2      + |         GAT         GAT        11        11 #>     [3]        1         3      + |         TTA         TTA        60        60 #>     [4]        1         4      + |         TCT         TCT        31        31 #>     [5]        1         5      + |         GCT         GCT        27        27 #>     ...      ...       ...    ... .         ...         ...       ...       ... #>   [757]        1       757      + |         CAC         CAC         5         5 #>   [758]        1       758      + |         AGC         AGC        33        33 #>   [759]        1       759      + |         CAC         CAC         5         5 #>   [760]        1       760      + |         TAC         TAC        13        13 #>   [761]        1       761      + |         TGA         TGA        44        44 #>              autm        cube #>         <numeric> <character> #>     [1]         1        ACGT #>     [2]         1        ACGT #>     [3]         1        ACGT #>     [4]         1        ACGT #>     [5]         1        ACGT #>     ...       ...         ... #>   [757]         1        ACGT #>   [758]         1        ACGT #>   [759]         1        ACGT #>   [760]         1        ACGT #>   [761]         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #> ... #> <0 more DFrame element(s)> #> Two slots: 'DataList' & 'SeqRanges' #> -------   ## Extract Automorphism object with only one element brca1_autm[[3]] #> Automorphism object with 761 ranges and 6 metadata columns: #>         seqnames    ranges strand |        seq1        seq2    coord1    coord2 #>            <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> #>     [1]        1         1      + |         ATG         ATG        50        50 #>     [2]        1         2      + |         GAT         GAT        11        11 #>     [3]        1         3      + |         TTA         TTA        60        60 #>     [4]        1         4      + |         TCT         TCT        31        31 #>     [5]        1         5      + |         GCT         GCT        27        27 #>     ...      ...       ...    ... .         ...         ...       ...       ... #>   [757]        1       757      + |         CAC         CAC         5         5 #>   [758]        1       758      + |         AGC         AGC        33        33 #>   [759]        1       759      + |         CAC         CAC         5         5 #>   [760]        1       760      + |         TAC         TAC        13        13 #>   [761]        1       761      + |         TGA         TGA        44        44 #>              autm        cube #>         <numeric> <character> #>     [1]         1        ACGT #>     [2]         1        ACGT #>     [3]         1        ACGT #>     [4]         1        ACGT #>     [5]         1        ACGT #>     ...       ...         ... #>   [757]         1        ACGT #>   [758]         1        ACGT #>   [759]         1        ACGT #>   [760]         1        ACGT #>   [761]         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths  ## Extract Automorphism object using element name. brca1_autm[[\"human_1.gorilla_1\"]] #> Automorphism object with 761 ranges and 6 metadata columns: #>         seqnames    ranges strand |        seq1        seq2    coord1    coord2 #>            <Rle> <IRanges>  <Rle> | <character> <character> <numeric> <numeric> #>     [1]        1         1      + |         ATG         ATG        50        50 #>     [2]        1         2      + |         GAT         GAT        11        11 #>     [3]        1         3      + |         TTA         TTA        60        60 #>     [4]        1         4      + |         TCT         TCT        31        31 #>     [5]        1         5      + |         GCT         GCT        27        27 #>     ...      ...       ...    ... .         ...         ...       ...       ... #>   [757]        1       757      + |         CAC         CAC         5         5 #>   [758]        1       758      + |         AGC         AGC        33        33 #>   [759]        1       759      + |         CAC         CAC         5         5 #>   [760]        1       760      + |         TAC         TAC        13        13 #>   [761]        1       761      + |         TGA         TGA        44        44 #>              autm        cube #>         <numeric> <character> #>     [1]         1        ACGT #>     [2]         1        ACGT #>     [3]         1        ACGT #>     [4]         1        ACGT #>     [5]         1        ACGT #>     ...       ...         ... #>   [757]         1        ACGT #>   [758]         1        ACGT #>   [759]         1        ACGT #>   [760]         1        ACGT #>   [761]         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/getAutomorphisms.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Automorphisms — getAutomorphisms","title":"Get Automorphisms — getAutomorphisms","text":"sake saving memory, Automorphism-class objects stored AutomorphismList-class,  inherits GRanges-class.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/getAutomorphisms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Automorphisms — getAutomorphisms","text":"","code":"getAutomorphisms(x, ...)  # S4 method for AutomorphismList getAutomorphisms(x)  # S4 method for list getAutomorphisms(x)  # S4 method for DataFrame_OR_data.frame getAutomorphisms(x)"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/getAutomorphisms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Automorphisms — getAutomorphisms","text":"x AutomorphismList-class. ... use.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/getAutomorphisms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Automorphisms — getAutomorphisms","text":"function returns AutomorphismList-class object list Automorphism-class objects, inherits GRanges-class objects. AutomorphismList-class Automorphism-class","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/getAutomorphisms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Automorphisms — getAutomorphisms","text":"function just transform Automorphism-class object object class now inheriting GRanges-class.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/getAutomorphisms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Automorphisms — getAutomorphisms","text":"","code":"## Load a dataset data(autm, package = \"GenomAutomorphism\") aut <- mcols(autm) aut ## This a DataFrame object #> DataFrame with 7100 rows and 6 columns #>             seq1        seq2    coord1    coord2      autm        cube #>      <character> <character> <numeric> <numeric> <numeric> <character> #> 1            ACC         ATC        17        49        33        ACGT #> 2            TAT         TAT        15        15         1        ACGT #> 3            GTT         GTT        59        59         1        ACGT #> 4            GGT         GGT        43        43         1        ACGT #> 5            ATT         ATT        51        51         1        ACGT #> ...          ...         ...       ...       ...       ...         ... #> 7096         TTA         TTA        60        60         1        ACGT #> 7097         GGC         GGC        41        41         1        ACGT #> 7098         GTT         GTT        59        59         1        ACGT #> 7099         CTA         CAA        52         4         5        ACGT #> 7100         TCA         TCA        28        28         1        ACGT  ## The natural ranges for the sequence (from 1 to length(aut)) are added getAutomorphisms(aut) #> Automorphism object with 7100 ranges and 6 metadata columns: #>          seqnames    ranges strand |        seq1        seq2    coord1 #>             <Rle> <IRanges>  <Rle> | <character> <character> <numeric> #>      [1]        1         1      + |         ACC         ATC        17 #>      [2]        1         2      + |         TAT         TAT        15 #>      [3]        1         3      + |         GTT         GTT        59 #>      [4]        1         4      + |         GGT         GGT        43 #>      [5]        1         5      + |         ATT         ATT        51 #>      ...      ...       ...    ... .         ...         ...       ... #>   [7096]        1      7096      + |         TTA         TTA        60 #>   [7097]        1      7097      + |         GGC         GGC        41 #>   [7098]        1      7098      + |         GTT         GTT        59 #>   [7099]        1      7099      + |         CTA         CAA        52 #>   [7100]        1      7100      + |         TCA         TCA        28 #>             coord2      autm        cube #>          <numeric> <numeric> <character> #>      [1]        49        33        ACGT #>      [2]        15         1        ACGT #>      [3]        59         1        ACGT #>      [4]        43         1        ACGT #>      [5]        51         1        ACGT #>      ...       ...       ...         ... #>   [7096]        60         1        ACGT #>   [7097]        41         1        ACGT #>   [7098]        59         1        ACGT #>   [7099]         4         5        ACGT #>   [7100]        28         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths  ## A list of automorphisms aut <- list(aut, aut) getAutomorphisms(aut) #> AutomorphismList object of length: 2 #> names(0):  #> -------  #> Automorphism object with 7100 ranges and 6 metadata columns: #>          seqnames    ranges strand |        seq1        seq2    coord1 #>             <Rle> <IRanges>  <Rle> | <character> <character> <numeric> #>      [1]        1         1      + |         ACC         ATC        17 #>      [2]        1         2      + |         TAT         TAT        15 #>      [3]        1         3      + |         GTT         GTT        59 #>      [4]        1         4      + |         GGT         GGT        43 #>      [5]        1         5      + |         ATT         ATT        51 #>      ...      ...       ...    ... .         ...         ...       ... #>   [7096]        1      7096      + |         TTA         TTA        60 #>   [7097]        1      7097      + |         GGC         GGC        41 #>   [7098]        1      7098      + |         GTT         GTT        59 #>   [7099]        1      7099      + |         CTA         CAA        52 #>   [7100]        1      7100      + |         TCA         TCA        28 #>             coord2      autm        cube #>          <numeric> <numeric> <character> #>      [1]        49        33        ACGT #>      [2]        15         1        ACGT #>      [3]        59         1        ACGT #>      [4]        43         1        ACGT #>      [5]        51         1        ACGT #>      ...       ...       ...         ... #>   [7096]        60         1        ACGT #>   [7097]        41         1        ACGT #>   [7098]        59         1        ACGT #>   [7099]         4         5        ACGT #>   [7100]        28         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths #> ... #> <-1 more Automorphism element(s)> #> Two slots: 'DataList' & 'SeqRanges' #> -------   ## Automorphism-class inherits from 'GRanges-class' aut <- as(autm, \"GRanges\") as(aut, \"Automorphism\") #> Automorphism object with 7100 ranges and 6 metadata columns: #>          seqnames    ranges strand |        seq1        seq2    coord1 #>             <Rle> <IRanges>  <Rle> | <character> <character> <numeric> #>      [1]        1         1      + |         ACC         ATC        17 #>      [2]        1         2      + |         TAT         TAT        15 #>      [3]        1         3      + |         GTT         GTT        59 #>      [4]        1         4      + |         GGT         GGT        43 #>      [5]        1         5      + |         ATT         ATT        51 #>      ...      ...       ...    ... .         ...         ...       ... #>   [7096]        1      7096      + |         TTA         TTA        60 #>   [7097]        1      7097      + |         GGC         GGC        41 #>   [7098]        1      7098      + |         GTT         GTT        59 #>   [7099]        1      7099      + |         CTA         CAA        52 #>   [7100]        1      7100      + |         TCA         TCA        28 #>             coord2      autm        cube #>          <numeric> <numeric> <character> #>      [1]        49        33        ACGT #>      [2]        15         1        ACGT #>      [3]        59         1        ACGT #>      [4]        43         1        ACGT #>      [5]        51         1        ACGT #>      ...       ...       ...         ... #>   [7096]        60         1        ACGT #>   [7097]        41         1        ACGT #>   [7098]        59         1        ACGT #>   [7099]         4         5        ACGT #>   [7100]        28         1        ACGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/get_coord.html","id":null,"dir":"Reference","previous_headings":"","what":"DNA base/codon sequence and coordinates represented on a given\nAbelian group. — get_coord","title":"DNA base/codon sequence and coordinates represented on a given\nAbelian group. — get_coord","text":"Given string denoting codon base DNA (RNA) alphabet genetic-code Abelian group given reference (1), function returns object CodonGroup-class carrying DNA base/codon sequence coordinates represented given Abelian group.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/get_coord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DNA base/codon sequence and coordinates represented on a given\nAbelian group. — get_coord","text":"","code":"get_coord(x, ...)  # S4 method for BaseGroup_OR_CodonGroup get_coord(x, output = c(\"all\", \"matrix.list\"))  # S4 method for DNAStringSet_OR_NULL get_coord(   x,   output = c(\"all\", \"matrix.list\"),   base_seq = TRUE,   filepath = NULL,   cube = \"ACGT\",   group = \"Z4\",   start = NA,   end = NA,   chr = 1L,   strand = \"+\" )"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/get_coord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DNA base/codon sequence and coordinates represented on a given\nAbelian group. — get_coord","text":"x object BaseGroup-class, CodonGroup-class, DNAStringSet DNAMultipleAlignment class carrying DNA pairwise alignment two sequences. Objects BaseGroup-class CodonGroup-class generated functions: base_coord codon_coord, respectively. ... use. output See Value section. base_seq Logical. Whether return base codon coordinates selected Abelian group. codon coordinates requested, number DNA bases given sequences must multiple 3. filepath character vector containing path file fasta format read. argument must given codon & base arguments provided. cube character string denoting one 24 Genetic-code cubes, given references (2 2 3). group character string denoting group representation given base codon shown reference (1). start, end, chr, strand Optional parameters required build GRanges-class. provided default values given function definition used.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/get_coord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DNA base/codon sequence and coordinates represented on a given\nAbelian group. — get_coord","text":"object CodonGroup-class class returned output = ''. two slots, first one carrying list matrices second one carrying codon/base sequence information. , x object CodonGroup-class class, list matrices codon coordinate can retrieved x@CoordList information codon sequence x@SeqRanges. output = 'matrix.list', object MatrixList class returned.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/get_coord.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DNA base/codon sequence and coordinates represented on a given\nAbelian group. — get_coord","text":"Symbols '-' 'N' usually found DNA sequence alignments denote gaps missing/unknown bases represented number: '-1' Z4 '0' Z5. Z64 symbol 'NA' returned codons including symbols '-' 'N'. Although CodonGroup-class object returned functions codon_coord base_coord useful store genomic information, base codon coordinates given numeric magnitudes. Function get_coord provides way get coordinates numeric object object still preserve base/codon sequence information.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/get_coord.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DNA base/codon sequence and coordinates represented on a given\nAbelian group. — get_coord","text":"","code":"## Load a pairwise alignment data(aln, package = \"GenomAutomorphism\") aln #> DNAStringSet object of length 2: #>     width seq #> [1]    51 ACCTATGTTGGTATT---GCGCTCCAACTCCTTGGCTCTAGCTCACTACAT #> [2]    51 ATCTATGTTGGTATTACGACGCTCCAATTCCTTGGGTCC------CTCCTT  ## DNA base representation in the Abelian group Z5 coord <- get_coord(     x = aln,     cube = \"ACGT\",     group = \"Z5\" ) coord ## A list of vectors #> CodonSeq object of length: 2 #> names(2): coord1 coord2  #> -------  #> Vector of length: 51  #>  [1] 1 2 2 4 1 4 3 4 4 3 3 4 1 4 4 0 0 0 3 2 3 2 4 2 2 1 1 2 4 2 2 4 4 3 3 2 4 2 #> [39] 4 1 3 2 4 2 1 2 4 1 2 1 4 #> ... #> <1 more numeric element(s)> #> Two slots: 'CoordList' & 'SeqRanges' #> -------   ## Extract the coordinate list coordList(coord) #> $coord1 #>  [1] 1 2 2 4 1 4 3 4 4 3 3 4 1 4 4 0 0 0 3 2 3 2 4 2 2 1 1 2 4 2 2 4 4 3 3 2 4 2 #> [39] 4 1 3 2 4 2 1 2 4 1 2 1 4 #>  #> $coord2 #>  [1] 1 4 2 4 1 4 3 4 4 3 3 4 1 4 4 1 2 3 1 2 3 2 4 2 2 1 1 4 4 2 2 4 4 3 3 3 4 2 #> [39] 2 0 0 0 0 0 0 2 4 2 2 4 4 #>   ## Extract the sequence list seqRanges(coord) #> GRanges object with 51 ranges and 2 metadata columns: #>        seqnames    ranges strand |        seq1        seq2 #>           <Rle> <IRanges>  <Rle> | <character> <character> #>    [1]        1         1      + |           A           A #>    [2]        1         2      + |           C           T #>    [3]        1         3      + |           C           C #>    [4]        1         4      + |           T           T #>    [5]        1         5      + |           A           A #>    ...      ...       ...    ... .         ...         ... #>   [47]        1        47      + |           T           T #>   [48]        1        48      + |           A           C #>   [49]        1        49      + |           C           C #>   [50]        1        50      + |           A           T #>   [51]        1        51      + |           T           T #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths  ## DNA codon representation in the Abelian group Z64 coord <- get_coord(     x = aln,     base_seq = FALSE,     cube = \"ACGT\",     group = \"Z64\" ) coord #> CodonSeq object of length: 2 #> names(2): coord1 coord2  #> -------  #> Vector of length: 17  #>  [1] NA 37 23 45 19 60 26 29 15  9 24 61 19 28 61 NA NA #> ... #> <1 more numeric element(s)> #> Two slots: 'CoordList' & 'SeqRanges' #> -------   ## Extract the coordinate list coordList(coord) #> $coord1 #>  [1] NA 37 23 45 19 60 26 29 15  9 24 61 19 28 61 NA NA #>  #> $coord2 #>  [1] 34 14 23 45 17 NA NA NA NA NA NA 61 19 29 61 51 39 #>   ## Extract the sequence list seqRanges(coord) #> GRanges object with 17 ranges and 2 metadata columns: #>        seqnames    ranges strand |        seq1        seq2 #>           <Rle> <IRanges>  <Rle> | <character> <character> #>    [1]        1         1      + |         A-G         AGG #>    [2]        1         2      + |         CGC         TAG #>    [3]        1         3      + |         CCT         CCT #>    [4]        1         4      + |         TGC         TGC #>    [5]        1         5      + |         ACT         ACC #>    ...      ...       ...    ... .         ...         ... #>   [13]        1        13      + |         ACT         ACT #>   [14]        1        14      + |         TCA         TCC #>   [15]        1        15      + |         TTC         TTC #>   [16]        1        16      + |         -TA         ATT #>   [17]        1        17      + |         -GT         CGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/is.url.html","id":null,"dir":"Reference","previous_headings":"","what":"Check URLs — is.url","title":"Check URLs — is.url","text":"Check URLs","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/is.url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check URLs — is.url","text":"","code":"is.url(x)"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/is.url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check URLs — is.url","text":"Logical values","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/is.url.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check URLs — is.url","text":"Internal use .","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/matrices.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Coordinate Representation from DNA Sequences on Specified\nAbelian Group — matrices","title":"Get the Coordinate Representation from DNA Sequences on Specified\nAbelian Group — matrices","text":"Extract Coordinate Representation DNA Sequences Specified Abelian Group.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/matrices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Coordinate Representation from DNA Sequences on Specified\nAbelian Group — matrices","text":"","code":"matrices(x, ...)  # S4 method for MatrixList matrices(x)  # S4 method for CodonSeq matrices(x)  # S4 method for DNAStringSet_OR_NULL matrices(   x,   base_seq = TRUE,   filepath = NULL,   cube = \"ACGT\",   group = c(\"Z4\", \"Z5\", \"Z64\", \"Z125\", \"Z4^3\", \"Z5^3\"),   start = NA,   end = NA,   chr = 1L,   strand = \"+\" )"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/matrices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the Coordinate Representation from DNA Sequences on Specified\nAbelian Group — matrices","text":"x object DNAStringSet DNAMultipleAlignment class carrying DNA pairwise alignment two sequences. ... use. base_seq Logical. Whether return base codon coordinates selected Abelian group. codon coordinates requested, number DNA bases given sequences must multiple 3. filepath character vector containing path file fasta format read. argument must given codon & base arguments provided. cube character string denoting one 24 Genetic-code cubes, given references (2-3). group character string denoting group representation given base codon shown reference (1). start, end, chr, strand Optional parameters required build GRanges-class. provided default values given function definition used.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/matrices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Coordinate Representation from DNA Sequences on Specified\nAbelian Group — matrices","text":"list vectors (group = c(\"Z4\", \"Z5\", \"Z64\", \"Z125\") list matrices (group = (\"Z4^3\", \"Z5^3\")) carrying coordinate representation specified Abelian group.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/matrices.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the Coordinate Representation from DNA Sequences on Specified\nAbelian Group — matrices","text":"alternative ways get list matrices base/codon coordinate information codon sequence CodonSeq MatrixList class objects. functions can either take output functions base_coord matrices  operate directly DNAStringSet retrieve DNA sequence alignment file. base_seq parameter determine whether return matrices coordinate DNA codon sequence. function seqranges, granges parameter determine whether return GRanges-class object DataFrame.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/matrices.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get the Coordinate Representation from DNA Sequences on Specified\nAbelian Group — matrices","text":"Robersy Sanchez, Jesus Barreto (2021) Genomic Abelian Finite Groups. doi: 10.1101/2021.06.01.446543 M. V Jose, E.R. Morgado, R. Sanchez, T. Govezensky, 24 possible algebraic representations standard genetic code six three dimensions, Adv. Stud. Biol. 4 (2012) 119-152.PDF. R. Sanchez. Symmetric Group Genetic-Code Cubes. Effect Genetic-Code Architecture Evolutionary Process MATCH Commun. Math. Comput. Chem. 79 (2018) 527-560.","code":""},{"path":[]},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/matrices.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the Coordinate Representation from DNA Sequences on Specified\nAbelian Group — matrices","text":"Robersy Sanchez https://genomaths.com","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/matrices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Coordinate Representation from DNA Sequences on Specified\nAbelian Group — matrices","text":"","code":"## Load a pairwise alignment data(aln, package = \"GenomAutomorphism\") aln #> DNAStringSet object of length 2: #>     width seq #> [1]    51 ACCTATGTTGGTATT---GCGCTCCAACTCCTTGGCTCTAGCTCACTACAT #> [2]    51 ATCTATGTTGGTATTACGACGCTCCAATTCCTTGGGTCC------CTCCTT  ## Coordinate representation of the aligned sequences on \"Z4\". ## A list of vectors matrices(     x = aln,     base_seq = TRUE,     filepath = NULL,     cube = \"ACGT\",     group = \"Z4\", ) #> $coord1 #>  [1]  0  1  1  3  0  3  2  3  3  2  2  3  0  3  3 NA NA NA  2  1  2  1  3  1  1 #> [26]  0  0  1  3  1  1  3  3  2  2  1  3  1  3  0  2  1  3  1  0  1  3  0  1  0 #> [51]  3 #>  #> $coord2 #>  [1]  0  3  1  3  0  3  2  3  3  2  2  3  0  3  3  0  1  2  0  1  2  1  3  1  1 #> [26]  0  0  3  3  1  1  3  3  2  2  2  3  1  1 NA NA NA NA NA NA  1  3  1  1  3 #> [51]  3 #>   ## Coordinate representation of the aligned sequences on \"Z4\". ## A list of matrices matrices(     x = aln,     base_seq = FALSE,     filepath = NULL,     cube = \"ACGT\",     group = \"Z5^3\", ) #> $coord1 #>       [,1] [,2] [,3] #>  [1,]    1    0    3 #>  [2,]    2    3    2 #>  [3,]    2    2    4 #>  [4,]    4    3    2 #>  [5,]    1    2    4 #>  [6,]    4    4    1 #>  [7,]    3    2    3 #>  [8,]    4    2    2 #>  [9,]    4    1    4 #> [10,]    3    1    2 #> [11,]    3    2    1 #> [12,]    4    4    2 #> [13,]    1    2    4 #> [14,]    4    2    1 #> [15,]    4    4    2 #> [16,]    0    4    1 #> [17,]    0    3    4 #>  #> $coord2 #>       [,1] [,2] [,3] #>  [1,]    1    3    3 #>  [2,]    4    1    3 #>  [3,]    2    2    4 #>  [4,]    4    3    2 #>  [5,]    1    2    2 #>  [6,]    4    4    0 #>  [7,]    3    2    0 #>  [8,]    4    2    0 #>  [9,]    4    1    0 #> [10,]    3    1    0 #> [11,]    3    4    0 #> [12,]    4    4    2 #> [13,]    1    2    4 #> [14,]    4    2    2 #> [15,]    4    4    2 #> [16,]    1    4    4 #> [17,]    2    3    4 #>"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/modeq.html","id":null,"dir":"Reference","previous_headings":"","what":"A Wrapper Calling Modular Linear Equation Solver (MLE) — modeq","title":"A Wrapper Calling Modular Linear Equation Solver (MLE) — modeq","text":"just wrapper function call modlin. function intended use internally. MLE (\\(* x = b mod n\\)) always solution MLE solution function return value -1. Also, \\(* x = b mod n\\) solution x = 0, function 'modeq' return -1.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/modeq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Wrapper Calling Modular Linear Equation Solver (MLE) — modeq","text":"","code":"modeq(a, b, n)"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/modeq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A Wrapper Calling Modular Linear Equation Solver (MLE) — modeq","text":"number. equation solution definition, domain return -1.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/modeq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A Wrapper Calling Modular Linear Equation Solver (MLE) — modeq","text":"","code":"## The MLE 10 * x = 3 mod 64 has not solution modeq(10, 3, 64) #> [1] -1  ## The result is the giving calling modlin(10, 4, 64) modeq(10, 4, 64) #> [1] 26"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/mut_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Classification of DNA base mutations — mut_type","title":"Classification of DNA base mutations — mut_type","text":"DNA/RNA base can classified three main classes according three criteria (1): number hydrogen bonds (strong-weak), chemical type (purine-pyrimidine), chemical groups (amino versus keto). criterion produces partition set bases: 1) According number hydrogen bonds (DNA/RNA double helix): strong S=C,G (three hydrogen bonds) weak W=,U (two hydrogen bonds). According chemical type: purines R=, G pyrimidines Y=C,U. 3). According presence amino keto groups base rings: amino M=C,keto K=G,U. , mutational event can classified according type involved (2).","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/mut_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classification of DNA base mutations — mut_type","text":"","code":"mut_type(x, y)"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/mut_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classification of DNA base mutations — mut_type","text":"x, y Character strings denoting DNA bases","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/mut_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classification of DNA base mutations — mut_type","text":"character string length 'x' 'y'.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/mut_type.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Classification of DNA base mutations — mut_type","text":". Cornish-Bowden, Nomenclature incompletely specified bases nucleic acid sequences: recommendations 1984, Nucleic Acids Res. 13 (1985) 3021-3030. MA.. Jimenez-Montano, C.R. de la Mora-Basanez, T. Poschel, hypercube structure genetic code explains conservative non-conservative aminoacid substitutions vivo vitro, Biosystems. 39 (1996) 117-125.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/mut_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classification of DNA base mutations — mut_type","text":"","code":"## Mutation type 'R' mut_type(\"A\", \"G\") #> [1] \"R\"  ## Mutation type 'M' mut_type(\"A\", \"C\") #> [1] \"M\"  ## Mutation type 'W' mut_type(\"A\", \"T\") #> [1] \"W\"  ## Mutation type 'S' mut_type(\"G\", \"C\") #> [1] \"S\""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Reexport useful functions to be available to users — reexports","title":"Reexport useful functions to be available to users — reexports","text":"objects imported packages. Follow links see documentation. BiocGenerics end, end<-, start, start<-, strand, strand<-, width Biostrings DNAStringSet, readDNAMultipleAlignment S4Vectors mcols, mcols<-, setValidity2","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/seqranges.html","id":null,"dir":"Reference","previous_headings":"","what":"Get DNA sequence Ranges and Coordinates representation on a given\nAbelian Group — seqranges","title":"Get DNA sequence Ranges and Coordinates representation on a given\nAbelian Group — seqranges","text":"Extract gene ranges coordinates pairwise alignment codon/base sequences represented given Abelian group.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/seqranges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get DNA sequence Ranges and Coordinates representation on a given\nAbelian Group — seqranges","text":"","code":"seqranges(x, ...)  # S4 method for CodonSeq seqranges(x, granges = TRUE)  # S4 method for DNAStringSet_OR_NULL seqranges(   x,   granges = TRUE,   base_seq = TRUE,   filepath = NULL,   start = NA,   end = NA,   chr = 1L,   strand = \"+\" )"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/seqranges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get DNA sequence Ranges and Coordinates representation on a given\nAbelian Group — seqranges","text":"x object DNAStringSet DNAMultipleAlignment class carrying DNA pairwise alignment two sequences. ... use. granges Logical. Whether return GRanges-class object DataFrame. base_seq Logical. Whether return base codon coordinates selected Abelian group. codon coordinates requested, number DNA bases given sequences must multiple 3. filepath character vector containing path file fasta format read. argument must given codon & base arguments provided. start, end, chr, strand Optional parameters required build GRanges-class. provided default values given function definition used.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/seqranges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get DNA sequence Ranges and Coordinates representation on a given\nAbelian Group — seqranges","text":"GRanges-class","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/seqranges.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get DNA sequence Ranges and Coordinates representation on a given\nAbelian Group — seqranges","text":"function provide alternative way get codon coordinate information codon sequence CodonSeq class objects. function can either take output functions codon_coord operate directly DNAStringSet retrieve DNA sequence alignment file.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/seqranges.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get DNA sequence Ranges and Coordinates representation on a given\nAbelian Group — seqranges","text":"Robersy Sanchez, Jesus Barreto (2021) Genomic Abelian Finite Groups. doi:10.1101/2021.06.01.446543 M. V Jose, E.R. Morgado, R. Sanchez, T. Govezensky, 24 possible algebraic representations standard genetic code six three dimensions, Adv. Stud. Biol. 4 (2012) 119-152.PDF. R. Sanchez. Symmetric Group Genetic-Code Cubes. Effect Genetic-Code Architecture Evolutionary Process MATCH Commun. Math. Comput. Chem. 79 (2018) 527-560.","code":""},{"path":[]},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/seqranges.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get DNA sequence Ranges and Coordinates representation on a given\nAbelian Group — seqranges","text":"Robersy Sanchez https://genomaths.com","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/seqranges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get DNA sequence Ranges and Coordinates representation on a given\nAbelian Group — seqranges","text":"","code":"## Load a pairwise alignment data(aln, package = \"GenomAutomorphism\") aln #> DNAStringSet object of length 2: #>     width seq #> [1]    51 ACCTATGTTGGTATT---GCGCTCCAACTCCTTGGCTCTAGCTCACTACAT #> [2]    51 ATCTATGTTGGTATTACGACGCTCCAATTCCTTGGGTCC------CTCCTT  ## A GRanges object carrying the aligned DNA sequence. seqranges(     x = aln,     base_seq = TRUE,     filepath = NULL, ) #> GRanges object with 51 ranges and 2 metadata columns: #>        seqnames    ranges strand |        seq1        seq2 #>           <Rle> <IRanges>  <Rle> | <character> <character> #>    [1]        1         1      + |           A           A #>    [2]        1         2      + |           C           T #>    [3]        1         3      + |           C           C #>    [4]        1         4      + |           T           T #>    [5]        1         5      + |           A           A #>    ...      ...       ...    ... .         ...         ... #>   [47]        1        47      + |           T           T #>   [48]        1        48      + |           A           C #>   [49]        1        49      + |           C           C #>   [50]        1        50      + |           A           T #>   [51]        1        51      + |           T           T #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths  ## A GRanges object carrying the aligned codon sequence. seqranges(     x = aln,     base_seq = FALSE,     filepath = NULL, ) #> GRanges object with 17 ranges and 2 metadata columns: #>        seqnames    ranges strand |        seq1        seq2 #>           <Rle> <IRanges>  <Rle> | <character> <character> #>    [1]        1         1      + |         A-G         AGG #>    [2]        1         2      + |         CGC         TAG #>    [3]        1         3      + |         CCT         CCT #>    [4]        1         4      + |         TGC         TGC #>    [5]        1         5      + |         ACT         ACC #>    ...      ...       ...    ... .         ...         ... #>   [13]        1        13      + |         ACT         ACT #>   [14]        1        14      + |         TCA         TCC #>   [15]        1        15      + |         TTC         TTC #>   [16]        1        16      + |         -TA         ATT #>   [17]        1        17      + |         -GT         CGT #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/slapply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function over a list-like object preserving its attributes — slapply","title":"Apply a function over a list-like object preserving its attributes — slapply","text":"function apply function list-like object preserving attributes simplify (requested) list sapply function . slapply returns list length 'x', element result applying FUN corresponding element 'x'.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/slapply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function over a list-like object preserving its attributes — slapply","text":"","code":"slapply(   x,   FUN,   keep.attr = FALSE,   class = NULL,   simplify = TRUE,   USE.NAMES = TRUE,   ... )"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/slapply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function over a list-like object preserving its attributes — slapply","text":"x list-like vector-like object. FUN, ... described lapply. keep.attr Logic. TRUE, original attributes 'x' preserved returned list. Default FALSE. class Name class returned list belongs . Default NULL. simplify, USE.NAMES described sapply.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/slapply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function over a list-like object preserving its attributes — slapply","text":"?base::lapply keep.attr = FALSE. Otherwise values preserving original attributes 'x'.","code":""},{"path":[]},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/slapply.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Apply a function over a list-like object preserving its attributes — slapply","text":"Robersy Sanchez (https://genomaths.com).","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/slapply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function over a list-like object preserving its attributes — slapply","text":"","code":"## Create a list x <- list(a = 1:10, beta = exp(-3:3), logic = c(TRUE, FALSE, FALSE, TRUE)) class(x) <- \"nice\"  ## To compute the list mean for each list element using 'base::lapply' class(slapply(x, mean, simplify = FALSE)) #> [1] \"list\"  ## Simply 'base::lapply' preserving attributes slapply(x, mean, keep.attr = TRUE, simplify = FALSE) #> $a #> [1] 5.5 #>  #> $beta #> [1] 4.535125 #>  #> $logic #> [1] 0.5 #>  #> attr(,\"class\") #> [1] \"nice\"  ## To preserve attributes and simplify slapply(x, mean, keep.attr = TRUE, simplify = TRUE) #>        a     beta    logic  #> 5.500000 4.535125 0.500000  #> attr(,\"class\") #> [1] \"nice\""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/sortByChromAndStart.html","id":null,"dir":"Reference","previous_headings":"","what":"Sorting GRanges-class objects — sortByChromAndStart","title":"Sorting GRanges-class objects — sortByChromAndStart","text":"Sorts GRanges-class objects seqname (chromosome), start, position.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/sortByChromAndStart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sorting GRanges-class objects — sortByChromAndStart","text":"","code":"sortByChromAndStart(x)  sortByChromAndEnd(x)"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/sortByChromAndStart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sorting GRanges-class objects — sortByChromAndStart","text":"x GRanges object","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/sortByChromAndStart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sorting GRanges-class objects — sortByChromAndStart","text":"GRanges-class object original object class.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/sortByChromAndStart.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sorting GRanges-class objects — sortByChromAndStart","text":"Objects inherits GRanges-class can sorted well.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/sortByChromAndStart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sorting GRanges-class objects — sortByChromAndStart","text":"","code":"GR <- as(c(\"chr2:1-1\", \"chr1:1-1\"), \"GRanges\") GR <- sortByChromAndStart(GR)"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/valid.Automorphism.html","id":null,"dir":"Reference","previous_headings":"","what":"Valid Automorphism mcols — valid.Automorphism.mcols","title":"Valid Automorphism mcols — valid.Automorphism.mcols","text":"Valid Automorphism mcols Valid Automorphism","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/valid.Automorphism.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Valid Automorphism mcols — valid.Automorphism.mcols","text":"","code":"valid.Automorphism.mcols(x)  valid.Automorphism(x)"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/valid.Automorphism.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Valid Automorphism mcols — valid.Automorphism.mcols","text":"x 'Automorphism object'","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/valid.Automorphism.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Valid Automorphism mcols — valid.Automorphism.mcols","text":"Error metacolumn valid format Error Automorphism-class object valid.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/valid.BaseGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Valid BaseGroup mcols — valid.BaseGroup.elem","title":"Valid BaseGroup mcols — valid.BaseGroup.elem","text":"Valid BaseGroup mcols Valid 'BaseGroup' inheritance 'GRanges' class Valid BaseGroup","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/valid.BaseGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Valid BaseGroup mcols — valid.BaseGroup.elem","text":"","code":"valid.BaseGroup.elem(x)  valid.GRanges(x)  valid.BaseGroup(x)"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/valid.BaseGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Valid BaseGroup mcols — valid.BaseGroup.elem","text":"x 'BaseGroup object'","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/valid.BaseGroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Valid BaseGroup mcols — valid.BaseGroup.elem","text":"valid return NULL valid return NULL valid return NULL","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/valid.CodonGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Valid CodonGroup mcols — valid.CodonGroup.mcols","title":"Valid CodonGroup mcols — valid.CodonGroup.mcols","text":"Valid CodonGroup mcols Valid CodonGroup","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/valid.CodonGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Valid CodonGroup mcols — valid.CodonGroup.mcols","text":"","code":"valid.CodonGroup.mcols(x)  valid.CodonGroup(x)"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/valid.CodonGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Valid CodonGroup mcols — valid.CodonGroup.mcols","text":"x 'CodonGroup object'","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/valid.CodonGroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Valid CodonGroup mcols — valid.CodonGroup.mcols","text":"valid return NULL valid return NULL","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/valid.MatrixList.html","id":null,"dir":"Reference","previous_headings":"","what":"Valid MatrixList — valid.MatrixList","title":"Valid MatrixList — valid.MatrixList","text":"Valid MatrixList","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/valid.MatrixList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Valid MatrixList — valid.MatrixList","text":"","code":"valid.MatrixList(x)"},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/valid.MatrixList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Valid MatrixList — valid.MatrixList","text":"x 'MatrixList object'","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/reference/valid.MatrixList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Valid MatrixList — valid.MatrixList","text":"valid return NULL used specify signature S4 setMethod.","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/news/index.html","id":"genomautomorphism-0993","dir":"Changelog","previous_headings":"","what":"GenomAutomorphism 0.99.3","title":"GenomAutomorphism 0.99.3","text":"v* Documentation improvement. * Package accepted Bioconductor (07/18/22)","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/news/index.html","id":"genomautomorphism-0992","dir":"Changelog","previous_headings":"","what":"GenomAutomorphism 0.99.2","title":"GenomAutomorphism 0.99.2","text":"Updating several details review process Bioconductor (https://github.com/Bioconductor/Contributions/issues/2678)","code":""},{"path":"https://genomaths.github.io/GenomAutomorphism/news/index.html","id":"genomautomorphism-0990","dir":"Changelog","previous_headings":"","what":"GenomAutomorphism 0.99.0","title":"GenomAutomorphism 0.99.0","text":"Available https://github.com/genomaths/GenomAutomorphism Initial development.","code":""}]
